;PXZKPG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PRG_COUNT = 1

MODE_TITLE = 0
MODE_CHAR_CREATE = 1
MODE_PLAY = 2
MODE_DEATH = 3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .enum $0000 ; engine vars
    waiting_for_frame .dsb 1
    ppu_mask .dsb 1
    ppu_ctrl .dsb 1
    nt_update_buf_wi .dsb 1
    nt_update_buf_wc .dsb 1
    nt_buffer_overflow .dsb 1
    game_mode .dsb 1
    rng_seed .dsb 2
    buttons .dsb 1
    button_ondown .dsb 1
    paused .dsb 1
    generic_pointer .dsb 2  
    draw_req .dsb 1
    register_backup .dsb 3
    arguments .dsb 4
    returns .dsb 4
    nt_buf_in_hi .dsb 1
    nt_buf_in_lo .dsb 1
    nt_buf_in_dt .dsb 1
  .ende
  
  .enum $0300
    nt_buffer .dsb 256
  .ende
  
  .enum $0400
    dungeon_map .dsb 256
  .ende
  
  .enum $0500 ; character creation vars
    cc_points_spent .dsb 1
    cc_cursor_x .dsb 1
    cc_cursor_y .dsb 1
    
    ;terrible code *requires* you do not reorder this block
    cc_hp_sel .dsb 1
    cc_mp_sel .dsb 1
    cc_str_sel .dsb 1
    cc_atk_sel .dsb 1
    cc_def_sel .dsb 1
    
    cc_cursor_flash_timer .dsb 1
    
    dun_gen .dsb 1 ; 0=not generated, 1=gen in process, 2=gen complete
    gen_working_room .dsb 1
  .ende
  
  .enum $0600 ; playtime vars
    boss_room .dsb 1
    player_room .dsb 1
    player_floor .dsb 1
    player_money .dsb 1
    player_jewels .dsb 1
    
    enemies_in_room .dsb 1
    actor_data_pointer .dsb 1
    actor_sprite_pointer .dsb 1
    actor_sprite_rom_pointer .dsb 1
    actor_control .dsb 1
    
    .incsrc "src/actor_vars.6502"
    
    readout_update_req .dsb 1
    room_update_req .dsb 1
    
    can_move_up_room .dsb 1
    can_move_left_room .dsb 1
    can_move_right_room .dsb 1
    can_move_down_room .dsb 1
    
                     ; +0         +1        +2
    offerings .dsb 3 ; 00|00|0000 0000|0000 0000|0000
                     ; +0[0-1] Spirit resource. 00: gems, 01: healing, 10: mana, 11: agility
                     ; +0[2-3] Fountain resource. 00: defence, 01: strength, 10: max magic, 11: max hp
                     ; +0[4-7] Chest ammount
                     ;
                     ; +1[0-3] Spirit offer cost
                     ; +1[4-7] Spirit offer amount
                     ;
                     ; +2[0-3] Fountain offer
                     ; +2[4-7] Fountain offer amount cost
    current_offer_amounts .dsb 1 ; [0-3] cost [4-7] amount
    current_offer_type .dsb 1 ;    [0] IS TREASURE
                              ;    [1] OFFER EXISTS
                              ;    [4-6] GIVES
                              ;          000 gems
                              ;          001 healing
                              ;          010 mana
                              ;          011 agl
                              ;          100 def
                              ;          101 str
                              ;          110 max mag
                              ;          111 max hp
                              ;    [7] COSTS
                              ;          0: coin, 1: gem
                              
    boss_alive .dsb 1
                     
  .ende
  
  .enum $0700
    generic_bytes .dsb 255
  .ende
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ines header
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .db "NES", $1a ;id
  .db PRG_COUNT ;16k prg pages
  .db $01 ;8k chr pages
  .db $01 ;mirror
  .dsb 9, $00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; prg-rom
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .base $10000-(PRG_COUNT*$4000)
  
  .incsrc "src/macros.6502"
  
Reset:
  SEI         ; disable IRQs
  CLD         ; disable decimal mode
  LDX #$40
  STX $4017   ; disable APU frame IRQ
  LDX #$FF
  TXS         ; Set up stack
  INX         ; now X = 0
  STX $2000   ; disable NMI
  STX $2001   ; disable rendering
  STX $4010   ; disable DMC IRQs
  
  @vblankwait1:  ; First wait for vblank to make sure PPU is ready
    BIT $2002
    BPL @vblankwait1
    
  @clrmem:
    LDA #$00
    STA $0000, x
    STA $0100, x
    STA $0200, x
    STA $0300, x
    STA $0400, x
    STA $0500, x
    STA $0600, x
    STA $0700, x
    INX
    BNE @clrmem

  @vblankwait2:  ; Second wait for vblank, PPU is ready after this
    BIT $2002
    BPL @vblankwait2
    
  init:
    load_pal colorpal1
    
    LDA #1
    STA draw_req
    ;load_nametable 0, room_name
    
    LDA #%10001000 ;enable NMI, sprites from Pattern 1, background from Pattern 0
    STA ppu_ctrl
    STA $2000
    
    LDA #%00011000 ; enable sprites, enable background
    STA ppu_mask
    STA $2001
    
    ;rng_seed can't be 0
    LDA #$42
    STA rng_seed+0
    
    ; load sprite OAM 
    LDA #<sprite_data
    STA generic_pointer+0
    LDA #>sprite_data
    STA  generic_pointer+1
    
    LDY #0
    -:
      LDA (generic_pointer),y
      STA $0200,y
      INY
    BNE -
    
    
  main:
    .incsrc "src/controller.6502"
    ; tick forward prng and xor with controller every frame for more entropy
    JSR rng
    EOR buttons ;rng returned low byte into A
    STA rng_seed+0
    
    ;STA byte_to_dec_in
    ;JSR byte_to_dec
    
    LDA game_mode
    
    CMP #0
    BEQ +
    CMP #1
    BEQ ++
    CMP #2
    BEQ +++
    CMP #3
    BEQ ++++
    
    +:
      JSR title_code
      JMP end_main
    ++:
      JSR cc_code
      JMP end_main
    +++:
      JSR play_code
      JMP end_main
    ++++:
      JMP end_main
    
    end_main:
      LDA #1
      STA waiting_for_frame
      -:
        LDA waiting_for_frame
      BNE -
      
      JMP main

NMI:
  PHP
  STA register_backup
  STX register_backup+1
  STY register_backup+2
  
  LDA 255
  CLC
  ADC #1
  STA 255
  
  LDA #0
  STA $2001

  LDA draw_req
  
  CMP #1
  BNE +
    load_nametable 0, titlescreen_name
    LDA #0
    STA draw_req
  +:
  CMP #2
  BNE +
    load_nametable 1, char_create_name
    LDA #0
    STA draw_req
  +:
  CMP #3
  BNE +
    load_nametable 0, room_name
    LDA #0
    STA draw_req
  +:
  
  JSR pull_nt_buffer
  
  LDA ppu_mask
  STA $2001
  
  LDA #0
  STA waiting_for_frame
  
  JSR reset_scroll
  
  LDA #$00
  STA $2003  ; set the low byte (00) of the RAM address for OAMDMA
  LDA #$02
  STA $4014  ; set the high byte (02) of the RAM address, start the transfer
    
  LDA register_backup
  LDX register_backup+1
  LDY register_backup+2
  PLP
  RTI

  
IRQ:
  RTI
  
  .incsrc "src/utils.6502"
  .incsrc "src/reset_scroll.6502"
  .incsrc "src/title_code.6502"
  .incsrc "src/cc_code.6502"
  .incsrc "src/generator.6502"
  .incsrc "src/play_code.6502"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .org $E000
colorpal1:
  .incbin "dat/pal.dat"
titlescreen_name:
  .incbin "dat/title.nam"
char_create_name:
  .incbin "dat/char_create.nam"
room_name:
  .incbin "dat/room.nam"
  
cc_stat_options:
  .incbin "dat/player_stat.dat"
enemy_starting_stats:
  .incbin "dat/enemy_stat.dat"
  
sprite_data:
  .incbin "dat/sprite_data.dat"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; interupt vectors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .org $fffa

  .dw NMI
  .dw Reset
  .dw IRQ

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; chr-rom
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  .incbin "dat/sprites.chr"
