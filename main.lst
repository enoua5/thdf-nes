	                            ;PXZKPG
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ; constants
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            
	                            PRG_COUNT = 1
	                            
	                            MODE_TITLE = 0
	                            MODE_CHAR_CREATE = 1
	                            MODE_PLAY = 2
	                            MODE_DEATH = 3
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ; vars
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            
	                              .enum $0000 ; engine vars
00000                               waiting_for_frame .dsb 1
00001                               ppu_mask .dsb 1
00002                               ppu_ctrl .dsb 1
00003                               nt_update_buf_wi .dsb 1
00004                               nt_update_buf_wc .dsb 1
00005                               nt_buffer_overflow .dsb 1
00006                               game_mode .dsb 1
00007                               rng_seed .dsb 2
00009                               buttons .dsb 1
0000A                               button_ondown .dsb 1
0000B                               generic_pointer .dsb 2  
0000D                               draw_req .dsb 1
0000E                               register_backup .dsb 3
00011                               byte_to_dec_in .dsb 1
00012                               byte_to_dec_out .dsb 3
00015                             .ende
	                              
	                              .enum $0300
00300                               nt_buffer .dsb 256
00400                             .ende
	                              
	                              .enum $0400
00400                               dungeon_map .dsb 256
00500                             .ende
	                              
	                              .enum $0500 ; character creation vars
00500                               cc_points_spent .dsb 1
00501                               cc_cursor_x .dsb 1
00502                               cc_cursor_y .dsb 1
00503                               
00503                               ;terrible code *requires* you do not reorder this block
00503                               cc_hp_sel .dsb 1
00504                               cc_mp_sel .dsb 1
00505                               cc_str_sel .dsb 1
00506                               cc_atk_sel .dsb 1
00507                               cc_def_sel .dsb 1
00508                               
00508                               cc_cursor_flash_timer .dsb 1
00509                               
00509                               dun_gen .dsb 1 ; 0=not generated, 1=gen in process, 2=gen complete
0050A                               gen_working_room .dsb 1
0050B                             .ende
	                              
	                              .enum $0600 ; playtime vars
00600                               boss_room .dsb 1
00601                               player_room .dsb 1
00602                               player_floor .dsb 1
00603                               player_money .dsb 1
00604                               player_jewels .dsb 1
00605                               enemies_in_room .dsb 1
00606                               .incsrc "src/actor_vars.6502"
00606                             player .dsb 20
0061A                             warrior .dsb 20
0062E                             theif .dsb 20
00642                             mage .dsb 20
00656                             tank .dsb 20
0066A                             dragon .dsb 20
0067E                             ;some consts to keep track of locations in those structs
0067E                             ;DO NOT REORDER THIS BLOCK OR ADD DATA BEFORE IT!!
0067E                             ACT_HPMAX .equ 0
0067E                             ACT_MANAMAX .equ 1
0067E                             ACT_STR .equ 2
0067E                             ACT_AGL .equ 3
0067E                             ACT_DEF .equ 4
0067E                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067E                             ACT_HP .equ 5
0067E                             ACT_MANA .equ 6
0067E                             ACT_ATTKTIME .equ 7
0067E                             ACT_X .equ 8
0067E                             ACT_Y .equ 9
0067E                             ACT_ANIM_TIMER .equ 10
0067E                             ACT_FIRE_X .equ 11
0067E                             ACT_FIRE_Y .equ 12
0067E                             ACT_FIRE_XVEL .equ 13
0067E                             ACT_FIRE_YVEL .equ 14
0067E                             ACT_FIRE_ANIM_TIMER .equ 15
0067E                             ACT_READOUT_DIGITS .equ 16
0067E                             ACT_READOUT_DIGIT2 .equ 17
0067E                             ACT_READOUT_DIGIT3 .equ 18
0067E                             ACT_READOUT_TIMER .equ 19
0067E                               
0067E                               readout_update_req .dsb 1
0067F                               room_update_req .dsb 1
00680                             .ende
	                              
	                              .enum $0700
00700                               generic_bytes .dsb 255
007FF                             .ende
	                              
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ; ines header
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            
	  4E 45 53 1A                 .db "NES", $1a ;id
	  01                          .db PRG_COUNT ;16k prg pages
	  01                          .db $01 ;8k chr pages
	  01                          .db $01 ;mirror
	  00 00 00 00 00 00 00 00..   .dsb 9, $00
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ; prg-rom
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            
	                              .base $10000-(PRG_COUNT*$4000)
0C000                             
0C000                             .incsrc "src/macros.6502"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ; UTILS
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           
0C000                           MACRO load_pal pal_address
0C000                             ;load color pal
0C000                             LDA $2002 ; reset the hight/low latch to high
0C000                             LDA #$3F
0C000                             STA $2006 ; write high byte
0C000                             LDA #$00
0C000                             STA $2006 ; PPU is now looking at $3F10; the color palette data
0C000                               
0C000                             LDX #$00
0C000                             -:
0C000                               LDA pal_address, x
0C000                               STA $2007
0C000                               INX
0C000                               CPX #$20
0C000                               BNE -
0C000                           ENDM
0C000                           
0C000                           MACRO load_nametable nt_number, nt_pointer
0C000                             ;load nametable
0C000                             LDA $2002             ; read PPU status to reset the high/low latch
0C000                             LDA #$20+(nt_number*$04)
0C000                             STA $2006             ; write the high byte of address
0C000                             LDA #$00
0C000                             STA $2006             ; write the low byte of address
0C000                             
0C000                             LDA #<nt_pointer
0C000                             STA generic_pointer+0
0C000                             LDA #>nt_pointer
0C000                             STA generic_pointer+1
0C000                             
0C000                             LDY #$00 ; counter for the loop
0C000                             LDX #$04 ; 4*256 = 1k, how much data we copy
0C000                             -:
0C000                               LDA (generic_pointer), y
0C000                               STA $2007             ; write to PPU
0C000                               INY
0C000                               BNE -
0C000                               INC generic_pointer+1
0C000                               DEX
0C000                               BNE -
0C000                           ENDM
0C000                           
0C000                           MACRO veryify_nmi_safe
0C000                             ;backup registers, so we can restore them
0C000                             PHP
0C000                             STA register_backup
0C000                             STX register_backup+1
0C000                             STY register_backup+2
0C000                             ;check the flag
0C000                             LDA proc_frame
0C000                             CMP #0
0C000                             BEQ +
0C000                               ;restore registers and return from interupt
0C000                               LDA register_backup
0C000                               LDX register_backup+1
0C000                               LDY register_backup+2
0C000                               PLP
0C000                               RTI
0C000                             +: ;we're safe to proceed
0C000                             PLP
0C000                           ENDM
0C000                           
0C000                           MACRO check_ondown button_id
0C000                             LDA button_ondown
0C000                             AND button_id
0C000                           ENDM
0C000                           
0C000                           MACRO begin_nt_buffer_write loc_high, loc_low
0C000                             ;if they previous entry is unfinished, finish it
0C000                             LDA nt_update_buf_wi
0C000                             CMP nt_update_buf_wc
0C000                             BEQ +
0C000                               end_nt_buffer_write
0C000                             +:
0C000                           
0C000                             LDA nt_update_buf_wi
0C000                             CMP #$fb ;minumum space needed for a new entry
0C000                             BCC +
0C000                               LDA #1
0C000                               STA nt_buffer_overflow
0C000                             +:
0C000                             
0C000                             LDA nt_buffer_overflow
0C000                             BNE +
0C000                             
0C000                             LDX nt_update_buf_wi
0C000                             LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C000                             STA nt_buffer, X
0C000                             
0C000                             INX
0C000                             LDA loc_high
0C000                             STA nt_buffer, X
0C000                             
0C000                             INX
0C000                             LDA loc_low
0C000                             STA nt_buffer, X
0C000                             
0C000                             INX
0C000                             STX nt_update_buf_wc
0C000                             
0C000                             +:
0C000                           ENDM
0C000                           
0C000                           MACRO write_to_nt_buffer byte
0C000                             LDA nt_buffer_overflow
0C000                             BNE +
0C000                             
0C000                             LDA byte
0C000                             LDX nt_update_buf_wc
0C000                             STA nt_buffer, X
0C000                             INC nt_update_buf_wc
0C000                             
0C000                             ;buffer overflow check
0C000                             LDA nt_update_buf_wc
0C000                             CMP #$FE
0C000                             BNE +
0C000                               LDA #1
0C000                               STA nt_buffer_overflow
0C000                               end_nt_buffer_write
0C000                             +:
0C000                           ENDM
0C000                           
0C000                           MACRO end_nt_buffer_write
0C000                             ;find and write data lentgh
0C000                             LDA nt_update_buf_wc
0C000                             SBC nt_update_buf_wi
0C000                             LDX nt_update_buf_wi
0C000                             STA nt_buffer, X
0C000                             ;update `write initial` using `write current`
0C000                             LDX nt_update_buf_wc
0C000                             STX nt_update_buf_wi
0C000                           ENDM
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ; GENERATOR
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           
0C000                           MACRO choose_random_room
0C000                             -:
0C000                               JSR rng
0C000                               LDX rng_seed
0C000                               LDA dungeon_map, X
0C000                             BEQ - ; if room is empty, try again
0C000                           ENDM
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ; CHARACTER CREATION
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           
0C000                           MACRO fill_ind_stats dest, source
0C000                             LDX #$00
0C000                             
0C000                             LDY source, X
0C000                             LDA cc_stat_options, Y
0C000                             STA dest, X
0C000                             INX
0C000                             
0C000                             LDY source, X
0C000                             LDA cc_stat_options+4, Y
0C000                             STA dest, X
0C000                             INX
0C000                             
0C000                             LDY source, X
0C000                             LDA cc_stat_options+8, Y
0C000                             STA dest, X
0C000                             INX
0C000                             
0C000                             LDY source, X
0C000                             LDA cc_stat_options+12, Y
0C000                             STA dest, X
0C000                             INX
0C000                             
0C000                             LDY source, X
0C000                             LDA cc_stat_options+16, Y
0C000                             STA dest, X
0C000                           ENDM
0C000                             
0C000                           Reset:
0C000 78                          SEI         ; disable IRQs
0C001 D8                          CLD         ; disable decimal mode
0C002 A2 40                       LDX #$40
0C004 8E 17 40                    STX $4017   ; disable APU frame IRQ
0C007 A2 FF                       LDX #$FF
0C009 9A                          TXS         ; Set up stack
0C00A E8                          INX         ; now X = 0
0C00B 8E 00 20                    STX $2000   ; disable NMI
0C00E 8E 01 20                    STX $2001   ; disable rendering
0C011 8E 10 40                    STX $4010   ; disable DMC IRQs
0C014                             
0C014                             @vblankwait1:  ; First wait for vblank to make sure PPU is ready
0C014 2C 02 20                      BIT $2002
0C017 10 FB                         BPL @vblankwait1
0C019                               
0C019                             @clrmem:
0C019 A9 00                         LDA #$00
0C01B 95 00                         STA $0000, x
0C01D 9D 00 01                      STA $0100, x
0C020 9D 00 03                      STA $0300, x
0C023 9D 00 04                      STA $0400, x
0C026 9D 00 05                      STA $0500, x
0C029 9D 00 06                      STA $0600, x
0C02C 9D 00 07                      STA $0700, x
0C02F A9 FE                         LDA #$FE
0C031 9D 00 02                      STA $0200, x
0C034 E8                            INX
0C035 D0 E2                         BNE @clrmem
0C037                           
0C037                             @vblankwait2:  ; Second wait for vblank, PPU is ready after this
0C037 2C 02 20                      BIT $2002
0C03A 10 FB                         BPL @vblankwait2
0C03C                               
0C03C                             init:
0C03C                               load_pal colorpal1
0C03C                             ;load color pal
0C03C AD 02 20                    LDA $2002 ; reset the hight/low latch to high
0C03F A9 3F                       LDA #$3F
0C041 8D 06 20                    STA $2006 ; write high byte
0C044 A9 00                       LDA #$00
0C046 8D 06 20                    STA $2006 ; PPU is now looking at $3F10; the color palette data
0C049                               
0C049 A2 00                       LDX #$00
0C04B                             -:
0C04B BD 3D E0                      LDA colorpal1, x
0C04E 8D 07 20                      STA $2007
0C051 E8                            INX
0C052 E0 20                         CPX #$20
0C054 D0 F5                         BNE -
0C056                               
0C056 A9 01                         LDA #1
0C058 85 0D                         STA draw_req
0C05A                               ;load_nametable 0, room_name
0C05A                               
0C05A A9 88                         LDA #%10001000 ;enable NMI, sprites from Pattern 1, background from Pattern 0
0C05C 85 02                         STA ppu_ctrl
0C05E 8D 00 20                      STA $2000
0C061                               
0C061 A9 58                         LDA #%01011000 ; enable sprites, enable background
0C063 85 01                         STA ppu_mask
0C065 8D 01 20                      STA $2001
0C068                               
0C068                               ;rng_seed can't be 0
0C068 A9 42                         LDA #$42
0C06A 85 07                         STA rng_seed+0
0C06C                             main:
0C06C                               .incsrc "src/controller.6502"
0C06C                             A_BUTTON      .equ #%10000000
0C06C                             B_BUTTON      .equ #%01000000
0C06C                             SELECT_BUTTON .equ #%00100000
0C06C                             START_BUTTON  .equ #%00010000
0C06C                             UP_BUTTON     .equ #%00001000
0C06C                             DOWN_BUTTON   .equ #%00000100
0C06C                             LEFT_BUTTON   .equ #%00000010
0C06C                             RIGHT_BUTTON  .equ #%00000001
0C06C                           
0C06C A5 09                       LDA buttons
0C06E 85 0A                       STA button_ondown ; using to hold buttons last frame for now
0C070                           
0C070                             ;latch controller
0C070 A9 01                       LDA #$01
0C072 8D 16 40                    STA $4016
0C075 85 09                       STA buttons
0C077 4A                          LSR a ;a=0
0C078 8D 16 40                    STA $4016
0C07B                             @readpad:
0C07B AD 16 40                      LDA $4016
0C07E 4A                            LSR a ; b0 -> carry
0C07F 26 09                         ROL buttons ; carry -> b0 
0C081 90 F8                         bcc @readpad
0C083                             
0C083 A5 0A                       LDA button_ondown
0C085 45 09                       EOR buttons ;detect edges from this frame to last
0C087 25 09                       AND buttons ;if they're down now, it was a down edge
0C089 85 0A                       STA button_ondown
0C08B                               ; tick forward prng and xor with controller every frame for more entropy
0C08B 20 97 C1                      JSR rng
0C08E 45 09                         EOR buttons ;rng returned low byte into A
0C090 85 07                         STA rng_seed+0
0C092                               
0C092                               ;STA byte_to_dec_in
0C092                               ;JSR byte_to_dec
0C092                               
0C092 A5 06                         LDA game_mode
0C094                               
0C094 C9 00                         CMP #0
0C096 F0 0C                         BEQ +
0C098 C9 01                         CMP #1
0C09A F0 0E                         BEQ ++
0C09C C9 02                         CMP #2
0C09E F0 10                         BEQ +++
0C0A0 C9 03                         CMP #3
0C0A2 F0 12                         BEQ ++++
0C0A4                               
0C0A4                               +:
0C0A4 20 02 C2                        JSR title_code
0C0A7 4C B9 C0                        JMP end_main
0C0AA                               ++:
0C0AA 20 11 C2                        JSR cc_code
0C0AD 4C B9 C0                        JMP end_main
0C0B0                               +++:
0C0B0 20 C6 DF                        JSR play_code
0C0B3 4C B9 C0                        JMP end_main
0C0B6                               ++++:
0C0B6 4C B9 C0                        JMP end_main
0C0B9                               
0C0B9                               end_main:
0C0B9 A9 01                           LDA #1
0C0BB 85 00                           STA waiting_for_frame
0C0BD                                 
0C0BD                                 -:
0C0BD A5 00                             LDA waiting_for_frame
0C0BF C9 00                             CMP #0
0C0C1 D0 FA                           BNE -
0C0C3                                 
0C0C3 4C 6C C0                        JMP main
0C0C6                           
0C0C6                           NMI:
0C0C6 08                          PHP
0C0C7 85 0E                       STA register_backup
0C0C9 86 0F                       STX register_backup+1
0C0CB 84 10                       STY register_backup+2
0C0CD                             
0C0CD A9 00                       LDA #0
0C0CF 8D 01 20                    STA $2001
0C0D2                           
0C0D2 A5 0D                       LDA draw_req
0C0D4                             
0C0D4 C9 01                       CMP #1
0C0D6 D0 2A                       BNE +
0C0D8                               load_nametable 0, titlescreen_name
0C0D8                             ;load nametable
0C0D8 AD 02 20                    LDA $2002             ; read PPU status to reset the high/low latch
0C0DB A9 20                       LDA #$20+(0*$04)
0C0DD 8D 06 20                    STA $2006             ; write the high byte of address
0C0E0 A9 00                       LDA #$00
0C0E2 8D 06 20                    STA $2006             ; write the low byte of address
0C0E5                             
0C0E5 A9 3D                       LDA #<titlescreen_name
0C0E7 85 0B                       STA generic_pointer+0
0C0E9 A9 E1                       LDA #>titlescreen_name
0C0EB 85 0C                       STA generic_pointer+1
0C0ED                             
0C0ED A0 00                       LDY #$00 ; counter for the loop
0C0EF A2 04                       LDX #$04 ; 4*256 = 1k, how much data we copy
0C0F1                             -:
0C0F1 B1 0B                         LDA (generic_pointer), y
0C0F3 8D 07 20                      STA $2007             ; write to PPU
0C0F6 C8                            INY
0C0F7 D0 F8                         BNE -
0C0F9 E6 0C                         INC generic_pointer+1
0C0FB CA                            DEX
0C0FC D0 F3                         BNE -
0C0FE A9 00                         LDA #0
0C100 85 0D                         STA draw_req
0C102                             +:
0C102 C9 02                       CMP #2
0C104 D0 2A                       BNE +
0C106                               load_nametable 1, char_create_name
0C106                             ;load nametable
0C106 AD 02 20                    LDA $2002             ; read PPU status to reset the high/low latch
0C109 A9 24                       LDA #$20+(1*$04)
0C10B 8D 06 20                    STA $2006             ; write the high byte of address
0C10E A9 00                       LDA #$00
0C110 8D 06 20                    STA $2006             ; write the low byte of address
0C113                             
0C113 A9 3D                       LDA #<char_create_name
0C115 85 0B                       STA generic_pointer+0
0C117 A9 E5                       LDA #>char_create_name
0C119 85 0C                       STA generic_pointer+1
0C11B                             
0C11B A0 00                       LDY #$00 ; counter for the loop
0C11D A2 04                       LDX #$04 ; 4*256 = 1k, how much data we copy
0C11F                             -:
0C11F B1 0B                         LDA (generic_pointer), y
0C121 8D 07 20                      STA $2007             ; write to PPU
0C124 C8                            INY
0C125 D0 F8                         BNE -
0C127 E6 0C                         INC generic_pointer+1
0C129 CA                            DEX
0C12A D0 F3                         BNE -
0C12C A9 00                         LDA #0
0C12E 85 0D                         STA draw_req
0C130                             +:
0C130 C9 03                       CMP #3
0C132 D0 2A                       BNE +
0C134                               load_nametable 0, room_name
0C134                             ;load nametable
0C134 AD 02 20                    LDA $2002             ; read PPU status to reset the high/low latch
0C137 A9 20                       LDA #$20+(0*$04)
0C139 8D 06 20                    STA $2006             ; write the high byte of address
0C13C A9 00                       LDA #$00
0C13E 8D 06 20                    STA $2006             ; write the low byte of address
0C141                             
0C141 A9 3D                       LDA #<room_name
0C143 85 0B                       STA generic_pointer+0
0C145 A9 E9                       LDA #>room_name
0C147 85 0C                       STA generic_pointer+1
0C149                             
0C149 A0 00                       LDY #$00 ; counter for the loop
0C14B A2 04                       LDX #$04 ; 4*256 = 1k, how much data we copy
0C14D                             -:
0C14D B1 0B                         LDA (generic_pointer), y
0C14F 8D 07 20                      STA $2007             ; write to PPU
0C152 C8                            INY
0C153 D0 F8                         BNE -
0C155 E6 0C                         INC generic_pointer+1
0C157 CA                            DEX
0C158 D0 F3                         BNE -
0C15A A9 00                         LDA #0
0C15C 85 0D                         STA draw_req
0C15E                             +:
0C15E                             
0C15E 20 AA C1                    JSR pull_nt_buffer
0C161                             
0C161                             .incsrc "src/reset_scroll.6502"
0C161 A9 FE                       LDA #%11111110 ;turn off last bit of ppu_ctrl
0C163 25 02                       AND ppu_ctrl
0C165 85 02                       STA ppu_ctrl
0C167                           
0C167 A9 01                       LDA #$01
0C169 25 06                       AND game_mode ;we move back and forth between the two screens
0C16B                                           ;every time we switch modes
0C16B C9 01                       CMP #$01
0C16D                             
0C16D                             ;LDA with 0 or one depending on eveness of gamemode
0C16D D0 05                       BNE +
0C16F A9 01                         LDA #$01
0C171 4C 76 C1                      JMP ++
0C174                             +:
0C174 A9 00                         LDA #$00
0C176                             ++:
0C176                             
0C176 05 02                       ORA ppu_ctrl ;write the correct scroll to the ppu_ctrl
0C178 85 02                       STA ppu_ctrl
0C17A 8D 00 20                    STA $2000
0C17D                             
0C17D                             ;yay hardware glitches...
0C17D A9 00                       LDA #$00
0C17F 8D 05 20                    STA $2005
0C182 8D 05 20                    STA $2005
0C185                             
0C185 A5 01                       LDA ppu_mask
0C187 8D 01 20                    STA $2001
0C18A                             
0C18A A9 00                       LDA #0
0C18C 85 00                       STA waiting_for_frame
0C18E                             
0C18E A5 0E                       LDA register_backup
0C190 A6 0F                       LDX register_backup+1
0C192 A4 10                       LDY register_backup+2
0C194 28                          PLP
0C195 40                          RTI
0C196                           
0C196                             
0C196                           IRQ:
0C196 40                          RTI
0C197                             
0C197                             .incsrc "src/utils.6502"
0C197                           rng: ;loads A and X
0C197 A2 08                       LDX #8
0C199 A5 07                       LDA rng_seed+0
0C19B                           --:
0C19B 0A                          ASL
0C19C 26 08                       ROL rng_seed+1
0C19E 90 02                       BCC +
0C1A0 49 2D                       EOR #$2D
0C1A2                           +:
0C1A2 CA                          DEX
0C1A3 D0 F6                       BNE --
0C1A5 85 07                       STA rng_seed+0
0C1A7 C9 00                       CMP #0
0C1A9 60                          RTS
0C1AA                           
0C1AA                           pull_nt_buffer:
0C1AA A2 00                       LDX #$00 ;buffer pointer
0C1AC A0 00                       LDY #$00 ;entry length counter
0C1AE                             -:
0C1AE E4 03                         CPX nt_update_buf_wi
0C1B0 F0 26                         BEQ finish_nt_update:
0C1B2 C0 00                         CPY #$00
0C1B4 D0 17                         BNE +
0C1B6                                 ;we are at the start of a new entry
0C1B6 BC 00 03                        LDY nt_buffer, X
0C1B9 E8                              INX
0C1BA                                 
0C1BA AD 02 20                        LDA $2002 ; read PPU status to reset the high/low latch
0C1BD                                 
0C1BD BD 00 03                        LDA nt_buffer, X
0C1C0 8D 06 20                        STA $2006 ; write the high byte of address
0C1C3 E8                              INX
0C1C4 88                              DEY
0C1C5                                 
0C1C5 BD 00 03                        LDA nt_buffer, X
0C1C8 8D 06 20                        STA $2006 ; write the low byte of address
0C1CB E8                              INX
0C1CC 88                              DEY
0C1CD                               +:
0C1CD BD 00 03                        LDA nt_buffer, X
0C1D0 8D 07 20                        STA $2007 ; write to ppu
0C1D3 E8                              INX
0C1D4 88                              DEY
0C1D5 4C AE C1                        JMP -
0C1D8                                 
0C1D8                             finish_nt_update:
0C1D8                             
0C1D8 A9 00                       LDA #0
0C1DA 85 05                       STA nt_buffer_overflow
0C1DC 85 03                       STA nt_update_buf_wi
0C1DE 85 04                       STA nt_update_buf_wc
0C1E0                             
0C1E0 60                          RTS
0C1E1                             
0C1E1                           byte_to_dec:
0C1E1 A5 11                       LDA byte_to_dec_in
0C1E3                             
0C1E3                             ;100's place
0C1E3 A2 00                       LDX #0
0C1E5                             -:
0C1E5 C9 64                         CMP #100
0C1E7 90 06                         BCC +
0C1E9 E8                              INX
0C1EA                                 ;SEC
0C1EA E9 64                           SBC #100
0C1EC 4C E5 C1                      JMP -
0C1EF                             +:
0C1EF 86 12                       STX byte_to_dec_out+0
0C1F1                             
0C1F1                             ;10's place
0C1F1 A2 00                       LDX #0
0C1F3                             -:
0C1F3 C9 0A                         CMP #10
0C1F5 90 06                         BCC +
0C1F7 E8                              INX
0C1F8                                 ;SEC
0C1F8 E9 0A                           SBC #10
0C1FA 4C F3 C1                      JMP -
0C1FD                             +:
0C1FD 86 13                       STX byte_to_dec_out+1
0C1FF                             
0C1FF                             ;1's place
0C1FF 85 14                       STA byte_to_dec_out+2
0C201                             
0C201 60                          RTS
0C202                             .incsrc "src/title_code.6502"
0C202                           title_code:
0C202                             check_ondown #%00010000
0C202 A5 0A                       LDA button_ondown
0C204 29 10                       AND #%00010000
0C206 F0 08                       BEQ +
0C208                             
0C208 A9 01                         LDA #1
0C20A 85 06                         STA game_mode
0C20C A9 02                         LDA #2
0C20E 85 0D                         STA draw_req
0C210                             +:
0C210                             
0C210 60                          RTS
0C211                             .incsrc "src/cc_code.6502"
0C211                           cc_code:
0C211                             ;(this has been moved to after character creation in order to provide more entropy)
0C211                             ;if gen not in progress, set it going
0C211                             ;LDA dun_gen
0C211                             ;CMP #0
0C211                             ;BNE +cc1
0C211                               ;JSR gen_dungeon
0C211                               ;LDA #3
0C211                               ;STA draw_req
0C211                             ;+cc1:
0C211                           
0C211 20 57 C2                    JSR cc_move_cursor
0C214 20 44 C5                    JSR cc_draw_screen
0C217                             
0C217                             
0C217                             check_ondown #%00010000
0C217 A5 0A                       LDA button_ondown
0C219 29 10                       AND #%00010000
0C21B F0 0E                       BEQ +
0C21D 20 AE C5                      JSR fill_stats
0C220 A9 02                         LDA #2
0C222 85 06                         STA game_mode
0C224 20 CC C7                      JSR gen_dungeon
0C227 A9 03                         LDA #3
0C229 85 0D                         STA draw_req
0C22B                             +:
0C22B 60                          RTS
0C22C                           
0C22C                           set_generic_pointer_to_cursor_position:
0C22C                             ;find high byte
0C22C A2 24                       LDX #$24
0C22E                             
0C22E AD 02 05                    LDA cc_cursor_y
0C231 F0 01                       BEQ +
0C233 E8                            INX ;high byte is 24 for y=0, 25 otherwise
0C234                             +:
0C234                             
0C234 86 0B                       STX generic_pointer+0
0C236                             
0C236                             ;find low byte
0C236                             
0C236 A9 C9                       LDA #$C9
0C238 AE 02 05                    LDX cc_cursor_y
0C23B                             -:
0C23B E0 00                         CPX #0
0C23D F0 07                         BEQ +
0C23F                               
0C23F 18                            CLC
0C240 69 40                         ADC #$40 ; each row is +$40 further than the last
0C242 CA                            DEX
0C243 4C 3B C2                      JMP -
0C246                             +:
0C246                             
0C246 AE 01 05                    LDX cc_cursor_x
0C249                             -:
0C249 E0 00                         CPX #0
0C24B F0 07                         BEQ +
0C24D                               
0C24D 18                            CLC
0C24E 69 05                         ADC #$05 ; each column is 5 further than the last
0C250 CA                            DEX
0C251 4C 49 C2                      JMP -
0C254                             +:
0C254                             
0C254 85 0C                       STA generic_pointer+1
0C256                             
0C256 60                          RTS
0C257                           
0C257                           cc_move_cursor:
0C257                             ;flash cursor
0C257 EE 08 05                    INC cc_cursor_flash_timer
0C25A AD 08 05                    LDA cc_cursor_flash_timer
0C25D 29 20                       AND #%00100000
0C25F                             ;STA debug_counter
0C25F                             ;check buttons and move
0C25F                             ;NOTE: make sure to set cursor to visible before move
0C25F                             check_ondown #%00001000
0C25F A5 0A                       LDA button_ondown
0C261 29 08                       AND #%00001000
0C263 F0 77                       BEQ +
0C265                               ;unclear current cursor
0C265 20 2C C2                      JSR set_generic_pointer_to_cursor_position
0C268                               begin_nt_buffer_write generic_pointer+0, generic_pointer+1
0C268                             ;if they previous entry is unfinished, finish it
0C268 A5 03                       LDA nt_update_buf_wi
0C26A C5 04                       CMP nt_update_buf_wc
0C26C F0 0D                       BEQ +
0C26E                               end_nt_buffer_write
0C26E                             ;find and write data lentgh
0C26E A5 04                       LDA nt_update_buf_wc
0C270 E5 03                       SBC nt_update_buf_wi
0C272 A6 03                       LDX nt_update_buf_wi
0C274 9D 00 03                    STA nt_buffer, X
0C277                             ;update `write initial` using `write current`
0C277 A6 04                       LDX nt_update_buf_wc
0C279 86 03                       STX nt_update_buf_wi
0C27B                             +:
0C27B                           
0C27B A5 03                       LDA nt_update_buf_wi
0C27D C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C27F 90 04                       BCC +
0C281 A9 01                         LDA #1
0C283 85 05                         STA nt_buffer_overflow
0C285                             +:
0C285                             
0C285 A5 05                       LDA nt_buffer_overflow
0C287 D0 16                       BNE +
0C289                             
0C289 A6 03                       LDX nt_update_buf_wi
0C28B A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C28D 9D 00 03                    STA nt_buffer, X
0C290                             
0C290 E8                          INX
0C291 A5 0B                       LDA generic_pointer+0
0C293 9D 00 03                    STA nt_buffer, X
0C296                             
0C296 E8                          INX
0C297 A5 0C                       LDA generic_pointer+1
0C299 9D 00 03                    STA nt_buffer, X
0C29C                             
0C29C E8                          INX
0C29D 86 04                       STX nt_update_buf_wc
0C29F                             
0C29F                             +:
0C29F                               write_to_nt_buffer #$35
0C29F A5 05                       LDA nt_buffer_overflow
0C2A1 D0 20                       BNE +
0C2A3                             
0C2A3 A9 35                       LDA #$35
0C2A5 A6 04                       LDX nt_update_buf_wc
0C2A7 9D 00 03                    STA nt_buffer, X
0C2AA E6 04                       INC nt_update_buf_wc
0C2AC                             
0C2AC                             ;buffer overflow check
0C2AC A5 04                       LDA nt_update_buf_wc
0C2AE C9 FE                       CMP #$FE
0C2B0 D0 11                       BNE +
0C2B2 A9 01                         LDA #1
0C2B4 85 05                         STA nt_buffer_overflow
0C2B6                               end_nt_buffer_write
0C2B6                             ;find and write data lentgh
0C2B6 A5 04                       LDA nt_update_buf_wc
0C2B8 E5 03                       SBC nt_update_buf_wi
0C2BA A6 03                       LDX nt_update_buf_wi
0C2BC 9D 00 03                    STA nt_buffer, X
0C2BF                             ;update `write initial` using `write current`
0C2BF A6 04                       LDX nt_update_buf_wc
0C2C1 86 03                       STX nt_update_buf_wi
0C2C3                             +:
0C2C3                               end_nt_buffer_write
0C2C3                             ;find and write data lentgh
0C2C3 A5 04                       LDA nt_update_buf_wc
0C2C5 E5 03                       SBC nt_update_buf_wi
0C2C7 A6 03                       LDX nt_update_buf_wi
0C2C9 9D 00 03                    STA nt_buffer, X
0C2CC                             ;update `write initial` using `write current`
0C2CC A6 04                       LDX nt_update_buf_wc
0C2CE 86 03                       STX nt_update_buf_wi
0C2D0                               
0C2D0 CE 02 05                      DEC cc_cursor_y
0C2D3                               ;when y changes, we need to move to the new x
0C2D3 AE 02 05                      LDX cc_cursor_y
0C2D6 BD 03 05                      LDA cc_hp_sel, X
0C2D9 8D 01 05                      STA cc_cursor_x
0C2DC                             +:
0C2DC                             check_ondown #%00000100
0C2DC A5 0A                       LDA button_ondown
0C2DE 29 04                       AND #%00000100
0C2E0 F0 77                       BEQ +
0C2E2                               ;unclear current cursor
0C2E2 20 2C C2                      JSR set_generic_pointer_to_cursor_position
0C2E5                               begin_nt_buffer_write generic_pointer+0, generic_pointer+1
0C2E5                             ;if they previous entry is unfinished, finish it
0C2E5 A5 03                       LDA nt_update_buf_wi
0C2E7 C5 04                       CMP nt_update_buf_wc
0C2E9 F0 0D                       BEQ +
0C2EB                               end_nt_buffer_write
0C2EB                             ;find and write data lentgh
0C2EB A5 04                       LDA nt_update_buf_wc
0C2ED E5 03                       SBC nt_update_buf_wi
0C2EF A6 03                       LDX nt_update_buf_wi
0C2F1 9D 00 03                    STA nt_buffer, X
0C2F4                             ;update `write initial` using `write current`
0C2F4 A6 04                       LDX nt_update_buf_wc
0C2F6 86 03                       STX nt_update_buf_wi
0C2F8                             +:
0C2F8                           
0C2F8 A5 03                       LDA nt_update_buf_wi
0C2FA C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C2FC 90 04                       BCC +
0C2FE A9 01                         LDA #1
0C300 85 05                         STA nt_buffer_overflow
0C302                             +:
0C302                             
0C302 A5 05                       LDA nt_buffer_overflow
0C304 D0 16                       BNE +
0C306                             
0C306 A6 03                       LDX nt_update_buf_wi
0C308 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C30A 9D 00 03                    STA nt_buffer, X
0C30D                             
0C30D E8                          INX
0C30E A5 0B                       LDA generic_pointer+0
0C310 9D 00 03                    STA nt_buffer, X
0C313                             
0C313 E8                          INX
0C314 A5 0C                       LDA generic_pointer+1
0C316 9D 00 03                    STA nt_buffer, X
0C319                             
0C319 E8                          INX
0C31A 86 04                       STX nt_update_buf_wc
0C31C                             
0C31C                             +:
0C31C                               write_to_nt_buffer #$35
0C31C A5 05                       LDA nt_buffer_overflow
0C31E D0 20                       BNE +
0C320                             
0C320 A9 35                       LDA #$35
0C322 A6 04                       LDX nt_update_buf_wc
0C324 9D 00 03                    STA nt_buffer, X
0C327 E6 04                       INC nt_update_buf_wc
0C329                             
0C329                             ;buffer overflow check
0C329 A5 04                       LDA nt_update_buf_wc
0C32B C9 FE                       CMP #$FE
0C32D D0 11                       BNE +
0C32F A9 01                         LDA #1
0C331 85 05                         STA nt_buffer_overflow
0C333                               end_nt_buffer_write
0C333                             ;find and write data lentgh
0C333 A5 04                       LDA nt_update_buf_wc
0C335 E5 03                       SBC nt_update_buf_wi
0C337 A6 03                       LDX nt_update_buf_wi
0C339 9D 00 03                    STA nt_buffer, X
0C33C                             ;update `write initial` using `write current`
0C33C A6 04                       LDX nt_update_buf_wc
0C33E 86 03                       STX nt_update_buf_wi
0C340                             +:
0C340                               end_nt_buffer_write
0C340                             ;find and write data lentgh
0C340 A5 04                       LDA nt_update_buf_wc
0C342 E5 03                       SBC nt_update_buf_wi
0C344 A6 03                       LDX nt_update_buf_wi
0C346 9D 00 03                    STA nt_buffer, X
0C349                             ;update `write initial` using `write current`
0C349 A6 04                       LDX nt_update_buf_wc
0C34B 86 03                       STX nt_update_buf_wi
0C34D                               
0C34D EE 02 05                      INC cc_cursor_y
0C350                               ;when y changes, we need to move to the new x
0C350 AE 02 05                      LDX cc_cursor_y
0C353 BD 03 05                      LDA cc_hp_sel, X
0C356 8D 01 05                      STA cc_cursor_x
0C359                             +:
0C359                             check_ondown #%00000010
0C359 A5 0A                       LDA button_ondown
0C35B 29 02                       AND #%00000010
0C35D F0 6E                       BEQ +
0C35F                               ;clear current cursor
0C35F 20 2C C2                      JSR set_generic_pointer_to_cursor_position
0C362                               begin_nt_buffer_write generic_pointer+0, generic_pointer+1
0C362                             ;if they previous entry is unfinished, finish it
0C362 A5 03                       LDA nt_update_buf_wi
0C364 C5 04                       CMP nt_update_buf_wc
0C366 F0 0D                       BEQ +
0C368                               end_nt_buffer_write
0C368                             ;find and write data lentgh
0C368 A5 04                       LDA nt_update_buf_wc
0C36A E5 03                       SBC nt_update_buf_wi
0C36C A6 03                       LDX nt_update_buf_wi
0C36E 9D 00 03                    STA nt_buffer, X
0C371                             ;update `write initial` using `write current`
0C371 A6 04                       LDX nt_update_buf_wc
0C373 86 03                       STX nt_update_buf_wi
0C375                             +:
0C375                           
0C375 A5 03                       LDA nt_update_buf_wi
0C377 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C379 90 04                       BCC +
0C37B A9 01                         LDA #1
0C37D 85 05                         STA nt_buffer_overflow
0C37F                             +:
0C37F                             
0C37F A5 05                       LDA nt_buffer_overflow
0C381 D0 16                       BNE +
0C383                             
0C383 A6 03                       LDX nt_update_buf_wi
0C385 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C387 9D 00 03                    STA nt_buffer, X
0C38A                             
0C38A E8                          INX
0C38B A5 0B                       LDA generic_pointer+0
0C38D 9D 00 03                    STA nt_buffer, X
0C390                             
0C390 E8                          INX
0C391 A5 0C                       LDA generic_pointer+1
0C393 9D 00 03                    STA nt_buffer, X
0C396                             
0C396 E8                          INX
0C397 86 04                       STX nt_update_buf_wc
0C399                             
0C399                             +:
0C399                               write_to_nt_buffer #$24
0C399 A5 05                       LDA nt_buffer_overflow
0C39B D0 20                       BNE +
0C39D                             
0C39D A9 24                       LDA #$24
0C39F A6 04                       LDX nt_update_buf_wc
0C3A1 9D 00 03                    STA nt_buffer, X
0C3A4 E6 04                       INC nt_update_buf_wc
0C3A6                             
0C3A6                             ;buffer overflow check
0C3A6 A5 04                       LDA nt_update_buf_wc
0C3A8 C9 FE                       CMP #$FE
0C3AA D0 11                       BNE +
0C3AC A9 01                         LDA #1
0C3AE 85 05                         STA nt_buffer_overflow
0C3B0                               end_nt_buffer_write
0C3B0                             ;find and write data lentgh
0C3B0 A5 04                       LDA nt_update_buf_wc
0C3B2 E5 03                       SBC nt_update_buf_wi
0C3B4 A6 03                       LDX nt_update_buf_wi
0C3B6 9D 00 03                    STA nt_buffer, X
0C3B9                             ;update `write initial` using `write current`
0C3B9 A6 04                       LDX nt_update_buf_wc
0C3BB 86 03                       STX nt_update_buf_wi
0C3BD                             +:
0C3BD                               end_nt_buffer_write
0C3BD                             ;find and write data lentgh
0C3BD A5 04                       LDA nt_update_buf_wc
0C3BF E5 03                       SBC nt_update_buf_wi
0C3C1 A6 03                       LDX nt_update_buf_wi
0C3C3 9D 00 03                    STA nt_buffer, X
0C3C6                             ;update `write initial` using `write current`
0C3C6 A6 04                       LDX nt_update_buf_wc
0C3C8 86 03                       STX nt_update_buf_wi
0C3CA                               
0C3CA CE 01 05                      DEC cc_cursor_x
0C3CD                             +:
0C3CD                             check_ondown #%00000001
0C3CD A5 0A                       LDA button_ondown
0C3CF 29 01                       AND #%00000001
0C3D1 F0 6E                       BEQ +
0C3D3                               ;clear current cursor
0C3D3 20 2C C2                      JSR set_generic_pointer_to_cursor_position
0C3D6                               begin_nt_buffer_write generic_pointer+0, generic_pointer+1
0C3D6                             ;if they previous entry is unfinished, finish it
0C3D6 A5 03                       LDA nt_update_buf_wi
0C3D8 C5 04                       CMP nt_update_buf_wc
0C3DA F0 0D                       BEQ +
0C3DC                               end_nt_buffer_write
0C3DC                             ;find and write data lentgh
0C3DC A5 04                       LDA nt_update_buf_wc
0C3DE E5 03                       SBC nt_update_buf_wi
0C3E0 A6 03                       LDX nt_update_buf_wi
0C3E2 9D 00 03                    STA nt_buffer, X
0C3E5                             ;update `write initial` using `write current`
0C3E5 A6 04                       LDX nt_update_buf_wc
0C3E7 86 03                       STX nt_update_buf_wi
0C3E9                             +:
0C3E9                           
0C3E9 A5 03                       LDA nt_update_buf_wi
0C3EB C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C3ED 90 04                       BCC +
0C3EF A9 01                         LDA #1
0C3F1 85 05                         STA nt_buffer_overflow
0C3F3                             +:
0C3F3                             
0C3F3 A5 05                       LDA nt_buffer_overflow
0C3F5 D0 16                       BNE +
0C3F7                             
0C3F7 A6 03                       LDX nt_update_buf_wi
0C3F9 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C3FB 9D 00 03                    STA nt_buffer, X
0C3FE                             
0C3FE E8                          INX
0C3FF A5 0B                       LDA generic_pointer+0
0C401 9D 00 03                    STA nt_buffer, X
0C404                             
0C404 E8                          INX
0C405 A5 0C                       LDA generic_pointer+1
0C407 9D 00 03                    STA nt_buffer, X
0C40A                             
0C40A E8                          INX
0C40B 86 04                       STX nt_update_buf_wc
0C40D                             
0C40D                             +:
0C40D                               write_to_nt_buffer #$24
0C40D A5 05                       LDA nt_buffer_overflow
0C40F D0 20                       BNE +
0C411                             
0C411 A9 24                       LDA #$24
0C413 A6 04                       LDX nt_update_buf_wc
0C415 9D 00 03                    STA nt_buffer, X
0C418 E6 04                       INC nt_update_buf_wc
0C41A                             
0C41A                             ;buffer overflow check
0C41A A5 04                       LDA nt_update_buf_wc
0C41C C9 FE                       CMP #$FE
0C41E D0 11                       BNE +
0C420 A9 01                         LDA #1
0C422 85 05                         STA nt_buffer_overflow
0C424                               end_nt_buffer_write
0C424                             ;find and write data lentgh
0C424 A5 04                       LDA nt_update_buf_wc
0C426 E5 03                       SBC nt_update_buf_wi
0C428 A6 03                       LDX nt_update_buf_wi
0C42A 9D 00 03                    STA nt_buffer, X
0C42D                             ;update `write initial` using `write current`
0C42D A6 04                       LDX nt_update_buf_wc
0C42F 86 03                       STX nt_update_buf_wi
0C431                             +:
0C431                               end_nt_buffer_write
0C431                             ;find and write data lentgh
0C431 A5 04                       LDA nt_update_buf_wc
0C433 E5 03                       SBC nt_update_buf_wi
0C435 A6 03                       LDX nt_update_buf_wi
0C437 9D 00 03                    STA nt_buffer, X
0C43A                             ;update `write initial` using `write current`
0C43A A6 04                       LDX nt_update_buf_wc
0C43C 86 03                       STX nt_update_buf_wi
0C43E                               
0C43E EE 01 05                      INC cc_cursor_x
0C441                             +:
0C441                             ;re-adjust cursor so it doesn't go over
0C441 AD 01 05                    LDA cc_cursor_x
0C444 C9 FF                       CMP #$ff
0C446 D0 05                       BNE +
0C448 A2 00                         LDX #0
0C44A 8E 01 05                      STX cc_cursor_x
0C44D                             +:
0C44D C9 04                       CMP #$04
0C44F D0 05                       BNE +
0C451 A2 03                         LDX #$03
0C453 8E 01 05                      STX cc_cursor_x
0C456                             +:
0C456 AD 02 05                    LDA cc_cursor_y
0C459 C9 FF                       CMP #$ff
0C45B D0 0E                       BNE +
0C45D A2 04                         LDX #$04
0C45F 8E 02 05                      STX cc_cursor_y
0C462                               ;when y changes, we need to move to the new x
0C462 AE 02 05                      LDX cc_cursor_y
0C465 BC 03 05                      LDY cc_hp_sel, X
0C468 8C 01 05                      STY cc_cursor_x
0C46B                             +:
0C46B C9 05                       CMP #$05
0C46D D0 0E                       BNE +
0C46F A2 00                         LDX #$00
0C471 8E 02 05                      STX cc_cursor_y
0C474                               ;when y changes, we need to move to the new x
0C474 AE 02 05                      LDX cc_cursor_y
0C477 BC 03 05                      LDY cc_hp_sel, X
0C47A 8C 01 05                      STY cc_cursor_x
0C47D                             +:
0C47D                             
0C47D                             ;update selections
0C47D                             --:
0C47D AE 02 05                    LDX cc_cursor_y
0C480 AD 01 05                    LDA cc_cursor_x
0C483 9D 03 05                    STA cc_hp_sel, X ; this is bad code and I don't care.
0C486                             
0C486                             ;recalc points spent
0C486 A9 00                       LDA #0
0C488 A0 00                       LDY #0
0C48A                             -:
0C48A 18                            CLC
0C48B 79 03 05                      ADC cc_hp_sel, Y
0C48E BE 03 05                      LDX cc_hp_sel, Y
0C491 E0 03                         CPX #3
0C493 D0 03                         BNE +
0C495 18                              CLC
0C496 69 01                           ADC #$01 ; highest upgrade costs an extra point
0C498                               +:
0C498 C8                          INY
0C499 C0 05                       CPY #5
0C49B D0 ED                       BNE -
0C49D 8D 00 05                    STA cc_points_spent
0C4A0                             
0C4A0                             
0C4A0                             ;;if too many points are spent, move current cursor back
0C4A0 C9 06                       CMP #6
0C4A2 30 06                       BMI +
0C4A4 CE 01 05                      DEC cc_cursor_x
0C4A7 4C 7D C4                      JMP --
0C4AA                             +:
0C4AA                             
0C4AA                             ;draw current cursor
0C4AA 20 2C C2                    JSR set_generic_pointer_to_cursor_position
0C4AD                             begin_nt_buffer_write generic_pointer+0, generic_pointer+1
0C4AD                             ;if they previous entry is unfinished, finish it
0C4AD A5 03                       LDA nt_update_buf_wi
0C4AF C5 04                       CMP nt_update_buf_wc
0C4B1 F0 0D                       BEQ +
0C4B3                               end_nt_buffer_write
0C4B3                             ;find and write data lentgh
0C4B3 A5 04                       LDA nt_update_buf_wc
0C4B5 E5 03                       SBC nt_update_buf_wi
0C4B7 A6 03                       LDX nt_update_buf_wi
0C4B9 9D 00 03                    STA nt_buffer, X
0C4BC                             ;update `write initial` using `write current`
0C4BC A6 04                       LDX nt_update_buf_wc
0C4BE 86 03                       STX nt_update_buf_wi
0C4C0                             +:
0C4C0                           
0C4C0 A5 03                       LDA nt_update_buf_wi
0C4C2 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C4C4 90 04                       BCC +
0C4C6 A9 01                         LDA #1
0C4C8 85 05                         STA nt_buffer_overflow
0C4CA                             +:
0C4CA                             
0C4CA A5 05                       LDA nt_buffer_overflow
0C4CC D0 16                       BNE +
0C4CE                             
0C4CE A6 03                       LDX nt_update_buf_wi
0C4D0 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C4D2 9D 00 03                    STA nt_buffer, X
0C4D5                             
0C4D5 E8                          INX
0C4D6 A5 0B                       LDA generic_pointer+0
0C4D8 9D 00 03                    STA nt_buffer, X
0C4DB                             
0C4DB E8                          INX
0C4DC A5 0C                       LDA generic_pointer+1
0C4DE 9D 00 03                    STA nt_buffer, X
0C4E1                             
0C4E1 E8                          INX
0C4E2 86 04                       STX nt_update_buf_wc
0C4E4                             
0C4E4                             +:
0C4E4 AD 08 05                    LDA cc_cursor_flash_timer
0C4E7 29 30                       AND #%00110000
0C4E9 F0 27                       BEQ +
0C4EB                               write_to_nt_buffer #$35
0C4EB A5 05                       LDA nt_buffer_overflow
0C4ED D0 20                       BNE +
0C4EF                             
0C4EF A9 35                       LDA #$35
0C4F1 A6 04                       LDX nt_update_buf_wc
0C4F3 9D 00 03                    STA nt_buffer, X
0C4F6 E6 04                       INC nt_update_buf_wc
0C4F8                             
0C4F8                             ;buffer overflow check
0C4F8 A5 04                       LDA nt_update_buf_wc
0C4FA C9 FE                       CMP #$FE
0C4FC D0 11                       BNE +
0C4FE A9 01                         LDA #1
0C500 85 05                         STA nt_buffer_overflow
0C502                               end_nt_buffer_write
0C502                             ;find and write data lentgh
0C502 A5 04                       LDA nt_update_buf_wc
0C504 E5 03                       SBC nt_update_buf_wi
0C506 A6 03                       LDX nt_update_buf_wi
0C508 9D 00 03                    STA nt_buffer, X
0C50B                             ;update `write initial` using `write current`
0C50B A6 04                       LDX nt_update_buf_wc
0C50D 86 03                       STX nt_update_buf_wi
0C50F                             +:
0C50F 4C 36 C5                      JMP ++
0C512                             +:
0C512                               write_to_nt_buffer #$24
0C512 A5 05                       LDA nt_buffer_overflow
0C514 D0 20                       BNE +
0C516                             
0C516 A9 24                       LDA #$24
0C518 A6 04                       LDX nt_update_buf_wc
0C51A 9D 00 03                    STA nt_buffer, X
0C51D E6 04                       INC nt_update_buf_wc
0C51F                             
0C51F                             ;buffer overflow check
0C51F A5 04                       LDA nt_update_buf_wc
0C521 C9 FE                       CMP #$FE
0C523 D0 11                       BNE +
0C525 A9 01                         LDA #1
0C527 85 05                         STA nt_buffer_overflow
0C529                               end_nt_buffer_write
0C529                             ;find and write data lentgh
0C529 A5 04                       LDA nt_update_buf_wc
0C52B E5 03                       SBC nt_update_buf_wi
0C52D A6 03                       LDX nt_update_buf_wi
0C52F 9D 00 03                    STA nt_buffer, X
0C532                             ;update `write initial` using `write current`
0C532 A6 04                       LDX nt_update_buf_wc
0C534 86 03                       STX nt_update_buf_wi
0C536                             +:
0C536                             ++:
0C536                             end_nt_buffer_write
0C536                             ;find and write data lentgh
0C536 A5 04                       LDA nt_update_buf_wc
0C538 E5 03                       SBC nt_update_buf_wi
0C53A A6 03                       LDX nt_update_buf_wi
0C53C 9D 00 03                    STA nt_buffer, X
0C53F                             ;update `write initial` using `write current`
0C53F A6 04                       LDX nt_update_buf_wc
0C541 86 03                       STX nt_update_buf_wi
0C543                             
0C543 60                          RTS
0C544                           
0C544                           cc_draw_screen:
0C544                             begin_nt_buffer_write #$26, #$08
0C544                             ;if they previous entry is unfinished, finish it
0C544 A5 03                       LDA nt_update_buf_wi
0C546 C5 04                       CMP nt_update_buf_wc
0C548 F0 0D                       BEQ +
0C54A                               end_nt_buffer_write
0C54A                             ;find and write data lentgh
0C54A A5 04                       LDA nt_update_buf_wc
0C54C E5 03                       SBC nt_update_buf_wi
0C54E A6 03                       LDX nt_update_buf_wi
0C550 9D 00 03                    STA nt_buffer, X
0C553                             ;update `write initial` using `write current`
0C553 A6 04                       LDX nt_update_buf_wc
0C555 86 03                       STX nt_update_buf_wi
0C557                             +:
0C557                           
0C557 A5 03                       LDA nt_update_buf_wi
0C559 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C55B 90 04                       BCC +
0C55D A9 01                         LDA #1
0C55F 85 05                         STA nt_buffer_overflow
0C561                             +:
0C561                             
0C561 A5 05                       LDA nt_buffer_overflow
0C563 D0 16                       BNE +
0C565                             
0C565 A6 03                       LDX nt_update_buf_wi
0C567 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C569 9D 00 03                    STA nt_buffer, X
0C56C                             
0C56C E8                          INX
0C56D A9 26                       LDA #$26
0C56F 9D 00 03                    STA nt_buffer, X
0C572                             
0C572 E8                          INX
0C573 A9 08                       LDA #$08
0C575 9D 00 03                    STA nt_buffer, X
0C578                             
0C578 E8                          INX
0C579 86 04                       STX nt_update_buf_wc
0C57B                             
0C57B                             +:
0C57B                             write_to_nt_buffer cc_points_spent
0C57B A5 05                       LDA nt_buffer_overflow
0C57D D0 21                       BNE +
0C57F                             
0C57F AD 00 05                    LDA cc_points_spent
0C582 A6 04                       LDX nt_update_buf_wc
0C584 9D 00 03                    STA nt_buffer, X
0C587 E6 04                       INC nt_update_buf_wc
0C589                             
0C589                             ;buffer overflow check
0C589 A5 04                       LDA nt_update_buf_wc
0C58B C9 FE                       CMP #$FE
0C58D D0 11                       BNE +
0C58F A9 01                         LDA #1
0C591 85 05                         STA nt_buffer_overflow
0C593                               end_nt_buffer_write
0C593                             ;find and write data lentgh
0C593 A5 04                       LDA nt_update_buf_wc
0C595 E5 03                       SBC nt_update_buf_wi
0C597 A6 03                       LDX nt_update_buf_wi
0C599 9D 00 03                    STA nt_buffer, X
0C59C                             ;update `write initial` using `write current`
0C59C A6 04                       LDX nt_update_buf_wc
0C59E 86 03                       STX nt_update_buf_wi
0C5A0                             +:
0C5A0                             end_nt_buffer_write
0C5A0                             ;find and write data lentgh
0C5A0 A5 04                       LDA nt_update_buf_wc
0C5A2 E5 03                       SBC nt_update_buf_wi
0C5A4 A6 03                       LDX nt_update_buf_wi
0C5A6 9D 00 03                    STA nt_buffer, X
0C5A9                             ;update `write initial` using `write current`
0C5A9 A6 04                       LDX nt_update_buf_wc
0C5AB 86 03                       STX nt_update_buf_wi
0C5AD 60                          RTS
0C5AE                             
0C5AE                           fill_stats:
0C5AE                             fill_ind_stats player, cc_hp_sel
0C5AE A2 00                       LDX #$00
0C5B0                             
0C5B0 BC 03 05                    LDY cc_hp_sel, X
0C5B3 B9 3D ED                    LDA cc_stat_options, Y
0C5B6 9D 06 06                    STA player, X
0C5B9 E8                          INX
0C5BA                             
0C5BA BC 03 05                    LDY cc_hp_sel, X
0C5BD B9 41 ED                    LDA cc_stat_options+4, Y
0C5C0 9D 06 06                    STA player, X
0C5C3 E8                          INX
0C5C4                             
0C5C4 BC 03 05                    LDY cc_hp_sel, X
0C5C7 B9 45 ED                    LDA cc_stat_options+8, Y
0C5CA 9D 06 06                    STA player, X
0C5CD E8                          INX
0C5CE                             
0C5CE BC 03 05                    LDY cc_hp_sel, X
0C5D1 B9 49 ED                    LDA cc_stat_options+12, Y
0C5D4 9D 06 06                    STA player, X
0C5D7 E8                          INX
0C5D8                             
0C5D8 BC 03 05                    LDY cc_hp_sel, X
0C5DB B9 4D ED                    LDA cc_stat_options+16, Y
0C5DE 9D 06 06                    STA player, X
0C5E1                             fill_ind_stats warrior, enemy_starting_stats
0C5E1 A2 00                       LDX #$00
0C5E3                             
0C5E3 BC 51 ED                    LDY enemy_starting_stats, X
0C5E6 B9 3D ED                    LDA cc_stat_options, Y
0C5E9 9D 1A 06                    STA warrior, X
0C5EC E8                          INX
0C5ED                             
0C5ED BC 51 ED                    LDY enemy_starting_stats, X
0C5F0 B9 41 ED                    LDA cc_stat_options+4, Y
0C5F3 9D 1A 06                    STA warrior, X
0C5F6 E8                          INX
0C5F7                             
0C5F7 BC 51 ED                    LDY enemy_starting_stats, X
0C5FA B9 45 ED                    LDA cc_stat_options+8, Y
0C5FD 9D 1A 06                    STA warrior, X
0C600 E8                          INX
0C601                             
0C601 BC 51 ED                    LDY enemy_starting_stats, X
0C604 B9 49 ED                    LDA cc_stat_options+12, Y
0C607 9D 1A 06                    STA warrior, X
0C60A E8                          INX
0C60B                             
0C60B BC 51 ED                    LDY enemy_starting_stats, X
0C60E B9 4D ED                    LDA cc_stat_options+16, Y
0C611 9D 1A 06                    STA warrior, X
0C614                             fill_ind_stats theif, enemy_starting_stats+5
0C614 A2 00                       LDX #$00
0C616                             
0C616 BC 56 ED                    LDY enemy_starting_stats+5, X
0C619 B9 3D ED                    LDA cc_stat_options, Y
0C61C 9D 2E 06                    STA theif, X
0C61F E8                          INX
0C620                             
0C620 BC 56 ED                    LDY enemy_starting_stats+5, X
0C623 B9 41 ED                    LDA cc_stat_options+4, Y
0C626 9D 2E 06                    STA theif, X
0C629 E8                          INX
0C62A                             
0C62A BC 56 ED                    LDY enemy_starting_stats+5, X
0C62D B9 45 ED                    LDA cc_stat_options+8, Y
0C630 9D 2E 06                    STA theif, X
0C633 E8                          INX
0C634                             
0C634 BC 56 ED                    LDY enemy_starting_stats+5, X
0C637 B9 49 ED                    LDA cc_stat_options+12, Y
0C63A 9D 2E 06                    STA theif, X
0C63D E8                          INX
0C63E                             
0C63E BC 56 ED                    LDY enemy_starting_stats+5, X
0C641 B9 4D ED                    LDA cc_stat_options+16, Y
0C644 9D 2E 06                    STA theif, X
0C647                             fill_ind_stats mage, enemy_starting_stats+10
0C647 A2 00                       LDX #$00
0C649                             
0C649 BC 5B ED                    LDY enemy_starting_stats+10, X
0C64C B9 3D ED                    LDA cc_stat_options, Y
0C64F 9D 42 06                    STA mage, X
0C652 E8                          INX
0C653                             
0C653 BC 5B ED                    LDY enemy_starting_stats+10, X
0C656 B9 41 ED                    LDA cc_stat_options+4, Y
0C659 9D 42 06                    STA mage, X
0C65C E8                          INX
0C65D                             
0C65D BC 5B ED                    LDY enemy_starting_stats+10, X
0C660 B9 45 ED                    LDA cc_stat_options+8, Y
0C663 9D 42 06                    STA mage, X
0C666 E8                          INX
0C667                             
0C667 BC 5B ED                    LDY enemy_starting_stats+10, X
0C66A B9 49 ED                    LDA cc_stat_options+12, Y
0C66D 9D 42 06                    STA mage, X
0C670 E8                          INX
0C671                             
0C671 BC 5B ED                    LDY enemy_starting_stats+10, X
0C674 B9 4D ED                    LDA cc_stat_options+16, Y
0C677 9D 42 06                    STA mage, X
0C67A                             fill_ind_stats tank, enemy_starting_stats+15
0C67A A2 00                       LDX #$00
0C67C                             
0C67C BC 60 ED                    LDY enemy_starting_stats+15, X
0C67F B9 3D ED                    LDA cc_stat_options, Y
0C682 9D 56 06                    STA tank, X
0C685 E8                          INX
0C686                             
0C686 BC 60 ED                    LDY enemy_starting_stats+15, X
0C689 B9 41 ED                    LDA cc_stat_options+4, Y
0C68C 9D 56 06                    STA tank, X
0C68F E8                          INX
0C690                             
0C690 BC 60 ED                    LDY enemy_starting_stats+15, X
0C693 B9 45 ED                    LDA cc_stat_options+8, Y
0C696 9D 56 06                    STA tank, X
0C699 E8                          INX
0C69A                             
0C69A BC 60 ED                    LDY enemy_starting_stats+15, X
0C69D B9 49 ED                    LDA cc_stat_options+12, Y
0C6A0 9D 56 06                    STA tank, X
0C6A3 E8                          INX
0C6A4                             
0C6A4 BC 60 ED                    LDY enemy_starting_stats+15, X
0C6A7 B9 4D ED                    LDA cc_stat_options+16, Y
0C6AA 9D 56 06                    STA tank, X
0C6AD                             fill_ind_stats dragon, enemy_starting_stats+20
0C6AD A2 00                       LDX #$00
0C6AF                             
0C6AF BC 65 ED                    LDY enemy_starting_stats+20, X
0C6B2 B9 3D ED                    LDA cc_stat_options, Y
0C6B5 9D 6A 06                    STA dragon, X
0C6B8 E8                          INX
0C6B9                             
0C6B9 BC 65 ED                    LDY enemy_starting_stats+20, X
0C6BC B9 41 ED                    LDA cc_stat_options+4, Y
0C6BF 9D 6A 06                    STA dragon, X
0C6C2 E8                          INX
0C6C3                             
0C6C3 BC 65 ED                    LDY enemy_starting_stats+20, X
0C6C6 B9 45 ED                    LDA cc_stat_options+8, Y
0C6C9 9D 6A 06                    STA dragon, X
0C6CC E8                          INX
0C6CD                             
0C6CD BC 65 ED                    LDY enemy_starting_stats+20, X
0C6D0 B9 49 ED                    LDA cc_stat_options+12, Y
0C6D3 9D 6A 06                    STA dragon, X
0C6D6 E8                          INX
0C6D7                             
0C6D7 BC 65 ED                    LDY enemy_starting_stats+20, X
0C6DA B9 4D ED                    LDA cc_stat_options+16, Y
0C6DD 9D 6A 06                    STA dragon, X
0C6E0                             ;set player's hp and mana to max
0C6E0 AD 06 06                    LDA player+0
0C6E3 8D 0B 06                    STA player+5
0C6E6 AD 07 06                    LDA player+1
0C6E9 8D 0C 06                    STA player+6
0C6EC                             
0C6EC A9 01                       LDA #1
0C6EE 8D 7E 06                    STA readout_update_req
0C6F1                             
0C6F1 60                          RTS
0C6F2                             .incsrc "src/generator.6502"
0C6F2                           setup_gen_dun:
0C6F2 A9 01                       LDA #1
0C6F4 8D 09 05                    STA dun_gen
0C6F7                             
0C6F7                             ;clear dungeon of last generation
0C6F7 A9 00                       LDA #0
0C6F9 A2 00                       LDX #0
0C6FB                             -:
0C6FB 9D 00 04                      STA dungeon_map, x
0C6FE E8                            INX
0C6FF E0 00                         CPX #0
0C701                             ;BNE -
0C701                             
0C701 A0 00                       LDY #0 ; counter for how many rooms to fill in
0C703 20 97 C1                    JSR rng ; rng loads X. Be Careful.
0C706 8D 0A 05                    STA gen_working_room
0C709 60                          RTS
0C70A                           gen_room_feats:
0C70A A9 01                       LDA #%00000001
0C70C 9D 00 04                    STA dungeon_map, x ; x is still loaded
0C70F                             
0C70F 20 97 C1                    JSR rng ;generate enemies
0C712 29 F0                       AND #%11110000
0C714 AE 0A 05                    LDX gen_working_room
0C717 1D 00 04                    ORA dungeon_map, x 
0C71A 9D 00 04                    STA dungeon_map, x
0C71D                             
0C71D                             ;fountain
0C71D 20 97 C1                    JSR rng
0C720 29 0F                       AND #%00001111
0C722 C9 00                       CMP #0
0C724 D0 0B                       BNE +
0C726 AE 0A 05                      LDX gen_working_room
0C729 BD 00 04                      LDA dungeon_map, x
0C72C 09 08                         ORA #%00001000
0C72E 9D 00 04                      STA dungeon_map, x
0C731                             +:
0C731                             ;ghost
0C731 20 97 C1                    JSR rng
0C734 29 07                       AND #%00000111
0C736 C9 00                       CMP #0
0C738 D0 0B                       BNE +
0C73A AE 0A 05                      LDX gen_working_room
0C73D BD 00 04                      LDA dungeon_map, x
0C740 09 04                         ORA #%00000100
0C742 9D 00 04                      STA dungeon_map, x
0C745                             +:
0C745                             ;treasure
0C745 20 97 C1                    JSR rng
0C748 29 03                       AND #%00000011
0C74A C9 00                       CMP #0
0C74C D0 0B                       BNE +
0C74E AE 0A 05                      LDX gen_working_room
0C751 BD 00 04                      LDA dungeon_map, x
0C754 09 02                         ORA #%00000010
0C756 9D 00 04                      STA dungeon_map, x
0C759                             +:
0C759 60                          RTS
0C75A                           gen_pick_next_room:      ;pick next room
0C75A 20 97 C1                    JSR rng
0C75D 29 03                       AND #%00000011
0C75F                             
0C75F C9 00                       CMP #0 ;up
0C761 D0 17                       BNE +
0C763 AD 0A 05                      LDA gen_working_room
0C766 29 F0                         AND #%11110000 ;we have to make sure the move is valid
0C768 C9 F0                         CMP #%11110000
0C76A F0 5F                         BEQ end_move
0C76C                               
0C76C AD 0A 05                      LDA gen_working_room
0C76F 69 10                         ADC #$10
0C771 8D 0A 05                      STA gen_working_room
0C774                               
0C774 A9 00                         LDA #0
0C776 C9 00                         CMP #0
0C778 F0 51                         BEQ end_move
0C77A                             +:
0C77A C9 01                       CMP #1 ;down
0C77C D0 17                       BNE +
0C77E AD 0A 05                      LDA gen_working_room
0C781 29 F0                         AND #%11110000 ;we have to make sure the move is valid
0C783 C9 00                         CMP #%00000000
0C785 F0 44                         BEQ end_move
0C787                               
0C787 AD 0A 05                      LDA gen_working_room
0C78A E9 10                         SBC #$10
0C78C 8D 0A 05                      STA gen_working_room
0C78F                               
0C78F A9 00                         LDA #0
0C791 C9 00                         CMP #0
0C793 F0 36                         BEQ end_move
0C795                             +:
0C795 C9 02                       CMP #2 ;left
0C797 D0 17                       BNE +
0C799 AD 0A 05                      LDA gen_working_room
0C79C 29 0F                         AND #%00001111 ;we have to make sure the move is valid
0C79E C9 00                         CMP #%00000000
0C7A0 F0 29                         BEQ end_move
0C7A2                               
0C7A2 AD 0A 05                      LDA gen_working_room
0C7A5 E9 01                         SBC #$01
0C7A7 8D 0A 05                      STA gen_working_room
0C7AA                               
0C7AA A9 00                         LDA #0
0C7AC C9 00                         CMP #0
0C7AE F0 1B                         BEQ end_move
0C7B0                             +:
0C7B0 C9 03                       CMP #3 ;right
0C7B2 D0 17                       BNE +
0C7B4 AD 0A 05                      LDA gen_working_room
0C7B7 29 0F                         AND #%00001111 ;we have to make sure the move is valid
0C7B9 C9 0F                         CMP #%00001111
0C7BB F0 0E                         BEQ end_move
0C7BD                               
0C7BD AD 0A 05                      LDA gen_working_room
0C7C0 69 01                         ADC #$01
0C7C2 8D 0A 05                      STA gen_working_room
0C7C5                               
0C7C5 A9 00                         LDA #0
0C7C7 C9 00                         CMP #0
0C7C9 F0 00                         BEQ end_move
0C7CB                             +:
0C7CB                             end_move:
0C7CB 60                          RTS
0C7CC                           gen_dungeon:
0C7CC                             ; bits per room:
0C7CC                             ; 76543210
0C7CC                             ; |||||||+-is there a room here?
0C7CC                             ; ||||||+-treasure chest?
0C7CC                             ; |||||+-ghost?
0C7CC                             ; ||||+-fountain?
0C7CC                             ; |||+-warrior?
0C7CC                             ; ||+-theif?
0C7CC                             ; |+-mage?
0C7CC                             ; +-tank?
0C7CC 20 F2 C6                    JSR setup_gen_dun
0C7CF                             next_room:
0C7CF                               ;check to see if room is already filled
0C7CF AE 0A 05                      LDX gen_working_room
0C7D2 BD 00 04                      LDA dungeon_map, x
0C7D5 29 01                         AND #%00000001
0C7D7 C9 01                         CMP #1
0C7D9 F0 03                         BEQ + ;skip making the room if it's aleady made
0C7DB 20 0A C7                        JSR gen_room_feats
0C7DE                               +:
0C7DE 20 5A C7                        JSR gen_pick_next_room
0C7E1 C8                            INY
0C7E2 C0 00                         CPY #0
0C7E4 D0 E9                       BNE next_room
0C7E6                             
0C7E6                             choose_random_room
0C7E6                             -:
0C7E6 20 97 C1                      JSR rng
0C7E9 A6 07                         LDX rng_seed
0C7EB BD 00 04                      LDA dungeon_map, X
0C7EE F0 F6                       BEQ - ; if room is empty, try again
0C7F0 8E 01 06                    STX player_room
0C7F3 A9 01                       LDA #%00000001
0C7F5 9D 00 04                    STA dungeon_map, X
0C7F8                             
0C7F8                             -:
0C7F8                               choose_random_room
0C7F8                             -:
0C7F8 20 97 C1                      JSR rng
0C7FB A6 07                         LDX rng_seed
0C7FD BD 00 04                      LDA dungeon_map, X
0C800 F0 F6                       BEQ - ; if room is empty, try again
0C802 EC 01 06                      CPX player_room
0C805 F0 F1                       BEQ -
0C807 8E 00 06                    STX boss_room
0C80A A9 01                       LDA #%00000001
0C80C 9D 00 04                    STA dungeon_map, X
0C80F                             
0C80F A9 02                       LDA #2
0C811 8D 09 05                    STA dun_gen
0C814                             
0C814                             
0C814 A9 01                       LDA #1
0C816 8D 7F 06                    STA room_update_req
0C819                             
0C819 60                          RTS
0C81A                             .incsrc "src/play_code.6502"
0C81A                           .incsrc "src/play/stat_readout.6502"
0C81A                           STAT_READOUT_NT .equ #$23
0C81A                           STAT_READOUT_HP .equ #$04
0C81A                           STAT_READOUT_HPMAX .equ #$0A
0C81A                           STAT_READOUT_MANA .equ #$10
0C81A                           STAT_READOUT_MANAMAX .equ #$16
0C81A                           STAT_READOUT_FLOOR .equ #$1C
0C81A                           STAT_READOUT_STR .equ #$44
0C81A                           STAT_READOUT_AGL .equ #$4A
0C81A                           STAT_READOUT_DEF .equ #$50
0C81A                           STAT_READOUT_MNY .equ #$56
0C81A                           STAT_READOUT_JWL .equ #$5C
0C81A                           
0C81A                           update_stat_readout:
0C81A AD 7E 06                    LDA readout_update_req
0C81D F0 03                       BEQ +
0C81F 20 23 C8                      JSR write_stats_to_readout
0C822                             +:
0C822 60                          RTS
0C823                           write_stats_to_readout:
0C823 AD 0B 06                    LDA player+5
0C826 85 11                       STA byte_to_dec_in
0C828 20 E1 C1                    JSR byte_to_dec
0C82B                             begin_nt_buffer_write #$23, #$04
0C82B                             ;if they previous entry is unfinished, finish it
0C82B A5 03                       LDA nt_update_buf_wi
0C82D C5 04                       CMP nt_update_buf_wc
0C82F F0 0D                       BEQ +
0C831                               end_nt_buffer_write
0C831                             ;find and write data lentgh
0C831 A5 04                       LDA nt_update_buf_wc
0C833 E5 03                       SBC nt_update_buf_wi
0C835 A6 03                       LDX nt_update_buf_wi
0C837 9D 00 03                    STA nt_buffer, X
0C83A                             ;update `write initial` using `write current`
0C83A A6 04                       LDX nt_update_buf_wc
0C83C 86 03                       STX nt_update_buf_wi
0C83E                             +:
0C83E                           
0C83E A5 03                       LDA nt_update_buf_wi
0C840 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C842 90 04                       BCC +
0C844 A9 01                         LDA #1
0C846 85 05                         STA nt_buffer_overflow
0C848                             +:
0C848                             
0C848 A5 05                       LDA nt_buffer_overflow
0C84A D0 16                       BNE +
0C84C                             
0C84C A6 03                       LDX nt_update_buf_wi
0C84E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C850 9D 00 03                    STA nt_buffer, X
0C853                             
0C853 E8                          INX
0C854 A9 23                       LDA #$23
0C856 9D 00 03                    STA nt_buffer, X
0C859                             
0C859 E8                          INX
0C85A A9 04                       LDA #$04
0C85C 9D 00 03                    STA nt_buffer, X
0C85F                             
0C85F E8                          INX
0C860 86 04                       STX nt_update_buf_wc
0C862                             
0C862                             +:
0C862                             write_to_nt_buffer byte_to_dec_out+0
0C862 A5 05                       LDA nt_buffer_overflow
0C864 D0 20                       BNE +
0C866                             
0C866 A5 12                       LDA byte_to_dec_out+0
0C868 A6 04                       LDX nt_update_buf_wc
0C86A 9D 00 03                    STA nt_buffer, X
0C86D E6 04                       INC nt_update_buf_wc
0C86F                             
0C86F                             ;buffer overflow check
0C86F A5 04                       LDA nt_update_buf_wc
0C871 C9 FE                       CMP #$FE
0C873 D0 11                       BNE +
0C875 A9 01                         LDA #1
0C877 85 05                         STA nt_buffer_overflow
0C879                               end_nt_buffer_write
0C879                             ;find and write data lentgh
0C879 A5 04                       LDA nt_update_buf_wc
0C87B E5 03                       SBC nt_update_buf_wi
0C87D A6 03                       LDX nt_update_buf_wi
0C87F 9D 00 03                    STA nt_buffer, X
0C882                             ;update `write initial` using `write current`
0C882 A6 04                       LDX nt_update_buf_wc
0C884 86 03                       STX nt_update_buf_wi
0C886                             +:
0C886                             write_to_nt_buffer byte_to_dec_out+1
0C886 A5 05                       LDA nt_buffer_overflow
0C888 D0 20                       BNE +
0C88A                             
0C88A A5 13                       LDA byte_to_dec_out+1
0C88C A6 04                       LDX nt_update_buf_wc
0C88E 9D 00 03                    STA nt_buffer, X
0C891 E6 04                       INC nt_update_buf_wc
0C893                             
0C893                             ;buffer overflow check
0C893 A5 04                       LDA nt_update_buf_wc
0C895 C9 FE                       CMP #$FE
0C897 D0 11                       BNE +
0C899 A9 01                         LDA #1
0C89B 85 05                         STA nt_buffer_overflow
0C89D                               end_nt_buffer_write
0C89D                             ;find and write data lentgh
0C89D A5 04                       LDA nt_update_buf_wc
0C89F E5 03                       SBC nt_update_buf_wi
0C8A1 A6 03                       LDX nt_update_buf_wi
0C8A3 9D 00 03                    STA nt_buffer, X
0C8A6                             ;update `write initial` using `write current`
0C8A6 A6 04                       LDX nt_update_buf_wc
0C8A8 86 03                       STX nt_update_buf_wi
0C8AA                             +:
0C8AA                             write_to_nt_buffer byte_to_dec_out+2
0C8AA A5 05                       LDA nt_buffer_overflow
0C8AC D0 20                       BNE +
0C8AE                             
0C8AE A5 14                       LDA byte_to_dec_out+2
0C8B0 A6 04                       LDX nt_update_buf_wc
0C8B2 9D 00 03                    STA nt_buffer, X
0C8B5 E6 04                       INC nt_update_buf_wc
0C8B7                             
0C8B7                             ;buffer overflow check
0C8B7 A5 04                       LDA nt_update_buf_wc
0C8B9 C9 FE                       CMP #$FE
0C8BB D0 11                       BNE +
0C8BD A9 01                         LDA #1
0C8BF 85 05                         STA nt_buffer_overflow
0C8C1                               end_nt_buffer_write
0C8C1                             ;find and write data lentgh
0C8C1 A5 04                       LDA nt_update_buf_wc
0C8C3 E5 03                       SBC nt_update_buf_wi
0C8C5 A6 03                       LDX nt_update_buf_wi
0C8C7 9D 00 03                    STA nt_buffer, X
0C8CA                             ;update `write initial` using `write current`
0C8CA A6 04                       LDX nt_update_buf_wc
0C8CC 86 03                       STX nt_update_buf_wi
0C8CE                             +:
0C8CE                             end_nt_buffer_write
0C8CE                             ;find and write data lentgh
0C8CE A5 04                       LDA nt_update_buf_wc
0C8D0 E5 03                       SBC nt_update_buf_wi
0C8D2 A6 03                       LDX nt_update_buf_wi
0C8D4 9D 00 03                    STA nt_buffer, X
0C8D7                             ;update `write initial` using `write current`
0C8D7 A6 04                       LDX nt_update_buf_wc
0C8D9 86 03                       STX nt_update_buf_wi
0C8DB                           
0C8DB AD 06 06                    LDA player+0
0C8DE 85 11                       STA byte_to_dec_in
0C8E0 20 E1 C1                    JSR byte_to_dec
0C8E3                             begin_nt_buffer_write #$23, #$0A
0C8E3                             ;if they previous entry is unfinished, finish it
0C8E3 A5 03                       LDA nt_update_buf_wi
0C8E5 C5 04                       CMP nt_update_buf_wc
0C8E7 F0 0D                       BEQ +
0C8E9                               end_nt_buffer_write
0C8E9                             ;find and write data lentgh
0C8E9 A5 04                       LDA nt_update_buf_wc
0C8EB E5 03                       SBC nt_update_buf_wi
0C8ED A6 03                       LDX nt_update_buf_wi
0C8EF 9D 00 03                    STA nt_buffer, X
0C8F2                             ;update `write initial` using `write current`
0C8F2 A6 04                       LDX nt_update_buf_wc
0C8F4 86 03                       STX nt_update_buf_wi
0C8F6                             +:
0C8F6                           
0C8F6 A5 03                       LDA nt_update_buf_wi
0C8F8 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C8FA 90 04                       BCC +
0C8FC A9 01                         LDA #1
0C8FE 85 05                         STA nt_buffer_overflow
0C900                             +:
0C900                             
0C900 A5 05                       LDA nt_buffer_overflow
0C902 D0 16                       BNE +
0C904                             
0C904 A6 03                       LDX nt_update_buf_wi
0C906 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C908 9D 00 03                    STA nt_buffer, X
0C90B                             
0C90B E8                          INX
0C90C A9 23                       LDA #$23
0C90E 9D 00 03                    STA nt_buffer, X
0C911                             
0C911 E8                          INX
0C912 A9 0A                       LDA #$0A
0C914 9D 00 03                    STA nt_buffer, X
0C917                             
0C917 E8                          INX
0C918 86 04                       STX nt_update_buf_wc
0C91A                             
0C91A                             +:
0C91A                             write_to_nt_buffer byte_to_dec_out+0
0C91A A5 05                       LDA nt_buffer_overflow
0C91C D0 20                       BNE +
0C91E                             
0C91E A5 12                       LDA byte_to_dec_out+0
0C920 A6 04                       LDX nt_update_buf_wc
0C922 9D 00 03                    STA nt_buffer, X
0C925 E6 04                       INC nt_update_buf_wc
0C927                             
0C927                             ;buffer overflow check
0C927 A5 04                       LDA nt_update_buf_wc
0C929 C9 FE                       CMP #$FE
0C92B D0 11                       BNE +
0C92D A9 01                         LDA #1
0C92F 85 05                         STA nt_buffer_overflow
0C931                               end_nt_buffer_write
0C931                             ;find and write data lentgh
0C931 A5 04                       LDA nt_update_buf_wc
0C933 E5 03                       SBC nt_update_buf_wi
0C935 A6 03                       LDX nt_update_buf_wi
0C937 9D 00 03                    STA nt_buffer, X
0C93A                             ;update `write initial` using `write current`
0C93A A6 04                       LDX nt_update_buf_wc
0C93C 86 03                       STX nt_update_buf_wi
0C93E                             +:
0C93E                             write_to_nt_buffer byte_to_dec_out+1
0C93E A5 05                       LDA nt_buffer_overflow
0C940 D0 20                       BNE +
0C942                             
0C942 A5 13                       LDA byte_to_dec_out+1
0C944 A6 04                       LDX nt_update_buf_wc
0C946 9D 00 03                    STA nt_buffer, X
0C949 E6 04                       INC nt_update_buf_wc
0C94B                             
0C94B                             ;buffer overflow check
0C94B A5 04                       LDA nt_update_buf_wc
0C94D C9 FE                       CMP #$FE
0C94F D0 11                       BNE +
0C951 A9 01                         LDA #1
0C953 85 05                         STA nt_buffer_overflow
0C955                               end_nt_buffer_write
0C955                             ;find and write data lentgh
0C955 A5 04                       LDA nt_update_buf_wc
0C957 E5 03                       SBC nt_update_buf_wi
0C959 A6 03                       LDX nt_update_buf_wi
0C95B 9D 00 03                    STA nt_buffer, X
0C95E                             ;update `write initial` using `write current`
0C95E A6 04                       LDX nt_update_buf_wc
0C960 86 03                       STX nt_update_buf_wi
0C962                             +:
0C962                             write_to_nt_buffer byte_to_dec_out+2
0C962 A5 05                       LDA nt_buffer_overflow
0C964 D0 20                       BNE +
0C966                             
0C966 A5 14                       LDA byte_to_dec_out+2
0C968 A6 04                       LDX nt_update_buf_wc
0C96A 9D 00 03                    STA nt_buffer, X
0C96D E6 04                       INC nt_update_buf_wc
0C96F                             
0C96F                             ;buffer overflow check
0C96F A5 04                       LDA nt_update_buf_wc
0C971 C9 FE                       CMP #$FE
0C973 D0 11                       BNE +
0C975 A9 01                         LDA #1
0C977 85 05                         STA nt_buffer_overflow
0C979                               end_nt_buffer_write
0C979                             ;find and write data lentgh
0C979 A5 04                       LDA nt_update_buf_wc
0C97B E5 03                       SBC nt_update_buf_wi
0C97D A6 03                       LDX nt_update_buf_wi
0C97F 9D 00 03                    STA nt_buffer, X
0C982                             ;update `write initial` using `write current`
0C982 A6 04                       LDX nt_update_buf_wc
0C984 86 03                       STX nt_update_buf_wi
0C986                             +:
0C986                             end_nt_buffer_write
0C986                             ;find and write data lentgh
0C986 A5 04                       LDA nt_update_buf_wc
0C988 E5 03                       SBC nt_update_buf_wi
0C98A A6 03                       LDX nt_update_buf_wi
0C98C 9D 00 03                    STA nt_buffer, X
0C98F                             ;update `write initial` using `write current`
0C98F A6 04                       LDX nt_update_buf_wc
0C991 86 03                       STX nt_update_buf_wi
0C993                           
0C993 AD 0C 06                    LDA player+6
0C996 85 11                       STA byte_to_dec_in
0C998 20 E1 C1                    JSR byte_to_dec
0C99B                             begin_nt_buffer_write #$23, #$10
0C99B                             ;if they previous entry is unfinished, finish it
0C99B A5 03                       LDA nt_update_buf_wi
0C99D C5 04                       CMP nt_update_buf_wc
0C99F F0 0D                       BEQ +
0C9A1                               end_nt_buffer_write
0C9A1                             ;find and write data lentgh
0C9A1 A5 04                       LDA nt_update_buf_wc
0C9A3 E5 03                       SBC nt_update_buf_wi
0C9A5 A6 03                       LDX nt_update_buf_wi
0C9A7 9D 00 03                    STA nt_buffer, X
0C9AA                             ;update `write initial` using `write current`
0C9AA A6 04                       LDX nt_update_buf_wc
0C9AC 86 03                       STX nt_update_buf_wi
0C9AE                             +:
0C9AE                           
0C9AE A5 03                       LDA nt_update_buf_wi
0C9B0 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0C9B2 90 04                       BCC +
0C9B4 A9 01                         LDA #1
0C9B6 85 05                         STA nt_buffer_overflow
0C9B8                             +:
0C9B8                             
0C9B8 A5 05                       LDA nt_buffer_overflow
0C9BA D0 16                       BNE +
0C9BC                             
0C9BC A6 03                       LDX nt_update_buf_wi
0C9BE A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0C9C0 9D 00 03                    STA nt_buffer, X
0C9C3                             
0C9C3 E8                          INX
0C9C4 A9 23                       LDA #$23
0C9C6 9D 00 03                    STA nt_buffer, X
0C9C9                             
0C9C9 E8                          INX
0C9CA A9 10                       LDA #$10
0C9CC 9D 00 03                    STA nt_buffer, X
0C9CF                             
0C9CF E8                          INX
0C9D0 86 04                       STX nt_update_buf_wc
0C9D2                             
0C9D2                             +:
0C9D2                             write_to_nt_buffer byte_to_dec_out+0
0C9D2 A5 05                       LDA nt_buffer_overflow
0C9D4 D0 20                       BNE +
0C9D6                             
0C9D6 A5 12                       LDA byte_to_dec_out+0
0C9D8 A6 04                       LDX nt_update_buf_wc
0C9DA 9D 00 03                    STA nt_buffer, X
0C9DD E6 04                       INC nt_update_buf_wc
0C9DF                             
0C9DF                             ;buffer overflow check
0C9DF A5 04                       LDA nt_update_buf_wc
0C9E1 C9 FE                       CMP #$FE
0C9E3 D0 11                       BNE +
0C9E5 A9 01                         LDA #1
0C9E7 85 05                         STA nt_buffer_overflow
0C9E9                               end_nt_buffer_write
0C9E9                             ;find and write data lentgh
0C9E9 A5 04                       LDA nt_update_buf_wc
0C9EB E5 03                       SBC nt_update_buf_wi
0C9ED A6 03                       LDX nt_update_buf_wi
0C9EF 9D 00 03                    STA nt_buffer, X
0C9F2                             ;update `write initial` using `write current`
0C9F2 A6 04                       LDX nt_update_buf_wc
0C9F4 86 03                       STX nt_update_buf_wi
0C9F6                             +:
0C9F6                             write_to_nt_buffer byte_to_dec_out+1
0C9F6 A5 05                       LDA nt_buffer_overflow
0C9F8 D0 20                       BNE +
0C9FA                             
0C9FA A5 13                       LDA byte_to_dec_out+1
0C9FC A6 04                       LDX nt_update_buf_wc
0C9FE 9D 00 03                    STA nt_buffer, X
0CA01 E6 04                       INC nt_update_buf_wc
0CA03                             
0CA03                             ;buffer overflow check
0CA03 A5 04                       LDA nt_update_buf_wc
0CA05 C9 FE                       CMP #$FE
0CA07 D0 11                       BNE +
0CA09 A9 01                         LDA #1
0CA0B 85 05                         STA nt_buffer_overflow
0CA0D                               end_nt_buffer_write
0CA0D                             ;find and write data lentgh
0CA0D A5 04                       LDA nt_update_buf_wc
0CA0F E5 03                       SBC nt_update_buf_wi
0CA11 A6 03                       LDX nt_update_buf_wi
0CA13 9D 00 03                    STA nt_buffer, X
0CA16                             ;update `write initial` using `write current`
0CA16 A6 04                       LDX nt_update_buf_wc
0CA18 86 03                       STX nt_update_buf_wi
0CA1A                             +:
0CA1A                             write_to_nt_buffer byte_to_dec_out+2
0CA1A A5 05                       LDA nt_buffer_overflow
0CA1C D0 20                       BNE +
0CA1E                             
0CA1E A5 14                       LDA byte_to_dec_out+2
0CA20 A6 04                       LDX nt_update_buf_wc
0CA22 9D 00 03                    STA nt_buffer, X
0CA25 E6 04                       INC nt_update_buf_wc
0CA27                             
0CA27                             ;buffer overflow check
0CA27 A5 04                       LDA nt_update_buf_wc
0CA29 C9 FE                       CMP #$FE
0CA2B D0 11                       BNE +
0CA2D A9 01                         LDA #1
0CA2F 85 05                         STA nt_buffer_overflow
0CA31                               end_nt_buffer_write
0CA31                             ;find and write data lentgh
0CA31 A5 04                       LDA nt_update_buf_wc
0CA33 E5 03                       SBC nt_update_buf_wi
0CA35 A6 03                       LDX nt_update_buf_wi
0CA37 9D 00 03                    STA nt_buffer, X
0CA3A                             ;update `write initial` using `write current`
0CA3A A6 04                       LDX nt_update_buf_wc
0CA3C 86 03                       STX nt_update_buf_wi
0CA3E                             +:
0CA3E                             end_nt_buffer_write
0CA3E                             ;find and write data lentgh
0CA3E A5 04                       LDA nt_update_buf_wc
0CA40 E5 03                       SBC nt_update_buf_wi
0CA42 A6 03                       LDX nt_update_buf_wi
0CA44 9D 00 03                    STA nt_buffer, X
0CA47                             ;update `write initial` using `write current`
0CA47 A6 04                       LDX nt_update_buf_wc
0CA49 86 03                       STX nt_update_buf_wi
0CA4B                           
0CA4B AD 07 06                    LDA player+1
0CA4E 85 11                       STA byte_to_dec_in
0CA50 20 E1 C1                    JSR byte_to_dec
0CA53                             begin_nt_buffer_write #$23, #$16
0CA53                             ;if they previous entry is unfinished, finish it
0CA53 A5 03                       LDA nt_update_buf_wi
0CA55 C5 04                       CMP nt_update_buf_wc
0CA57 F0 0D                       BEQ +
0CA59                               end_nt_buffer_write
0CA59                             ;find and write data lentgh
0CA59 A5 04                       LDA nt_update_buf_wc
0CA5B E5 03                       SBC nt_update_buf_wi
0CA5D A6 03                       LDX nt_update_buf_wi
0CA5F 9D 00 03                    STA nt_buffer, X
0CA62                             ;update `write initial` using `write current`
0CA62 A6 04                       LDX nt_update_buf_wc
0CA64 86 03                       STX nt_update_buf_wi
0CA66                             +:
0CA66                           
0CA66 A5 03                       LDA nt_update_buf_wi
0CA68 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CA6A 90 04                       BCC +
0CA6C A9 01                         LDA #1
0CA6E 85 05                         STA nt_buffer_overflow
0CA70                             +:
0CA70                             
0CA70 A5 05                       LDA nt_buffer_overflow
0CA72 D0 16                       BNE +
0CA74                             
0CA74 A6 03                       LDX nt_update_buf_wi
0CA76 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CA78 9D 00 03                    STA nt_buffer, X
0CA7B                             
0CA7B E8                          INX
0CA7C A9 23                       LDA #$23
0CA7E 9D 00 03                    STA nt_buffer, X
0CA81                             
0CA81 E8                          INX
0CA82 A9 16                       LDA #$16
0CA84 9D 00 03                    STA nt_buffer, X
0CA87                             
0CA87 E8                          INX
0CA88 86 04                       STX nt_update_buf_wc
0CA8A                             
0CA8A                             +:
0CA8A                             write_to_nt_buffer byte_to_dec_out+0
0CA8A A5 05                       LDA nt_buffer_overflow
0CA8C D0 20                       BNE +
0CA8E                             
0CA8E A5 12                       LDA byte_to_dec_out+0
0CA90 A6 04                       LDX nt_update_buf_wc
0CA92 9D 00 03                    STA nt_buffer, X
0CA95 E6 04                       INC nt_update_buf_wc
0CA97                             
0CA97                             ;buffer overflow check
0CA97 A5 04                       LDA nt_update_buf_wc
0CA99 C9 FE                       CMP #$FE
0CA9B D0 11                       BNE +
0CA9D A9 01                         LDA #1
0CA9F 85 05                         STA nt_buffer_overflow
0CAA1                               end_nt_buffer_write
0CAA1                             ;find and write data lentgh
0CAA1 A5 04                       LDA nt_update_buf_wc
0CAA3 E5 03                       SBC nt_update_buf_wi
0CAA5 A6 03                       LDX nt_update_buf_wi
0CAA7 9D 00 03                    STA nt_buffer, X
0CAAA                             ;update `write initial` using `write current`
0CAAA A6 04                       LDX nt_update_buf_wc
0CAAC 86 03                       STX nt_update_buf_wi
0CAAE                             +:
0CAAE                             write_to_nt_buffer byte_to_dec_out+1
0CAAE A5 05                       LDA nt_buffer_overflow
0CAB0 D0 20                       BNE +
0CAB2                             
0CAB2 A5 13                       LDA byte_to_dec_out+1
0CAB4 A6 04                       LDX nt_update_buf_wc
0CAB6 9D 00 03                    STA nt_buffer, X
0CAB9 E6 04                       INC nt_update_buf_wc
0CABB                             
0CABB                             ;buffer overflow check
0CABB A5 04                       LDA nt_update_buf_wc
0CABD C9 FE                       CMP #$FE
0CABF D0 11                       BNE +
0CAC1 A9 01                         LDA #1
0CAC3 85 05                         STA nt_buffer_overflow
0CAC5                               end_nt_buffer_write
0CAC5                             ;find and write data lentgh
0CAC5 A5 04                       LDA nt_update_buf_wc
0CAC7 E5 03                       SBC nt_update_buf_wi
0CAC9 A6 03                       LDX nt_update_buf_wi
0CACB 9D 00 03                    STA nt_buffer, X
0CACE                             ;update `write initial` using `write current`
0CACE A6 04                       LDX nt_update_buf_wc
0CAD0 86 03                       STX nt_update_buf_wi
0CAD2                             +:
0CAD2                             write_to_nt_buffer byte_to_dec_out+2
0CAD2 A5 05                       LDA nt_buffer_overflow
0CAD4 D0 20                       BNE +
0CAD6                             
0CAD6 A5 14                       LDA byte_to_dec_out+2
0CAD8 A6 04                       LDX nt_update_buf_wc
0CADA 9D 00 03                    STA nt_buffer, X
0CADD E6 04                       INC nt_update_buf_wc
0CADF                             
0CADF                             ;buffer overflow check
0CADF A5 04                       LDA nt_update_buf_wc
0CAE1 C9 FE                       CMP #$FE
0CAE3 D0 11                       BNE +
0CAE5 A9 01                         LDA #1
0CAE7 85 05                         STA nt_buffer_overflow
0CAE9                               end_nt_buffer_write
0CAE9                             ;find and write data lentgh
0CAE9 A5 04                       LDA nt_update_buf_wc
0CAEB E5 03                       SBC nt_update_buf_wi
0CAED A6 03                       LDX nt_update_buf_wi
0CAEF 9D 00 03                    STA nt_buffer, X
0CAF2                             ;update `write initial` using `write current`
0CAF2 A6 04                       LDX nt_update_buf_wc
0CAF4 86 03                       STX nt_update_buf_wi
0CAF6                             +:
0CAF6                             end_nt_buffer_write
0CAF6                             ;find and write data lentgh
0CAF6 A5 04                       LDA nt_update_buf_wc
0CAF8 E5 03                       SBC nt_update_buf_wi
0CAFA A6 03                       LDX nt_update_buf_wi
0CAFC 9D 00 03                    STA nt_buffer, X
0CAFF                             ;update `write initial` using `write current`
0CAFF A6 04                       LDX nt_update_buf_wc
0CB01 86 03                       STX nt_update_buf_wi
0CB03                           
0CB03 AD 08 06                    LDA player+2
0CB06 85 11                       STA byte_to_dec_in
0CB08 20 E1 C1                    JSR byte_to_dec
0CB0B                             begin_nt_buffer_write #$23, #$44
0CB0B                             ;if they previous entry is unfinished, finish it
0CB0B A5 03                       LDA nt_update_buf_wi
0CB0D C5 04                       CMP nt_update_buf_wc
0CB0F F0 0D                       BEQ +
0CB11                               end_nt_buffer_write
0CB11                             ;find and write data lentgh
0CB11 A5 04                       LDA nt_update_buf_wc
0CB13 E5 03                       SBC nt_update_buf_wi
0CB15 A6 03                       LDX nt_update_buf_wi
0CB17 9D 00 03                    STA nt_buffer, X
0CB1A                             ;update `write initial` using `write current`
0CB1A A6 04                       LDX nt_update_buf_wc
0CB1C 86 03                       STX nt_update_buf_wi
0CB1E                             +:
0CB1E                           
0CB1E A5 03                       LDA nt_update_buf_wi
0CB20 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CB22 90 04                       BCC +
0CB24 A9 01                         LDA #1
0CB26 85 05                         STA nt_buffer_overflow
0CB28                             +:
0CB28                             
0CB28 A5 05                       LDA nt_buffer_overflow
0CB2A D0 16                       BNE +
0CB2C                             
0CB2C A6 03                       LDX nt_update_buf_wi
0CB2E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CB30 9D 00 03                    STA nt_buffer, X
0CB33                             
0CB33 E8                          INX
0CB34 A9 23                       LDA #$23
0CB36 9D 00 03                    STA nt_buffer, X
0CB39                             
0CB39 E8                          INX
0CB3A A9 44                       LDA #$44
0CB3C 9D 00 03                    STA nt_buffer, X
0CB3F                             
0CB3F E8                          INX
0CB40 86 04                       STX nt_update_buf_wc
0CB42                             
0CB42                             +:
0CB42                             write_to_nt_buffer byte_to_dec_out+0
0CB42 A5 05                       LDA nt_buffer_overflow
0CB44 D0 20                       BNE +
0CB46                             
0CB46 A5 12                       LDA byte_to_dec_out+0
0CB48 A6 04                       LDX nt_update_buf_wc
0CB4A 9D 00 03                    STA nt_buffer, X
0CB4D E6 04                       INC nt_update_buf_wc
0CB4F                             
0CB4F                             ;buffer overflow check
0CB4F A5 04                       LDA nt_update_buf_wc
0CB51 C9 FE                       CMP #$FE
0CB53 D0 11                       BNE +
0CB55 A9 01                         LDA #1
0CB57 85 05                         STA nt_buffer_overflow
0CB59                               end_nt_buffer_write
0CB59                             ;find and write data lentgh
0CB59 A5 04                       LDA nt_update_buf_wc
0CB5B E5 03                       SBC nt_update_buf_wi
0CB5D A6 03                       LDX nt_update_buf_wi
0CB5F 9D 00 03                    STA nt_buffer, X
0CB62                             ;update `write initial` using `write current`
0CB62 A6 04                       LDX nt_update_buf_wc
0CB64 86 03                       STX nt_update_buf_wi
0CB66                             +:
0CB66                             write_to_nt_buffer byte_to_dec_out+1
0CB66 A5 05                       LDA nt_buffer_overflow
0CB68 D0 20                       BNE +
0CB6A                             
0CB6A A5 13                       LDA byte_to_dec_out+1
0CB6C A6 04                       LDX nt_update_buf_wc
0CB6E 9D 00 03                    STA nt_buffer, X
0CB71 E6 04                       INC nt_update_buf_wc
0CB73                             
0CB73                             ;buffer overflow check
0CB73 A5 04                       LDA nt_update_buf_wc
0CB75 C9 FE                       CMP #$FE
0CB77 D0 11                       BNE +
0CB79 A9 01                         LDA #1
0CB7B 85 05                         STA nt_buffer_overflow
0CB7D                               end_nt_buffer_write
0CB7D                             ;find and write data lentgh
0CB7D A5 04                       LDA nt_update_buf_wc
0CB7F E5 03                       SBC nt_update_buf_wi
0CB81 A6 03                       LDX nt_update_buf_wi
0CB83 9D 00 03                    STA nt_buffer, X
0CB86                             ;update `write initial` using `write current`
0CB86 A6 04                       LDX nt_update_buf_wc
0CB88 86 03                       STX nt_update_buf_wi
0CB8A                             +:
0CB8A                             write_to_nt_buffer byte_to_dec_out+2
0CB8A A5 05                       LDA nt_buffer_overflow
0CB8C D0 20                       BNE +
0CB8E                             
0CB8E A5 14                       LDA byte_to_dec_out+2
0CB90 A6 04                       LDX nt_update_buf_wc
0CB92 9D 00 03                    STA nt_buffer, X
0CB95 E6 04                       INC nt_update_buf_wc
0CB97                             
0CB97                             ;buffer overflow check
0CB97 A5 04                       LDA nt_update_buf_wc
0CB99 C9 FE                       CMP #$FE
0CB9B D0 11                       BNE +
0CB9D A9 01                         LDA #1
0CB9F 85 05                         STA nt_buffer_overflow
0CBA1                               end_nt_buffer_write
0CBA1                             ;find and write data lentgh
0CBA1 A5 04                       LDA nt_update_buf_wc
0CBA3 E5 03                       SBC nt_update_buf_wi
0CBA5 A6 03                       LDX nt_update_buf_wi
0CBA7 9D 00 03                    STA nt_buffer, X
0CBAA                             ;update `write initial` using `write current`
0CBAA A6 04                       LDX nt_update_buf_wc
0CBAC 86 03                       STX nt_update_buf_wi
0CBAE                             +:
0CBAE                             end_nt_buffer_write
0CBAE                             ;find and write data lentgh
0CBAE A5 04                       LDA nt_update_buf_wc
0CBB0 E5 03                       SBC nt_update_buf_wi
0CBB2 A6 03                       LDX nt_update_buf_wi
0CBB4 9D 00 03                    STA nt_buffer, X
0CBB7                             ;update `write initial` using `write current`
0CBB7 A6 04                       LDX nt_update_buf_wc
0CBB9 86 03                       STX nt_update_buf_wi
0CBBB                           
0CBBB AD 09 06                    LDA player+3
0CBBE 85 11                       STA byte_to_dec_in
0CBC0 20 E1 C1                    JSR byte_to_dec
0CBC3                             begin_nt_buffer_write #$23, #$4A
0CBC3                             ;if they previous entry is unfinished, finish it
0CBC3 A5 03                       LDA nt_update_buf_wi
0CBC5 C5 04                       CMP nt_update_buf_wc
0CBC7 F0 0D                       BEQ +
0CBC9                               end_nt_buffer_write
0CBC9                             ;find and write data lentgh
0CBC9 A5 04                       LDA nt_update_buf_wc
0CBCB E5 03                       SBC nt_update_buf_wi
0CBCD A6 03                       LDX nt_update_buf_wi
0CBCF 9D 00 03                    STA nt_buffer, X
0CBD2                             ;update `write initial` using `write current`
0CBD2 A6 04                       LDX nt_update_buf_wc
0CBD4 86 03                       STX nt_update_buf_wi
0CBD6                             +:
0CBD6                           
0CBD6 A5 03                       LDA nt_update_buf_wi
0CBD8 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CBDA 90 04                       BCC +
0CBDC A9 01                         LDA #1
0CBDE 85 05                         STA nt_buffer_overflow
0CBE0                             +:
0CBE0                             
0CBE0 A5 05                       LDA nt_buffer_overflow
0CBE2 D0 16                       BNE +
0CBE4                             
0CBE4 A6 03                       LDX nt_update_buf_wi
0CBE6 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CBE8 9D 00 03                    STA nt_buffer, X
0CBEB                             
0CBEB E8                          INX
0CBEC A9 23                       LDA #$23
0CBEE 9D 00 03                    STA nt_buffer, X
0CBF1                             
0CBF1 E8                          INX
0CBF2 A9 4A                       LDA #$4A
0CBF4 9D 00 03                    STA nt_buffer, X
0CBF7                             
0CBF7 E8                          INX
0CBF8 86 04                       STX nt_update_buf_wc
0CBFA                             
0CBFA                             +:
0CBFA                             write_to_nt_buffer byte_to_dec_out+0
0CBFA A5 05                       LDA nt_buffer_overflow
0CBFC D0 20                       BNE +
0CBFE                             
0CBFE A5 12                       LDA byte_to_dec_out+0
0CC00 A6 04                       LDX nt_update_buf_wc
0CC02 9D 00 03                    STA nt_buffer, X
0CC05 E6 04                       INC nt_update_buf_wc
0CC07                             
0CC07                             ;buffer overflow check
0CC07 A5 04                       LDA nt_update_buf_wc
0CC09 C9 FE                       CMP #$FE
0CC0B D0 11                       BNE +
0CC0D A9 01                         LDA #1
0CC0F 85 05                         STA nt_buffer_overflow
0CC11                               end_nt_buffer_write
0CC11                             ;find and write data lentgh
0CC11 A5 04                       LDA nt_update_buf_wc
0CC13 E5 03                       SBC nt_update_buf_wi
0CC15 A6 03                       LDX nt_update_buf_wi
0CC17 9D 00 03                    STA nt_buffer, X
0CC1A                             ;update `write initial` using `write current`
0CC1A A6 04                       LDX nt_update_buf_wc
0CC1C 86 03                       STX nt_update_buf_wi
0CC1E                             +:
0CC1E                             write_to_nt_buffer byte_to_dec_out+1
0CC1E A5 05                       LDA nt_buffer_overflow
0CC20 D0 20                       BNE +
0CC22                             
0CC22 A5 13                       LDA byte_to_dec_out+1
0CC24 A6 04                       LDX nt_update_buf_wc
0CC26 9D 00 03                    STA nt_buffer, X
0CC29 E6 04                       INC nt_update_buf_wc
0CC2B                             
0CC2B                             ;buffer overflow check
0CC2B A5 04                       LDA nt_update_buf_wc
0CC2D C9 FE                       CMP #$FE
0CC2F D0 11                       BNE +
0CC31 A9 01                         LDA #1
0CC33 85 05                         STA nt_buffer_overflow
0CC35                               end_nt_buffer_write
0CC35                             ;find and write data lentgh
0CC35 A5 04                       LDA nt_update_buf_wc
0CC37 E5 03                       SBC nt_update_buf_wi
0CC39 A6 03                       LDX nt_update_buf_wi
0CC3B 9D 00 03                    STA nt_buffer, X
0CC3E                             ;update `write initial` using `write current`
0CC3E A6 04                       LDX nt_update_buf_wc
0CC40 86 03                       STX nt_update_buf_wi
0CC42                             +:
0CC42                             write_to_nt_buffer byte_to_dec_out+2
0CC42 A5 05                       LDA nt_buffer_overflow
0CC44 D0 20                       BNE +
0CC46                             
0CC46 A5 14                       LDA byte_to_dec_out+2
0CC48 A6 04                       LDX nt_update_buf_wc
0CC4A 9D 00 03                    STA nt_buffer, X
0CC4D E6 04                       INC nt_update_buf_wc
0CC4F                             
0CC4F                             ;buffer overflow check
0CC4F A5 04                       LDA nt_update_buf_wc
0CC51 C9 FE                       CMP #$FE
0CC53 D0 11                       BNE +
0CC55 A9 01                         LDA #1
0CC57 85 05                         STA nt_buffer_overflow
0CC59                               end_nt_buffer_write
0CC59                             ;find and write data lentgh
0CC59 A5 04                       LDA nt_update_buf_wc
0CC5B E5 03                       SBC nt_update_buf_wi
0CC5D A6 03                       LDX nt_update_buf_wi
0CC5F 9D 00 03                    STA nt_buffer, X
0CC62                             ;update `write initial` using `write current`
0CC62 A6 04                       LDX nt_update_buf_wc
0CC64 86 03                       STX nt_update_buf_wi
0CC66                             +:
0CC66                             end_nt_buffer_write
0CC66                             ;find and write data lentgh
0CC66 A5 04                       LDA nt_update_buf_wc
0CC68 E5 03                       SBC nt_update_buf_wi
0CC6A A6 03                       LDX nt_update_buf_wi
0CC6C 9D 00 03                    STA nt_buffer, X
0CC6F                             ;update `write initial` using `write current`
0CC6F A6 04                       LDX nt_update_buf_wc
0CC71 86 03                       STX nt_update_buf_wi
0CC73                           
0CC73 AD 0A 06                    LDA player+4
0CC76 85 11                       STA byte_to_dec_in
0CC78 20 E1 C1                    JSR byte_to_dec
0CC7B                             begin_nt_buffer_write #$23, #$50
0CC7B                             ;if they previous entry is unfinished, finish it
0CC7B A5 03                       LDA nt_update_buf_wi
0CC7D C5 04                       CMP nt_update_buf_wc
0CC7F F0 0D                       BEQ +
0CC81                               end_nt_buffer_write
0CC81                             ;find and write data lentgh
0CC81 A5 04                       LDA nt_update_buf_wc
0CC83 E5 03                       SBC nt_update_buf_wi
0CC85 A6 03                       LDX nt_update_buf_wi
0CC87 9D 00 03                    STA nt_buffer, X
0CC8A                             ;update `write initial` using `write current`
0CC8A A6 04                       LDX nt_update_buf_wc
0CC8C 86 03                       STX nt_update_buf_wi
0CC8E                             +:
0CC8E                           
0CC8E A5 03                       LDA nt_update_buf_wi
0CC90 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CC92 90 04                       BCC +
0CC94 A9 01                         LDA #1
0CC96 85 05                         STA nt_buffer_overflow
0CC98                             +:
0CC98                             
0CC98 A5 05                       LDA nt_buffer_overflow
0CC9A D0 16                       BNE +
0CC9C                             
0CC9C A6 03                       LDX nt_update_buf_wi
0CC9E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CCA0 9D 00 03                    STA nt_buffer, X
0CCA3                             
0CCA3 E8                          INX
0CCA4 A9 23                       LDA #$23
0CCA6 9D 00 03                    STA nt_buffer, X
0CCA9                             
0CCA9 E8                          INX
0CCAA A9 50                       LDA #$50
0CCAC 9D 00 03                    STA nt_buffer, X
0CCAF                             
0CCAF E8                          INX
0CCB0 86 04                       STX nt_update_buf_wc
0CCB2                             
0CCB2                             +:
0CCB2                             write_to_nt_buffer byte_to_dec_out+0
0CCB2 A5 05                       LDA nt_buffer_overflow
0CCB4 D0 20                       BNE +
0CCB6                             
0CCB6 A5 12                       LDA byte_to_dec_out+0
0CCB8 A6 04                       LDX nt_update_buf_wc
0CCBA 9D 00 03                    STA nt_buffer, X
0CCBD E6 04                       INC nt_update_buf_wc
0CCBF                             
0CCBF                             ;buffer overflow check
0CCBF A5 04                       LDA nt_update_buf_wc
0CCC1 C9 FE                       CMP #$FE
0CCC3 D0 11                       BNE +
0CCC5 A9 01                         LDA #1
0CCC7 85 05                         STA nt_buffer_overflow
0CCC9                               end_nt_buffer_write
0CCC9                             ;find and write data lentgh
0CCC9 A5 04                       LDA nt_update_buf_wc
0CCCB E5 03                       SBC nt_update_buf_wi
0CCCD A6 03                       LDX nt_update_buf_wi
0CCCF 9D 00 03                    STA nt_buffer, X
0CCD2                             ;update `write initial` using `write current`
0CCD2 A6 04                       LDX nt_update_buf_wc
0CCD4 86 03                       STX nt_update_buf_wi
0CCD6                             +:
0CCD6                             write_to_nt_buffer byte_to_dec_out+1
0CCD6 A5 05                       LDA nt_buffer_overflow
0CCD8 D0 20                       BNE +
0CCDA                             
0CCDA A5 13                       LDA byte_to_dec_out+1
0CCDC A6 04                       LDX nt_update_buf_wc
0CCDE 9D 00 03                    STA nt_buffer, X
0CCE1 E6 04                       INC nt_update_buf_wc
0CCE3                             
0CCE3                             ;buffer overflow check
0CCE3 A5 04                       LDA nt_update_buf_wc
0CCE5 C9 FE                       CMP #$FE
0CCE7 D0 11                       BNE +
0CCE9 A9 01                         LDA #1
0CCEB 85 05                         STA nt_buffer_overflow
0CCED                               end_nt_buffer_write
0CCED                             ;find and write data lentgh
0CCED A5 04                       LDA nt_update_buf_wc
0CCEF E5 03                       SBC nt_update_buf_wi
0CCF1 A6 03                       LDX nt_update_buf_wi
0CCF3 9D 00 03                    STA nt_buffer, X
0CCF6                             ;update `write initial` using `write current`
0CCF6 A6 04                       LDX nt_update_buf_wc
0CCF8 86 03                       STX nt_update_buf_wi
0CCFA                             +:
0CCFA                             write_to_nt_buffer byte_to_dec_out+2
0CCFA A5 05                       LDA nt_buffer_overflow
0CCFC D0 20                       BNE +
0CCFE                             
0CCFE A5 14                       LDA byte_to_dec_out+2
0CD00 A6 04                       LDX nt_update_buf_wc
0CD02 9D 00 03                    STA nt_buffer, X
0CD05 E6 04                       INC nt_update_buf_wc
0CD07                             
0CD07                             ;buffer overflow check
0CD07 A5 04                       LDA nt_update_buf_wc
0CD09 C9 FE                       CMP #$FE
0CD0B D0 11                       BNE +
0CD0D A9 01                         LDA #1
0CD0F 85 05                         STA nt_buffer_overflow
0CD11                               end_nt_buffer_write
0CD11                             ;find and write data lentgh
0CD11 A5 04                       LDA nt_update_buf_wc
0CD13 E5 03                       SBC nt_update_buf_wi
0CD15 A6 03                       LDX nt_update_buf_wi
0CD17 9D 00 03                    STA nt_buffer, X
0CD1A                             ;update `write initial` using `write current`
0CD1A A6 04                       LDX nt_update_buf_wc
0CD1C 86 03                       STX nt_update_buf_wi
0CD1E                             +:
0CD1E                             end_nt_buffer_write
0CD1E                             ;find and write data lentgh
0CD1E A5 04                       LDA nt_update_buf_wc
0CD20 E5 03                       SBC nt_update_buf_wi
0CD22 A6 03                       LDX nt_update_buf_wi
0CD24 9D 00 03                    STA nt_buffer, X
0CD27                             ;update `write initial` using `write current`
0CD27 A6 04                       LDX nt_update_buf_wc
0CD29 86 03                       STX nt_update_buf_wi
0CD2B                           
0CD2B AD 02 06                    LDA player_floor
0CD2E 85 11                       STA byte_to_dec_in
0CD30 20 E1 C1                    JSR byte_to_dec
0CD33                             begin_nt_buffer_write #$23, #$1C
0CD33                             ;if they previous entry is unfinished, finish it
0CD33 A5 03                       LDA nt_update_buf_wi
0CD35 C5 04                       CMP nt_update_buf_wc
0CD37 F0 0D                       BEQ +
0CD39                               end_nt_buffer_write
0CD39                             ;find and write data lentgh
0CD39 A5 04                       LDA nt_update_buf_wc
0CD3B E5 03                       SBC nt_update_buf_wi
0CD3D A6 03                       LDX nt_update_buf_wi
0CD3F 9D 00 03                    STA nt_buffer, X
0CD42                             ;update `write initial` using `write current`
0CD42 A6 04                       LDX nt_update_buf_wc
0CD44 86 03                       STX nt_update_buf_wi
0CD46                             +:
0CD46                           
0CD46 A5 03                       LDA nt_update_buf_wi
0CD48 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CD4A 90 04                       BCC +
0CD4C A9 01                         LDA #1
0CD4E 85 05                         STA nt_buffer_overflow
0CD50                             +:
0CD50                             
0CD50 A5 05                       LDA nt_buffer_overflow
0CD52 D0 16                       BNE +
0CD54                             
0CD54 A6 03                       LDX nt_update_buf_wi
0CD56 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CD58 9D 00 03                    STA nt_buffer, X
0CD5B                             
0CD5B E8                          INX
0CD5C A9 23                       LDA #$23
0CD5E 9D 00 03                    STA nt_buffer, X
0CD61                             
0CD61 E8                          INX
0CD62 A9 1C                       LDA #$1C
0CD64 9D 00 03                    STA nt_buffer, X
0CD67                             
0CD67 E8                          INX
0CD68 86 04                       STX nt_update_buf_wc
0CD6A                             
0CD6A                             +:
0CD6A                             write_to_nt_buffer byte_to_dec_out+0
0CD6A A5 05                       LDA nt_buffer_overflow
0CD6C D0 20                       BNE +
0CD6E                             
0CD6E A5 12                       LDA byte_to_dec_out+0
0CD70 A6 04                       LDX nt_update_buf_wc
0CD72 9D 00 03                    STA nt_buffer, X
0CD75 E6 04                       INC nt_update_buf_wc
0CD77                             
0CD77                             ;buffer overflow check
0CD77 A5 04                       LDA nt_update_buf_wc
0CD79 C9 FE                       CMP #$FE
0CD7B D0 11                       BNE +
0CD7D A9 01                         LDA #1
0CD7F 85 05                         STA nt_buffer_overflow
0CD81                               end_nt_buffer_write
0CD81                             ;find and write data lentgh
0CD81 A5 04                       LDA nt_update_buf_wc
0CD83 E5 03                       SBC nt_update_buf_wi
0CD85 A6 03                       LDX nt_update_buf_wi
0CD87 9D 00 03                    STA nt_buffer, X
0CD8A                             ;update `write initial` using `write current`
0CD8A A6 04                       LDX nt_update_buf_wc
0CD8C 86 03                       STX nt_update_buf_wi
0CD8E                             +:
0CD8E                             write_to_nt_buffer byte_to_dec_out+1
0CD8E A5 05                       LDA nt_buffer_overflow
0CD90 D0 20                       BNE +
0CD92                             
0CD92 A5 13                       LDA byte_to_dec_out+1
0CD94 A6 04                       LDX nt_update_buf_wc
0CD96 9D 00 03                    STA nt_buffer, X
0CD99 E6 04                       INC nt_update_buf_wc
0CD9B                             
0CD9B                             ;buffer overflow check
0CD9B A5 04                       LDA nt_update_buf_wc
0CD9D C9 FE                       CMP #$FE
0CD9F D0 11                       BNE +
0CDA1 A9 01                         LDA #1
0CDA3 85 05                         STA nt_buffer_overflow
0CDA5                               end_nt_buffer_write
0CDA5                             ;find and write data lentgh
0CDA5 A5 04                       LDA nt_update_buf_wc
0CDA7 E5 03                       SBC nt_update_buf_wi
0CDA9 A6 03                       LDX nt_update_buf_wi
0CDAB 9D 00 03                    STA nt_buffer, X
0CDAE                             ;update `write initial` using `write current`
0CDAE A6 04                       LDX nt_update_buf_wc
0CDB0 86 03                       STX nt_update_buf_wi
0CDB2                             +:
0CDB2                             write_to_nt_buffer byte_to_dec_out+2
0CDB2 A5 05                       LDA nt_buffer_overflow
0CDB4 D0 20                       BNE +
0CDB6                             
0CDB6 A5 14                       LDA byte_to_dec_out+2
0CDB8 A6 04                       LDX nt_update_buf_wc
0CDBA 9D 00 03                    STA nt_buffer, X
0CDBD E6 04                       INC nt_update_buf_wc
0CDBF                             
0CDBF                             ;buffer overflow check
0CDBF A5 04                       LDA nt_update_buf_wc
0CDC1 C9 FE                       CMP #$FE
0CDC3 D0 11                       BNE +
0CDC5 A9 01                         LDA #1
0CDC7 85 05                         STA nt_buffer_overflow
0CDC9                               end_nt_buffer_write
0CDC9                             ;find and write data lentgh
0CDC9 A5 04                       LDA nt_update_buf_wc
0CDCB E5 03                       SBC nt_update_buf_wi
0CDCD A6 03                       LDX nt_update_buf_wi
0CDCF 9D 00 03                    STA nt_buffer, X
0CDD2                             ;update `write initial` using `write current`
0CDD2 A6 04                       LDX nt_update_buf_wc
0CDD4 86 03                       STX nt_update_buf_wi
0CDD6                             +:
0CDD6                             end_nt_buffer_write
0CDD6                             ;find and write data lentgh
0CDD6 A5 04                       LDA nt_update_buf_wc
0CDD8 E5 03                       SBC nt_update_buf_wi
0CDDA A6 03                       LDX nt_update_buf_wi
0CDDC 9D 00 03                    STA nt_buffer, X
0CDDF                             ;update `write initial` using `write current`
0CDDF A6 04                       LDX nt_update_buf_wc
0CDE1 86 03                       STX nt_update_buf_wi
0CDE3                           
0CDE3 AD 03 06                    LDA player_money
0CDE6 85 11                       STA byte_to_dec_in
0CDE8 20 E1 C1                    JSR byte_to_dec
0CDEB                             begin_nt_buffer_write #$23, #$56
0CDEB                             ;if they previous entry is unfinished, finish it
0CDEB A5 03                       LDA nt_update_buf_wi
0CDED C5 04                       CMP nt_update_buf_wc
0CDEF F0 0D                       BEQ +
0CDF1                               end_nt_buffer_write
0CDF1                             ;find and write data lentgh
0CDF1 A5 04                       LDA nt_update_buf_wc
0CDF3 E5 03                       SBC nt_update_buf_wi
0CDF5 A6 03                       LDX nt_update_buf_wi
0CDF7 9D 00 03                    STA nt_buffer, X
0CDFA                             ;update `write initial` using `write current`
0CDFA A6 04                       LDX nt_update_buf_wc
0CDFC 86 03                       STX nt_update_buf_wi
0CDFE                             +:
0CDFE                           
0CDFE A5 03                       LDA nt_update_buf_wi
0CE00 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CE02 90 04                       BCC +
0CE04 A9 01                         LDA #1
0CE06 85 05                         STA nt_buffer_overflow
0CE08                             +:
0CE08                             
0CE08 A5 05                       LDA nt_buffer_overflow
0CE0A D0 16                       BNE +
0CE0C                             
0CE0C A6 03                       LDX nt_update_buf_wi
0CE0E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CE10 9D 00 03                    STA nt_buffer, X
0CE13                             
0CE13 E8                          INX
0CE14 A9 23                       LDA #$23
0CE16 9D 00 03                    STA nt_buffer, X
0CE19                             
0CE19 E8                          INX
0CE1A A9 56                       LDA #$56
0CE1C 9D 00 03                    STA nt_buffer, X
0CE1F                             
0CE1F E8                          INX
0CE20 86 04                       STX nt_update_buf_wc
0CE22                             
0CE22                             +:
0CE22                             write_to_nt_buffer byte_to_dec_out+0
0CE22 A5 05                       LDA nt_buffer_overflow
0CE24 D0 20                       BNE +
0CE26                             
0CE26 A5 12                       LDA byte_to_dec_out+0
0CE28 A6 04                       LDX nt_update_buf_wc
0CE2A 9D 00 03                    STA nt_buffer, X
0CE2D E6 04                       INC nt_update_buf_wc
0CE2F                             
0CE2F                             ;buffer overflow check
0CE2F A5 04                       LDA nt_update_buf_wc
0CE31 C9 FE                       CMP #$FE
0CE33 D0 11                       BNE +
0CE35 A9 01                         LDA #1
0CE37 85 05                         STA nt_buffer_overflow
0CE39                               end_nt_buffer_write
0CE39                             ;find and write data lentgh
0CE39 A5 04                       LDA nt_update_buf_wc
0CE3B E5 03                       SBC nt_update_buf_wi
0CE3D A6 03                       LDX nt_update_buf_wi
0CE3F 9D 00 03                    STA nt_buffer, X
0CE42                             ;update `write initial` using `write current`
0CE42 A6 04                       LDX nt_update_buf_wc
0CE44 86 03                       STX nt_update_buf_wi
0CE46                             +:
0CE46                             write_to_nt_buffer byte_to_dec_out+1
0CE46 A5 05                       LDA nt_buffer_overflow
0CE48 D0 20                       BNE +
0CE4A                             
0CE4A A5 13                       LDA byte_to_dec_out+1
0CE4C A6 04                       LDX nt_update_buf_wc
0CE4E 9D 00 03                    STA nt_buffer, X
0CE51 E6 04                       INC nt_update_buf_wc
0CE53                             
0CE53                             ;buffer overflow check
0CE53 A5 04                       LDA nt_update_buf_wc
0CE55 C9 FE                       CMP #$FE
0CE57 D0 11                       BNE +
0CE59 A9 01                         LDA #1
0CE5B 85 05                         STA nt_buffer_overflow
0CE5D                               end_nt_buffer_write
0CE5D                             ;find and write data lentgh
0CE5D A5 04                       LDA nt_update_buf_wc
0CE5F E5 03                       SBC nt_update_buf_wi
0CE61 A6 03                       LDX nt_update_buf_wi
0CE63 9D 00 03                    STA nt_buffer, X
0CE66                             ;update `write initial` using `write current`
0CE66 A6 04                       LDX nt_update_buf_wc
0CE68 86 03                       STX nt_update_buf_wi
0CE6A                             +:
0CE6A                             write_to_nt_buffer byte_to_dec_out+2
0CE6A A5 05                       LDA nt_buffer_overflow
0CE6C D0 20                       BNE +
0CE6E                             
0CE6E A5 14                       LDA byte_to_dec_out+2
0CE70 A6 04                       LDX nt_update_buf_wc
0CE72 9D 00 03                    STA nt_buffer, X
0CE75 E6 04                       INC nt_update_buf_wc
0CE77                             
0CE77                             ;buffer overflow check
0CE77 A5 04                       LDA nt_update_buf_wc
0CE79 C9 FE                       CMP #$FE
0CE7B D0 11                       BNE +
0CE7D A9 01                         LDA #1
0CE7F 85 05                         STA nt_buffer_overflow
0CE81                               end_nt_buffer_write
0CE81                             ;find and write data lentgh
0CE81 A5 04                       LDA nt_update_buf_wc
0CE83 E5 03                       SBC nt_update_buf_wi
0CE85 A6 03                       LDX nt_update_buf_wi
0CE87 9D 00 03                    STA nt_buffer, X
0CE8A                             ;update `write initial` using `write current`
0CE8A A6 04                       LDX nt_update_buf_wc
0CE8C 86 03                       STX nt_update_buf_wi
0CE8E                             +:
0CE8E                             end_nt_buffer_write
0CE8E                             ;find and write data lentgh
0CE8E A5 04                       LDA nt_update_buf_wc
0CE90 E5 03                       SBC nt_update_buf_wi
0CE92 A6 03                       LDX nt_update_buf_wi
0CE94 9D 00 03                    STA nt_buffer, X
0CE97                             ;update `write initial` using `write current`
0CE97 A6 04                       LDX nt_update_buf_wc
0CE99 86 03                       STX nt_update_buf_wi
0CE9B                           
0CE9B AD 04 06                    LDA player_jewels
0CE9E 85 11                       STA byte_to_dec_in
0CEA0 20 E1 C1                    JSR byte_to_dec
0CEA3                             begin_nt_buffer_write #$23, #$5C
0CEA3                             ;if they previous entry is unfinished, finish it
0CEA3 A5 03                       LDA nt_update_buf_wi
0CEA5 C5 04                       CMP nt_update_buf_wc
0CEA7 F0 0D                       BEQ +
0CEA9                               end_nt_buffer_write
0CEA9                             ;find and write data lentgh
0CEA9 A5 04                       LDA nt_update_buf_wc
0CEAB E5 03                       SBC nt_update_buf_wi
0CEAD A6 03                       LDX nt_update_buf_wi
0CEAF 9D 00 03                    STA nt_buffer, X
0CEB2                             ;update `write initial` using `write current`
0CEB2 A6 04                       LDX nt_update_buf_wc
0CEB4 86 03                       STX nt_update_buf_wi
0CEB6                             +:
0CEB6                           
0CEB6 A5 03                       LDA nt_update_buf_wi
0CEB8 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CEBA 90 04                       BCC +
0CEBC A9 01                         LDA #1
0CEBE 85 05                         STA nt_buffer_overflow
0CEC0                             +:
0CEC0                             
0CEC0 A5 05                       LDA nt_buffer_overflow
0CEC2 D0 16                       BNE +
0CEC4                             
0CEC4 A6 03                       LDX nt_update_buf_wi
0CEC6 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CEC8 9D 00 03                    STA nt_buffer, X
0CECB                             
0CECB E8                          INX
0CECC A9 23                       LDA #$23
0CECE 9D 00 03                    STA nt_buffer, X
0CED1                             
0CED1 E8                          INX
0CED2 A9 5C                       LDA #$5C
0CED4 9D 00 03                    STA nt_buffer, X
0CED7                             
0CED7 E8                          INX
0CED8 86 04                       STX nt_update_buf_wc
0CEDA                             
0CEDA                             +:
0CEDA                             write_to_nt_buffer byte_to_dec_out+0
0CEDA A5 05                       LDA nt_buffer_overflow
0CEDC D0 20                       BNE +
0CEDE                             
0CEDE A5 12                       LDA byte_to_dec_out+0
0CEE0 A6 04                       LDX nt_update_buf_wc
0CEE2 9D 00 03                    STA nt_buffer, X
0CEE5 E6 04                       INC nt_update_buf_wc
0CEE7                             
0CEE7                             ;buffer overflow check
0CEE7 A5 04                       LDA nt_update_buf_wc
0CEE9 C9 FE                       CMP #$FE
0CEEB D0 11                       BNE +
0CEED A9 01                         LDA #1
0CEEF 85 05                         STA nt_buffer_overflow
0CEF1                               end_nt_buffer_write
0CEF1                             ;find and write data lentgh
0CEF1 A5 04                       LDA nt_update_buf_wc
0CEF3 E5 03                       SBC nt_update_buf_wi
0CEF5 A6 03                       LDX nt_update_buf_wi
0CEF7 9D 00 03                    STA nt_buffer, X
0CEFA                             ;update `write initial` using `write current`
0CEFA A6 04                       LDX nt_update_buf_wc
0CEFC 86 03                       STX nt_update_buf_wi
0CEFE                             +:
0CEFE                             write_to_nt_buffer byte_to_dec_out+1
0CEFE A5 05                       LDA nt_buffer_overflow
0CF00 D0 20                       BNE +
0CF02                             
0CF02 A5 13                       LDA byte_to_dec_out+1
0CF04 A6 04                       LDX nt_update_buf_wc
0CF06 9D 00 03                    STA nt_buffer, X
0CF09 E6 04                       INC nt_update_buf_wc
0CF0B                             
0CF0B                             ;buffer overflow check
0CF0B A5 04                       LDA nt_update_buf_wc
0CF0D C9 FE                       CMP #$FE
0CF0F D0 11                       BNE +
0CF11 A9 01                         LDA #1
0CF13 85 05                         STA nt_buffer_overflow
0CF15                               end_nt_buffer_write
0CF15                             ;find and write data lentgh
0CF15 A5 04                       LDA nt_update_buf_wc
0CF17 E5 03                       SBC nt_update_buf_wi
0CF19 A6 03                       LDX nt_update_buf_wi
0CF1B 9D 00 03                    STA nt_buffer, X
0CF1E                             ;update `write initial` using `write current`
0CF1E A6 04                       LDX nt_update_buf_wc
0CF20 86 03                       STX nt_update_buf_wi
0CF22                             +:
0CF22                             write_to_nt_buffer byte_to_dec_out+2
0CF22 A5 05                       LDA nt_buffer_overflow
0CF24 D0 20                       BNE +
0CF26                             
0CF26 A5 14                       LDA byte_to_dec_out+2
0CF28 A6 04                       LDX nt_update_buf_wc
0CF2A 9D 00 03                    STA nt_buffer, X
0CF2D E6 04                       INC nt_update_buf_wc
0CF2F                             
0CF2F                             ;buffer overflow check
0CF2F A5 04                       LDA nt_update_buf_wc
0CF31 C9 FE                       CMP #$FE
0CF33 D0 11                       BNE +
0CF35 A9 01                         LDA #1
0CF37 85 05                         STA nt_buffer_overflow
0CF39                               end_nt_buffer_write
0CF39                             ;find and write data lentgh
0CF39 A5 04                       LDA nt_update_buf_wc
0CF3B E5 03                       SBC nt_update_buf_wi
0CF3D A6 03                       LDX nt_update_buf_wi
0CF3F 9D 00 03                    STA nt_buffer, X
0CF42                             ;update `write initial` using `write current`
0CF42 A6 04                       LDX nt_update_buf_wc
0CF44 86 03                       STX nt_update_buf_wi
0CF46                             +:
0CF46                             end_nt_buffer_write
0CF46                             ;find and write data lentgh
0CF46 A5 04                       LDA nt_update_buf_wc
0CF48 E5 03                       SBC nt_update_buf_wi
0CF4A A6 03                       LDX nt_update_buf_wi
0CF4C 9D 00 03                    STA nt_buffer, X
0CF4F                             ;update `write initial` using `write current`
0CF4F A6 04                       LDX nt_update_buf_wc
0CF51 86 03                       STX nt_update_buf_wi
0CF53                           
0CF53 A9 00                       LDA #0
0CF55 8D 7E 06                    STA readout_update_req
0CF58                             
0CF58 60                          RTS
0CF59                           .incsrc "src/play/load_room.6502"
0CF59                           SCREEN_TOP .equ #$20
0CF59                           WALL_TOP_L1 .equ #$0E
0CF59                           SPIRIT_L1 .equ #$9A
0CF59                           
0CF59                           SCREEN_MID .equ #$21
0CF59                           WALL_LEFT_L1 .equ #$40
0CF59                           WALL_RIGHT_L1 .equ #$5C
0CF59                           FOUNTAIN_L1 .equ #$4E
0CF59                           
0CF59                           SCREEN_BOT .equ #$22
0CF59                           WALL_BOT_L1 .equ #$8E
0CF59                           CHEST_L1 .equ #$44
0CF59                           
0CF59                           ATTR_TABLE .equ #$23
0CF59                           SPIRIT_ATTR .equ #$CE
0CF59                           
0CF59                           
0CF59                           
0CF59                           LINE_SPACING .equ #$20
0CF59                           
0CF59                           
0CF59                           draw_room:
0CF59 AD 7F 06                    LDA room_update_req
0CF5C C9 00                       CMP #0
0CF5E F0 0C                       BEQ +
0CF60 20 72 CF                      JSR fill_walls
0CF63 20 A7 DC                      JSR draw_chest
0CF66 20 F5 DD                      JSR draw_spirit
0CF69 20 C5 DF                      JSR draw_fountain
0CF6C                             +:
0CF6C                             
0CF6C A9 00                       LDA #0
0CF6E 8D 7F 06                    STA room_update_req
0CF71 60                          RTS
0CF72                             
0CF72                           fill_walls:
0CF72                             ; check upward
0CF72 A0 37                       LDY #$37 ;default fill (floor)
0CF74                             ; check if at top
0CF74 A9 F0                       LDA #%11110000
0CF76 2D 01 06                    AND player_room
0CF79 C9 F0                       CMP #%11110000
0CF7B D0 02                       BNE +
0CF7D A0 36                         LDY #$36
0CF7F                             +:
0CF7F                             ; check if next room up exists
0CF7F AD 01 06                    LDA player_room
0CF82 18                          CLC
0CF83 69 10                       ADC #%00010000
0CF85 AA                          TAX
0CF86 8E FD 07                    STX generic_bytes+253
0CF89 BD 00 04                    LDA dungeon_map, X
0CF8C C9 00                       CMP #$00
0CF8E D0 02                       BNE +
0CF90 A0 36                         LDY #$36
0CF92                             +:
0CF92                             
0CF92                             ; draw it
0CF92 8C 00 07                    STY generic_bytes+0
0CF95                             begin_nt_buffer_write #$20, #$0E
0CF95                             ;if they previous entry is unfinished, finish it
0CF95 A5 03                       LDA nt_update_buf_wi
0CF97 C5 04                       CMP nt_update_buf_wc
0CF99 F0 0D                       BEQ +
0CF9B                               end_nt_buffer_write
0CF9B                             ;find and write data lentgh
0CF9B A5 04                       LDA nt_update_buf_wc
0CF9D E5 03                       SBC nt_update_buf_wi
0CF9F A6 03                       LDX nt_update_buf_wi
0CFA1 9D 00 03                    STA nt_buffer, X
0CFA4                             ;update `write initial` using `write current`
0CFA4 A6 04                       LDX nt_update_buf_wc
0CFA6 86 03                       STX nt_update_buf_wi
0CFA8                             +:
0CFA8                           
0CFA8 A5 03                       LDA nt_update_buf_wi
0CFAA C9 FB                       CMP #$fb ;minumum space needed for a new entry
0CFAC 90 04                       BCC +
0CFAE A9 01                         LDA #1
0CFB0 85 05                         STA nt_buffer_overflow
0CFB2                             +:
0CFB2                             
0CFB2 A5 05                       LDA nt_buffer_overflow
0CFB4 D0 16                       BNE +
0CFB6                             
0CFB6 A6 03                       LDX nt_update_buf_wi
0CFB8 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0CFBA 9D 00 03                    STA nt_buffer, X
0CFBD                             
0CFBD E8                          INX
0CFBE A9 20                       LDA #$20
0CFC0 9D 00 03                    STA nt_buffer, X
0CFC3                             
0CFC3 E8                          INX
0CFC4 A9 0E                       LDA #$0E
0CFC6 9D 00 03                    STA nt_buffer, X
0CFC9                             
0CFC9 E8                          INX
0CFCA 86 04                       STX nt_update_buf_wc
0CFCC                             
0CFCC                             +:
0CFCC                               write_to_nt_buffer generic_bytes+0
0CFCC A5 05                       LDA nt_buffer_overflow
0CFCE D0 21                       BNE +
0CFD0                             
0CFD0 AD 00 07                    LDA generic_bytes+0
0CFD3 A6 04                       LDX nt_update_buf_wc
0CFD5 9D 00 03                    STA nt_buffer, X
0CFD8 E6 04                       INC nt_update_buf_wc
0CFDA                             
0CFDA                             ;buffer overflow check
0CFDA A5 04                       LDA nt_update_buf_wc
0CFDC C9 FE                       CMP #$FE
0CFDE D0 11                       BNE +
0CFE0 A9 01                         LDA #1
0CFE2 85 05                         STA nt_buffer_overflow
0CFE4                               end_nt_buffer_write
0CFE4                             ;find and write data lentgh
0CFE4 A5 04                       LDA nt_update_buf_wc
0CFE6 E5 03                       SBC nt_update_buf_wi
0CFE8 A6 03                       LDX nt_update_buf_wi
0CFEA 9D 00 03                    STA nt_buffer, X
0CFED                             ;update `write initial` using `write current`
0CFED A6 04                       LDX nt_update_buf_wc
0CFEF 86 03                       STX nt_update_buf_wi
0CFF1                             +:
0CFF1                               write_to_nt_buffer generic_bytes+0
0CFF1 A5 05                       LDA nt_buffer_overflow
0CFF3 D0 21                       BNE +
0CFF5                             
0CFF5 AD 00 07                    LDA generic_bytes+0
0CFF8 A6 04                       LDX nt_update_buf_wc
0CFFA 9D 00 03                    STA nt_buffer, X
0CFFD E6 04                       INC nt_update_buf_wc
0CFFF                             
0CFFF                             ;buffer overflow check
0CFFF A5 04                       LDA nt_update_buf_wc
0D001 C9 FE                       CMP #$FE
0D003 D0 11                       BNE +
0D005 A9 01                         LDA #1
0D007 85 05                         STA nt_buffer_overflow
0D009                               end_nt_buffer_write
0D009                             ;find and write data lentgh
0D009 A5 04                       LDA nt_update_buf_wc
0D00B E5 03                       SBC nt_update_buf_wi
0D00D A6 03                       LDX nt_update_buf_wi
0D00F 9D 00 03                    STA nt_buffer, X
0D012                             ;update `write initial` using `write current`
0D012 A6 04                       LDX nt_update_buf_wc
0D014 86 03                       STX nt_update_buf_wi
0D016                             +:
0D016                               write_to_nt_buffer generic_bytes+0
0D016 A5 05                       LDA nt_buffer_overflow
0D018 D0 21                       BNE +
0D01A                             
0D01A AD 00 07                    LDA generic_bytes+0
0D01D A6 04                       LDX nt_update_buf_wc
0D01F 9D 00 03                    STA nt_buffer, X
0D022 E6 04                       INC nt_update_buf_wc
0D024                             
0D024                             ;buffer overflow check
0D024 A5 04                       LDA nt_update_buf_wc
0D026 C9 FE                       CMP #$FE
0D028 D0 11                       BNE +
0D02A A9 01                         LDA #1
0D02C 85 05                         STA nt_buffer_overflow
0D02E                               end_nt_buffer_write
0D02E                             ;find and write data lentgh
0D02E A5 04                       LDA nt_update_buf_wc
0D030 E5 03                       SBC nt_update_buf_wi
0D032 A6 03                       LDX nt_update_buf_wi
0D034 9D 00 03                    STA nt_buffer, X
0D037                             ;update `write initial` using `write current`
0D037 A6 04                       LDX nt_update_buf_wc
0D039 86 03                       STX nt_update_buf_wi
0D03B                             +:
0D03B                               write_to_nt_buffer generic_bytes+0
0D03B A5 05                       LDA nt_buffer_overflow
0D03D D0 21                       BNE +
0D03F                             
0D03F AD 00 07                    LDA generic_bytes+0
0D042 A6 04                       LDX nt_update_buf_wc
0D044 9D 00 03                    STA nt_buffer, X
0D047 E6 04                       INC nt_update_buf_wc
0D049                             
0D049                             ;buffer overflow check
0D049 A5 04                       LDA nt_update_buf_wc
0D04B C9 FE                       CMP #$FE
0D04D D0 11                       BNE +
0D04F A9 01                         LDA #1
0D051 85 05                         STA nt_buffer_overflow
0D053                               end_nt_buffer_write
0D053                             ;find and write data lentgh
0D053 A5 04                       LDA nt_update_buf_wc
0D055 E5 03                       SBC nt_update_buf_wi
0D057 A6 03                       LDX nt_update_buf_wi
0D059 9D 00 03                    STA nt_buffer, X
0D05C                             ;update `write initial` using `write current`
0D05C A6 04                       LDX nt_update_buf_wc
0D05E 86 03                       STX nt_update_buf_wi
0D060                             +:
0D060                             end_nt_buffer_write
0D060                             ;find and write data lentgh
0D060 A5 04                       LDA nt_update_buf_wc
0D062 E5 03                       SBC nt_update_buf_wi
0D064 A6 03                       LDX nt_update_buf_wi
0D066 9D 00 03                    STA nt_buffer, X
0D069                             ;update `write initial` using `write current`
0D069 A6 04                       LDX nt_update_buf_wc
0D06B 86 03                       STX nt_update_buf_wi
0D06D                             begin_nt_buffer_write #$20, #$0E+#$20
0D06D                             ;if they previous entry is unfinished, finish it
0D06D A5 03                       LDA nt_update_buf_wi
0D06F C5 04                       CMP nt_update_buf_wc
0D071 F0 0D                       BEQ +
0D073                               end_nt_buffer_write
0D073                             ;find and write data lentgh
0D073 A5 04                       LDA nt_update_buf_wc
0D075 E5 03                       SBC nt_update_buf_wi
0D077 A6 03                       LDX nt_update_buf_wi
0D079 9D 00 03                    STA nt_buffer, X
0D07C                             ;update `write initial` using `write current`
0D07C A6 04                       LDX nt_update_buf_wc
0D07E 86 03                       STX nt_update_buf_wi
0D080                             +:
0D080                           
0D080 A5 03                       LDA nt_update_buf_wi
0D082 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D084 90 04                       BCC +
0D086 A9 01                         LDA #1
0D088 85 05                         STA nt_buffer_overflow
0D08A                             +:
0D08A                             
0D08A A5 05                       LDA nt_buffer_overflow
0D08C D0 16                       BNE +
0D08E                             
0D08E A6 03                       LDX nt_update_buf_wi
0D090 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D092 9D 00 03                    STA nt_buffer, X
0D095                             
0D095 E8                          INX
0D096 A9 20                       LDA #$20
0D098 9D 00 03                    STA nt_buffer, X
0D09B                             
0D09B E8                          INX
0D09C A9 2E                       LDA #$0E+#$20
0D09E 9D 00 03                    STA nt_buffer, X
0D0A1                             
0D0A1 E8                          INX
0D0A2 86 04                       STX nt_update_buf_wc
0D0A4                             
0D0A4                             +:
0D0A4                               write_to_nt_buffer generic_bytes+0
0D0A4 A5 05                       LDA nt_buffer_overflow
0D0A6 D0 21                       BNE +
0D0A8                             
0D0A8 AD 00 07                    LDA generic_bytes+0
0D0AB A6 04                       LDX nt_update_buf_wc
0D0AD 9D 00 03                    STA nt_buffer, X
0D0B0 E6 04                       INC nt_update_buf_wc
0D0B2                             
0D0B2                             ;buffer overflow check
0D0B2 A5 04                       LDA nt_update_buf_wc
0D0B4 C9 FE                       CMP #$FE
0D0B6 D0 11                       BNE +
0D0B8 A9 01                         LDA #1
0D0BA 85 05                         STA nt_buffer_overflow
0D0BC                               end_nt_buffer_write
0D0BC                             ;find and write data lentgh
0D0BC A5 04                       LDA nt_update_buf_wc
0D0BE E5 03                       SBC nt_update_buf_wi
0D0C0 A6 03                       LDX nt_update_buf_wi
0D0C2 9D 00 03                    STA nt_buffer, X
0D0C5                             ;update `write initial` using `write current`
0D0C5 A6 04                       LDX nt_update_buf_wc
0D0C7 86 03                       STX nt_update_buf_wi
0D0C9                             +:
0D0C9                               write_to_nt_buffer generic_bytes+0
0D0C9 A5 05                       LDA nt_buffer_overflow
0D0CB D0 21                       BNE +
0D0CD                             
0D0CD AD 00 07                    LDA generic_bytes+0
0D0D0 A6 04                       LDX nt_update_buf_wc
0D0D2 9D 00 03                    STA nt_buffer, X
0D0D5 E6 04                       INC nt_update_buf_wc
0D0D7                             
0D0D7                             ;buffer overflow check
0D0D7 A5 04                       LDA nt_update_buf_wc
0D0D9 C9 FE                       CMP #$FE
0D0DB D0 11                       BNE +
0D0DD A9 01                         LDA #1
0D0DF 85 05                         STA nt_buffer_overflow
0D0E1                               end_nt_buffer_write
0D0E1                             ;find and write data lentgh
0D0E1 A5 04                       LDA nt_update_buf_wc
0D0E3 E5 03                       SBC nt_update_buf_wi
0D0E5 A6 03                       LDX nt_update_buf_wi
0D0E7 9D 00 03                    STA nt_buffer, X
0D0EA                             ;update `write initial` using `write current`
0D0EA A6 04                       LDX nt_update_buf_wc
0D0EC 86 03                       STX nt_update_buf_wi
0D0EE                             +:
0D0EE                               write_to_nt_buffer generic_bytes+0
0D0EE A5 05                       LDA nt_buffer_overflow
0D0F0 D0 21                       BNE +
0D0F2                             
0D0F2 AD 00 07                    LDA generic_bytes+0
0D0F5 A6 04                       LDX nt_update_buf_wc
0D0F7 9D 00 03                    STA nt_buffer, X
0D0FA E6 04                       INC nt_update_buf_wc
0D0FC                             
0D0FC                             ;buffer overflow check
0D0FC A5 04                       LDA nt_update_buf_wc
0D0FE C9 FE                       CMP #$FE
0D100 D0 11                       BNE +
0D102 A9 01                         LDA #1
0D104 85 05                         STA nt_buffer_overflow
0D106                               end_nt_buffer_write
0D106                             ;find and write data lentgh
0D106 A5 04                       LDA nt_update_buf_wc
0D108 E5 03                       SBC nt_update_buf_wi
0D10A A6 03                       LDX nt_update_buf_wi
0D10C 9D 00 03                    STA nt_buffer, X
0D10F                             ;update `write initial` using `write current`
0D10F A6 04                       LDX nt_update_buf_wc
0D111 86 03                       STX nt_update_buf_wi
0D113                             +:
0D113                               write_to_nt_buffer generic_bytes+0
0D113 A5 05                       LDA nt_buffer_overflow
0D115 D0 21                       BNE +
0D117                             
0D117 AD 00 07                    LDA generic_bytes+0
0D11A A6 04                       LDX nt_update_buf_wc
0D11C 9D 00 03                    STA nt_buffer, X
0D11F E6 04                       INC nt_update_buf_wc
0D121                             
0D121                             ;buffer overflow check
0D121 A5 04                       LDA nt_update_buf_wc
0D123 C9 FE                       CMP #$FE
0D125 D0 11                       BNE +
0D127 A9 01                         LDA #1
0D129 85 05                         STA nt_buffer_overflow
0D12B                               end_nt_buffer_write
0D12B                             ;find and write data lentgh
0D12B A5 04                       LDA nt_update_buf_wc
0D12D E5 03                       SBC nt_update_buf_wi
0D12F A6 03                       LDX nt_update_buf_wi
0D131 9D 00 03                    STA nt_buffer, X
0D134                             ;update `write initial` using `write current`
0D134 A6 04                       LDX nt_update_buf_wc
0D136 86 03                       STX nt_update_buf_wi
0D138                             +:
0D138                             end_nt_buffer_write
0D138                             ;find and write data lentgh
0D138 A5 04                       LDA nt_update_buf_wc
0D13A E5 03                       SBC nt_update_buf_wi
0D13C A6 03                       LDX nt_update_buf_wi
0D13E 9D 00 03                    STA nt_buffer, X
0D141                             ;update `write initial` using `write current`
0D141 A6 04                       LDX nt_update_buf_wc
0D143 86 03                       STX nt_update_buf_wi
0D145                             begin_nt_buffer_write #$20, #$0E+(2*#$20)
0D145                             ;if they previous entry is unfinished, finish it
0D145 A5 03                       LDA nt_update_buf_wi
0D147 C5 04                       CMP nt_update_buf_wc
0D149 F0 0D                       BEQ +
0D14B                               end_nt_buffer_write
0D14B                             ;find and write data lentgh
0D14B A5 04                       LDA nt_update_buf_wc
0D14D E5 03                       SBC nt_update_buf_wi
0D14F A6 03                       LDX nt_update_buf_wi
0D151 9D 00 03                    STA nt_buffer, X
0D154                             ;update `write initial` using `write current`
0D154 A6 04                       LDX nt_update_buf_wc
0D156 86 03                       STX nt_update_buf_wi
0D158                             +:
0D158                           
0D158 A5 03                       LDA nt_update_buf_wi
0D15A C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D15C 90 04                       BCC +
0D15E A9 01                         LDA #1
0D160 85 05                         STA nt_buffer_overflow
0D162                             +:
0D162                             
0D162 A5 05                       LDA nt_buffer_overflow
0D164 D0 16                       BNE +
0D166                             
0D166 A6 03                       LDX nt_update_buf_wi
0D168 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D16A 9D 00 03                    STA nt_buffer, X
0D16D                             
0D16D E8                          INX
0D16E A9 20                       LDA #$20
0D170 9D 00 03                    STA nt_buffer, X
0D173                             
0D173 E8                          INX
0D174 A9 4E                       LDA #$0E+(2*#$20)
0D176 9D 00 03                    STA nt_buffer, X
0D179                             
0D179 E8                          INX
0D17A 86 04                       STX nt_update_buf_wc
0D17C                             
0D17C                             +:
0D17C                               write_to_nt_buffer generic_bytes+0
0D17C A5 05                       LDA nt_buffer_overflow
0D17E D0 21                       BNE +
0D180                             
0D180 AD 00 07                    LDA generic_bytes+0
0D183 A6 04                       LDX nt_update_buf_wc
0D185 9D 00 03                    STA nt_buffer, X
0D188 E6 04                       INC nt_update_buf_wc
0D18A                             
0D18A                             ;buffer overflow check
0D18A A5 04                       LDA nt_update_buf_wc
0D18C C9 FE                       CMP #$FE
0D18E D0 11                       BNE +
0D190 A9 01                         LDA #1
0D192 85 05                         STA nt_buffer_overflow
0D194                               end_nt_buffer_write
0D194                             ;find and write data lentgh
0D194 A5 04                       LDA nt_update_buf_wc
0D196 E5 03                       SBC nt_update_buf_wi
0D198 A6 03                       LDX nt_update_buf_wi
0D19A 9D 00 03                    STA nt_buffer, X
0D19D                             ;update `write initial` using `write current`
0D19D A6 04                       LDX nt_update_buf_wc
0D19F 86 03                       STX nt_update_buf_wi
0D1A1                             +:
0D1A1                               write_to_nt_buffer generic_bytes+0
0D1A1 A5 05                       LDA nt_buffer_overflow
0D1A3 D0 21                       BNE +
0D1A5                             
0D1A5 AD 00 07                    LDA generic_bytes+0
0D1A8 A6 04                       LDX nt_update_buf_wc
0D1AA 9D 00 03                    STA nt_buffer, X
0D1AD E6 04                       INC nt_update_buf_wc
0D1AF                             
0D1AF                             ;buffer overflow check
0D1AF A5 04                       LDA nt_update_buf_wc
0D1B1 C9 FE                       CMP #$FE
0D1B3 D0 11                       BNE +
0D1B5 A9 01                         LDA #1
0D1B7 85 05                         STA nt_buffer_overflow
0D1B9                               end_nt_buffer_write
0D1B9                             ;find and write data lentgh
0D1B9 A5 04                       LDA nt_update_buf_wc
0D1BB E5 03                       SBC nt_update_buf_wi
0D1BD A6 03                       LDX nt_update_buf_wi
0D1BF 9D 00 03                    STA nt_buffer, X
0D1C2                             ;update `write initial` using `write current`
0D1C2 A6 04                       LDX nt_update_buf_wc
0D1C4 86 03                       STX nt_update_buf_wi
0D1C6                             +:
0D1C6                               write_to_nt_buffer generic_bytes+0
0D1C6 A5 05                       LDA nt_buffer_overflow
0D1C8 D0 21                       BNE +
0D1CA                             
0D1CA AD 00 07                    LDA generic_bytes+0
0D1CD A6 04                       LDX nt_update_buf_wc
0D1CF 9D 00 03                    STA nt_buffer, X
0D1D2 E6 04                       INC nt_update_buf_wc
0D1D4                             
0D1D4                             ;buffer overflow check
0D1D4 A5 04                       LDA nt_update_buf_wc
0D1D6 C9 FE                       CMP #$FE
0D1D8 D0 11                       BNE +
0D1DA A9 01                         LDA #1
0D1DC 85 05                         STA nt_buffer_overflow
0D1DE                               end_nt_buffer_write
0D1DE                             ;find and write data lentgh
0D1DE A5 04                       LDA nt_update_buf_wc
0D1E0 E5 03                       SBC nt_update_buf_wi
0D1E2 A6 03                       LDX nt_update_buf_wi
0D1E4 9D 00 03                    STA nt_buffer, X
0D1E7                             ;update `write initial` using `write current`
0D1E7 A6 04                       LDX nt_update_buf_wc
0D1E9 86 03                       STX nt_update_buf_wi
0D1EB                             +:
0D1EB                               write_to_nt_buffer generic_bytes+0
0D1EB A5 05                       LDA nt_buffer_overflow
0D1ED D0 21                       BNE +
0D1EF                             
0D1EF AD 00 07                    LDA generic_bytes+0
0D1F2 A6 04                       LDX nt_update_buf_wc
0D1F4 9D 00 03                    STA nt_buffer, X
0D1F7 E6 04                       INC nt_update_buf_wc
0D1F9                             
0D1F9                             ;buffer overflow check
0D1F9 A5 04                       LDA nt_update_buf_wc
0D1FB C9 FE                       CMP #$FE
0D1FD D0 11                       BNE +
0D1FF A9 01                         LDA #1
0D201 85 05                         STA nt_buffer_overflow
0D203                               end_nt_buffer_write
0D203                             ;find and write data lentgh
0D203 A5 04                       LDA nt_update_buf_wc
0D205 E5 03                       SBC nt_update_buf_wi
0D207 A6 03                       LDX nt_update_buf_wi
0D209 9D 00 03                    STA nt_buffer, X
0D20C                             ;update `write initial` using `write current`
0D20C A6 04                       LDX nt_update_buf_wc
0D20E 86 03                       STX nt_update_buf_wi
0D210                             +:
0D210                             end_nt_buffer_write
0D210                             ;find and write data lentgh
0D210 A5 04                       LDA nt_update_buf_wc
0D212 E5 03                       SBC nt_update_buf_wi
0D214 A6 03                       LDX nt_update_buf_wi
0D216 9D 00 03                    STA nt_buffer, X
0D219                             ;update `write initial` using `write current`
0D219 A6 04                       LDX nt_update_buf_wc
0D21B 86 03                       STX nt_update_buf_wi
0D21D                             begin_nt_buffer_write #$20, #$0E+(3*#$20)
0D21D                             ;if they previous entry is unfinished, finish it
0D21D A5 03                       LDA nt_update_buf_wi
0D21F C5 04                       CMP nt_update_buf_wc
0D221 F0 0D                       BEQ +
0D223                               end_nt_buffer_write
0D223                             ;find and write data lentgh
0D223 A5 04                       LDA nt_update_buf_wc
0D225 E5 03                       SBC nt_update_buf_wi
0D227 A6 03                       LDX nt_update_buf_wi
0D229 9D 00 03                    STA nt_buffer, X
0D22C                             ;update `write initial` using `write current`
0D22C A6 04                       LDX nt_update_buf_wc
0D22E 86 03                       STX nt_update_buf_wi
0D230                             +:
0D230                           
0D230 A5 03                       LDA nt_update_buf_wi
0D232 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D234 90 04                       BCC +
0D236 A9 01                         LDA #1
0D238 85 05                         STA nt_buffer_overflow
0D23A                             +:
0D23A                             
0D23A A5 05                       LDA nt_buffer_overflow
0D23C D0 16                       BNE +
0D23E                             
0D23E A6 03                       LDX nt_update_buf_wi
0D240 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D242 9D 00 03                    STA nt_buffer, X
0D245                             
0D245 E8                          INX
0D246 A9 20                       LDA #$20
0D248 9D 00 03                    STA nt_buffer, X
0D24B                             
0D24B E8                          INX
0D24C A9 6E                       LDA #$0E+(3*#$20)
0D24E 9D 00 03                    STA nt_buffer, X
0D251                             
0D251 E8                          INX
0D252 86 04                       STX nt_update_buf_wc
0D254                             
0D254                             +:
0D254                               write_to_nt_buffer generic_bytes+0
0D254 A5 05                       LDA nt_buffer_overflow
0D256 D0 21                       BNE +
0D258                             
0D258 AD 00 07                    LDA generic_bytes+0
0D25B A6 04                       LDX nt_update_buf_wc
0D25D 9D 00 03                    STA nt_buffer, X
0D260 E6 04                       INC nt_update_buf_wc
0D262                             
0D262                             ;buffer overflow check
0D262 A5 04                       LDA nt_update_buf_wc
0D264 C9 FE                       CMP #$FE
0D266 D0 11                       BNE +
0D268 A9 01                         LDA #1
0D26A 85 05                         STA nt_buffer_overflow
0D26C                               end_nt_buffer_write
0D26C                             ;find and write data lentgh
0D26C A5 04                       LDA nt_update_buf_wc
0D26E E5 03                       SBC nt_update_buf_wi
0D270 A6 03                       LDX nt_update_buf_wi
0D272 9D 00 03                    STA nt_buffer, X
0D275                             ;update `write initial` using `write current`
0D275 A6 04                       LDX nt_update_buf_wc
0D277 86 03                       STX nt_update_buf_wi
0D279                             +:
0D279                               write_to_nt_buffer generic_bytes+0
0D279 A5 05                       LDA nt_buffer_overflow
0D27B D0 21                       BNE +
0D27D                             
0D27D AD 00 07                    LDA generic_bytes+0
0D280 A6 04                       LDX nt_update_buf_wc
0D282 9D 00 03                    STA nt_buffer, X
0D285 E6 04                       INC nt_update_buf_wc
0D287                             
0D287                             ;buffer overflow check
0D287 A5 04                       LDA nt_update_buf_wc
0D289 C9 FE                       CMP #$FE
0D28B D0 11                       BNE +
0D28D A9 01                         LDA #1
0D28F 85 05                         STA nt_buffer_overflow
0D291                               end_nt_buffer_write
0D291                             ;find and write data lentgh
0D291 A5 04                       LDA nt_update_buf_wc
0D293 E5 03                       SBC nt_update_buf_wi
0D295 A6 03                       LDX nt_update_buf_wi
0D297 9D 00 03                    STA nt_buffer, X
0D29A                             ;update `write initial` using `write current`
0D29A A6 04                       LDX nt_update_buf_wc
0D29C 86 03                       STX nt_update_buf_wi
0D29E                             +:
0D29E                               write_to_nt_buffer generic_bytes+0
0D29E A5 05                       LDA nt_buffer_overflow
0D2A0 D0 21                       BNE +
0D2A2                             
0D2A2 AD 00 07                    LDA generic_bytes+0
0D2A5 A6 04                       LDX nt_update_buf_wc
0D2A7 9D 00 03                    STA nt_buffer, X
0D2AA E6 04                       INC nt_update_buf_wc
0D2AC                             
0D2AC                             ;buffer overflow check
0D2AC A5 04                       LDA nt_update_buf_wc
0D2AE C9 FE                       CMP #$FE
0D2B0 D0 11                       BNE +
0D2B2 A9 01                         LDA #1
0D2B4 85 05                         STA nt_buffer_overflow
0D2B6                               end_nt_buffer_write
0D2B6                             ;find and write data lentgh
0D2B6 A5 04                       LDA nt_update_buf_wc
0D2B8 E5 03                       SBC nt_update_buf_wi
0D2BA A6 03                       LDX nt_update_buf_wi
0D2BC 9D 00 03                    STA nt_buffer, X
0D2BF                             ;update `write initial` using `write current`
0D2BF A6 04                       LDX nt_update_buf_wc
0D2C1 86 03                       STX nt_update_buf_wi
0D2C3                             +:
0D2C3                               write_to_nt_buffer generic_bytes+0
0D2C3 A5 05                       LDA nt_buffer_overflow
0D2C5 D0 21                       BNE +
0D2C7                             
0D2C7 AD 00 07                    LDA generic_bytes+0
0D2CA A6 04                       LDX nt_update_buf_wc
0D2CC 9D 00 03                    STA nt_buffer, X
0D2CF E6 04                       INC nt_update_buf_wc
0D2D1                             
0D2D1                             ;buffer overflow check
0D2D1 A5 04                       LDA nt_update_buf_wc
0D2D3 C9 FE                       CMP #$FE
0D2D5 D0 11                       BNE +
0D2D7 A9 01                         LDA #1
0D2D9 85 05                         STA nt_buffer_overflow
0D2DB                               end_nt_buffer_write
0D2DB                             ;find and write data lentgh
0D2DB A5 04                       LDA nt_update_buf_wc
0D2DD E5 03                       SBC nt_update_buf_wi
0D2DF A6 03                       LDX nt_update_buf_wi
0D2E1 9D 00 03                    STA nt_buffer, X
0D2E4                             ;update `write initial` using `write current`
0D2E4 A6 04                       LDX nt_update_buf_wc
0D2E6 86 03                       STX nt_update_buf_wi
0D2E8                             +:
0D2E8                             end_nt_buffer_write
0D2E8                             ;find and write data lentgh
0D2E8 A5 04                       LDA nt_update_buf_wc
0D2EA E5 03                       SBC nt_update_buf_wi
0D2EC A6 03                       LDX nt_update_buf_wi
0D2EE 9D 00 03                    STA nt_buffer, X
0D2F1                             ;update `write initial` using `write current`
0D2F1 A6 04                       LDX nt_update_buf_wc
0D2F3 86 03                       STX nt_update_buf_wi
0D2F5                            
0D2F5                             ; check leftward
0D2F5 A0 37                       LDY #$37 ;default fill (floor)
0D2F7                             ; check if at left
0D2F7 A9 0F                       LDA #%00001111
0D2F9 2D 01 06                    AND player_room
0D2FC C9 00                       CMP #%00000000
0D2FE D0 02                       BNE +
0D300 A0 36                         LDY #$36
0D302                             +:
0D302                             ; check if next room left exists
0D302 AD 01 06                    LDA player_room
0D305 38                          SEC
0D306 E9 01                       SBC #%00000001
0D308 AA                          TAX
0D309 8E FF 07                    STX generic_bytes+255
0D30C BD 00 04                    LDA dungeon_map, X
0D30F C9 00                       CMP #$00
0D311 D0 02                       BNE +
0D313 A0 36                         LDY #$36
0D315                             +:
0D315                             
0D315                             ; draw it
0D315 8C 00 07                    STY generic_bytes+0
0D318                             begin_nt_buffer_write #$21, #$40
0D318                             ;if they previous entry is unfinished, finish it
0D318 A5 03                       LDA nt_update_buf_wi
0D31A C5 04                       CMP nt_update_buf_wc
0D31C F0 0D                       BEQ +
0D31E                               end_nt_buffer_write
0D31E                             ;find and write data lentgh
0D31E A5 04                       LDA nt_update_buf_wc
0D320 E5 03                       SBC nt_update_buf_wi
0D322 A6 03                       LDX nt_update_buf_wi
0D324 9D 00 03                    STA nt_buffer, X
0D327                             ;update `write initial` using `write current`
0D327 A6 04                       LDX nt_update_buf_wc
0D329 86 03                       STX nt_update_buf_wi
0D32B                             +:
0D32B                           
0D32B A5 03                       LDA nt_update_buf_wi
0D32D C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D32F 90 04                       BCC +
0D331 A9 01                         LDA #1
0D333 85 05                         STA nt_buffer_overflow
0D335                             +:
0D335                             
0D335 A5 05                       LDA nt_buffer_overflow
0D337 D0 16                       BNE +
0D339                             
0D339 A6 03                       LDX nt_update_buf_wi
0D33B A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D33D 9D 00 03                    STA nt_buffer, X
0D340                             
0D340 E8                          INX
0D341 A9 21                       LDA #$21
0D343 9D 00 03                    STA nt_buffer, X
0D346                             
0D346 E8                          INX
0D347 A9 40                       LDA #$40
0D349 9D 00 03                    STA nt_buffer, X
0D34C                             
0D34C E8                          INX
0D34D 86 04                       STX nt_update_buf_wc
0D34F                             
0D34F                             +:
0D34F                               write_to_nt_buffer generic_bytes+0
0D34F A5 05                       LDA nt_buffer_overflow
0D351 D0 21                       BNE +
0D353                             
0D353 AD 00 07                    LDA generic_bytes+0
0D356 A6 04                       LDX nt_update_buf_wc
0D358 9D 00 03                    STA nt_buffer, X
0D35B E6 04                       INC nt_update_buf_wc
0D35D                             
0D35D                             ;buffer overflow check
0D35D A5 04                       LDA nt_update_buf_wc
0D35F C9 FE                       CMP #$FE
0D361 D0 11                       BNE +
0D363 A9 01                         LDA #1
0D365 85 05                         STA nt_buffer_overflow
0D367                               end_nt_buffer_write
0D367                             ;find and write data lentgh
0D367 A5 04                       LDA nt_update_buf_wc
0D369 E5 03                       SBC nt_update_buf_wi
0D36B A6 03                       LDX nt_update_buf_wi
0D36D 9D 00 03                    STA nt_buffer, X
0D370                             ;update `write initial` using `write current`
0D370 A6 04                       LDX nt_update_buf_wc
0D372 86 03                       STX nt_update_buf_wi
0D374                             +:
0D374                               write_to_nt_buffer generic_bytes+0
0D374 A5 05                       LDA nt_buffer_overflow
0D376 D0 21                       BNE +
0D378                             
0D378 AD 00 07                    LDA generic_bytes+0
0D37B A6 04                       LDX nt_update_buf_wc
0D37D 9D 00 03                    STA nt_buffer, X
0D380 E6 04                       INC nt_update_buf_wc
0D382                             
0D382                             ;buffer overflow check
0D382 A5 04                       LDA nt_update_buf_wc
0D384 C9 FE                       CMP #$FE
0D386 D0 11                       BNE +
0D388 A9 01                         LDA #1
0D38A 85 05                         STA nt_buffer_overflow
0D38C                               end_nt_buffer_write
0D38C                             ;find and write data lentgh
0D38C A5 04                       LDA nt_update_buf_wc
0D38E E5 03                       SBC nt_update_buf_wi
0D390 A6 03                       LDX nt_update_buf_wi
0D392 9D 00 03                    STA nt_buffer, X
0D395                             ;update `write initial` using `write current`
0D395 A6 04                       LDX nt_update_buf_wc
0D397 86 03                       STX nt_update_buf_wi
0D399                             +:
0D399                               write_to_nt_buffer generic_bytes+0
0D399 A5 05                       LDA nt_buffer_overflow
0D39B D0 21                       BNE +
0D39D                             
0D39D AD 00 07                    LDA generic_bytes+0
0D3A0 A6 04                       LDX nt_update_buf_wc
0D3A2 9D 00 03                    STA nt_buffer, X
0D3A5 E6 04                       INC nt_update_buf_wc
0D3A7                             
0D3A7                             ;buffer overflow check
0D3A7 A5 04                       LDA nt_update_buf_wc
0D3A9 C9 FE                       CMP #$FE
0D3AB D0 11                       BNE +
0D3AD A9 01                         LDA #1
0D3AF 85 05                         STA nt_buffer_overflow
0D3B1                               end_nt_buffer_write
0D3B1                             ;find and write data lentgh
0D3B1 A5 04                       LDA nt_update_buf_wc
0D3B3 E5 03                       SBC nt_update_buf_wi
0D3B5 A6 03                       LDX nt_update_buf_wi
0D3B7 9D 00 03                    STA nt_buffer, X
0D3BA                             ;update `write initial` using `write current`
0D3BA A6 04                       LDX nt_update_buf_wc
0D3BC 86 03                       STX nt_update_buf_wi
0D3BE                             +:
0D3BE                               write_to_nt_buffer generic_bytes+0
0D3BE A5 05                       LDA nt_buffer_overflow
0D3C0 D0 21                       BNE +
0D3C2                             
0D3C2 AD 00 07                    LDA generic_bytes+0
0D3C5 A6 04                       LDX nt_update_buf_wc
0D3C7 9D 00 03                    STA nt_buffer, X
0D3CA E6 04                       INC nt_update_buf_wc
0D3CC                             
0D3CC                             ;buffer overflow check
0D3CC A5 04                       LDA nt_update_buf_wc
0D3CE C9 FE                       CMP #$FE
0D3D0 D0 11                       BNE +
0D3D2 A9 01                         LDA #1
0D3D4 85 05                         STA nt_buffer_overflow
0D3D6                               end_nt_buffer_write
0D3D6                             ;find and write data lentgh
0D3D6 A5 04                       LDA nt_update_buf_wc
0D3D8 E5 03                       SBC nt_update_buf_wi
0D3DA A6 03                       LDX nt_update_buf_wi
0D3DC 9D 00 03                    STA nt_buffer, X
0D3DF                             ;update `write initial` using `write current`
0D3DF A6 04                       LDX nt_update_buf_wc
0D3E1 86 03                       STX nt_update_buf_wi
0D3E3                             +:
0D3E3                             end_nt_buffer_write
0D3E3                             ;find and write data lentgh
0D3E3 A5 04                       LDA nt_update_buf_wc
0D3E5 E5 03                       SBC nt_update_buf_wi
0D3E7 A6 03                       LDX nt_update_buf_wi
0D3E9 9D 00 03                    STA nt_buffer, X
0D3EC                             ;update `write initial` using `write current`
0D3EC A6 04                       LDX nt_update_buf_wc
0D3EE 86 03                       STX nt_update_buf_wi
0D3F0                             begin_nt_buffer_write #$21, #$40+#$20
0D3F0                             ;if they previous entry is unfinished, finish it
0D3F0 A5 03                       LDA nt_update_buf_wi
0D3F2 C5 04                       CMP nt_update_buf_wc
0D3F4 F0 0D                       BEQ +
0D3F6                               end_nt_buffer_write
0D3F6                             ;find and write data lentgh
0D3F6 A5 04                       LDA nt_update_buf_wc
0D3F8 E5 03                       SBC nt_update_buf_wi
0D3FA A6 03                       LDX nt_update_buf_wi
0D3FC 9D 00 03                    STA nt_buffer, X
0D3FF                             ;update `write initial` using `write current`
0D3FF A6 04                       LDX nt_update_buf_wc
0D401 86 03                       STX nt_update_buf_wi
0D403                             +:
0D403                           
0D403 A5 03                       LDA nt_update_buf_wi
0D405 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D407 90 04                       BCC +
0D409 A9 01                         LDA #1
0D40B 85 05                         STA nt_buffer_overflow
0D40D                             +:
0D40D                             
0D40D A5 05                       LDA nt_buffer_overflow
0D40F D0 16                       BNE +
0D411                             
0D411 A6 03                       LDX nt_update_buf_wi
0D413 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D415 9D 00 03                    STA nt_buffer, X
0D418                             
0D418 E8                          INX
0D419 A9 21                       LDA #$21
0D41B 9D 00 03                    STA nt_buffer, X
0D41E                             
0D41E E8                          INX
0D41F A9 60                       LDA #$40+#$20
0D421 9D 00 03                    STA nt_buffer, X
0D424                             
0D424 E8                          INX
0D425 86 04                       STX nt_update_buf_wc
0D427                             
0D427                             +:
0D427                               write_to_nt_buffer generic_bytes+0
0D427 A5 05                       LDA nt_buffer_overflow
0D429 D0 21                       BNE +
0D42B                             
0D42B AD 00 07                    LDA generic_bytes+0
0D42E A6 04                       LDX nt_update_buf_wc
0D430 9D 00 03                    STA nt_buffer, X
0D433 E6 04                       INC nt_update_buf_wc
0D435                             
0D435                             ;buffer overflow check
0D435 A5 04                       LDA nt_update_buf_wc
0D437 C9 FE                       CMP #$FE
0D439 D0 11                       BNE +
0D43B A9 01                         LDA #1
0D43D 85 05                         STA nt_buffer_overflow
0D43F                               end_nt_buffer_write
0D43F                             ;find and write data lentgh
0D43F A5 04                       LDA nt_update_buf_wc
0D441 E5 03                       SBC nt_update_buf_wi
0D443 A6 03                       LDX nt_update_buf_wi
0D445 9D 00 03                    STA nt_buffer, X
0D448                             ;update `write initial` using `write current`
0D448 A6 04                       LDX nt_update_buf_wc
0D44A 86 03                       STX nt_update_buf_wi
0D44C                             +:
0D44C                               write_to_nt_buffer generic_bytes+0
0D44C A5 05                       LDA nt_buffer_overflow
0D44E D0 21                       BNE +
0D450                             
0D450 AD 00 07                    LDA generic_bytes+0
0D453 A6 04                       LDX nt_update_buf_wc
0D455 9D 00 03                    STA nt_buffer, X
0D458 E6 04                       INC nt_update_buf_wc
0D45A                             
0D45A                             ;buffer overflow check
0D45A A5 04                       LDA nt_update_buf_wc
0D45C C9 FE                       CMP #$FE
0D45E D0 11                       BNE +
0D460 A9 01                         LDA #1
0D462 85 05                         STA nt_buffer_overflow
0D464                               end_nt_buffer_write
0D464                             ;find and write data lentgh
0D464 A5 04                       LDA nt_update_buf_wc
0D466 E5 03                       SBC nt_update_buf_wi
0D468 A6 03                       LDX nt_update_buf_wi
0D46A 9D 00 03                    STA nt_buffer, X
0D46D                             ;update `write initial` using `write current`
0D46D A6 04                       LDX nt_update_buf_wc
0D46F 86 03                       STX nt_update_buf_wi
0D471                             +:
0D471                               write_to_nt_buffer generic_bytes+0
0D471 A5 05                       LDA nt_buffer_overflow
0D473 D0 21                       BNE +
0D475                             
0D475 AD 00 07                    LDA generic_bytes+0
0D478 A6 04                       LDX nt_update_buf_wc
0D47A 9D 00 03                    STA nt_buffer, X
0D47D E6 04                       INC nt_update_buf_wc
0D47F                             
0D47F                             ;buffer overflow check
0D47F A5 04                       LDA nt_update_buf_wc
0D481 C9 FE                       CMP #$FE
0D483 D0 11                       BNE +
0D485 A9 01                         LDA #1
0D487 85 05                         STA nt_buffer_overflow
0D489                               end_nt_buffer_write
0D489                             ;find and write data lentgh
0D489 A5 04                       LDA nt_update_buf_wc
0D48B E5 03                       SBC nt_update_buf_wi
0D48D A6 03                       LDX nt_update_buf_wi
0D48F 9D 00 03                    STA nt_buffer, X
0D492                             ;update `write initial` using `write current`
0D492 A6 04                       LDX nt_update_buf_wc
0D494 86 03                       STX nt_update_buf_wi
0D496                             +:
0D496                               write_to_nt_buffer generic_bytes+0
0D496 A5 05                       LDA nt_buffer_overflow
0D498 D0 21                       BNE +
0D49A                             
0D49A AD 00 07                    LDA generic_bytes+0
0D49D A6 04                       LDX nt_update_buf_wc
0D49F 9D 00 03                    STA nt_buffer, X
0D4A2 E6 04                       INC nt_update_buf_wc
0D4A4                             
0D4A4                             ;buffer overflow check
0D4A4 A5 04                       LDA nt_update_buf_wc
0D4A6 C9 FE                       CMP #$FE
0D4A8 D0 11                       BNE +
0D4AA A9 01                         LDA #1
0D4AC 85 05                         STA nt_buffer_overflow
0D4AE                               end_nt_buffer_write
0D4AE                             ;find and write data lentgh
0D4AE A5 04                       LDA nt_update_buf_wc
0D4B0 E5 03                       SBC nt_update_buf_wi
0D4B2 A6 03                       LDX nt_update_buf_wi
0D4B4 9D 00 03                    STA nt_buffer, X
0D4B7                             ;update `write initial` using `write current`
0D4B7 A6 04                       LDX nt_update_buf_wc
0D4B9 86 03                       STX nt_update_buf_wi
0D4BB                             +:
0D4BB                             end_nt_buffer_write
0D4BB                             ;find and write data lentgh
0D4BB A5 04                       LDA nt_update_buf_wc
0D4BD E5 03                       SBC nt_update_buf_wi
0D4BF A6 03                       LDX nt_update_buf_wi
0D4C1 9D 00 03                    STA nt_buffer, X
0D4C4                             ;update `write initial` using `write current`
0D4C4 A6 04                       LDX nt_update_buf_wc
0D4C6 86 03                       STX nt_update_buf_wi
0D4C8                             begin_nt_buffer_write #$21, #$40+(2*#$20)
0D4C8                             ;if they previous entry is unfinished, finish it
0D4C8 A5 03                       LDA nt_update_buf_wi
0D4CA C5 04                       CMP nt_update_buf_wc
0D4CC F0 0D                       BEQ +
0D4CE                               end_nt_buffer_write
0D4CE                             ;find and write data lentgh
0D4CE A5 04                       LDA nt_update_buf_wc
0D4D0 E5 03                       SBC nt_update_buf_wi
0D4D2 A6 03                       LDX nt_update_buf_wi
0D4D4 9D 00 03                    STA nt_buffer, X
0D4D7                             ;update `write initial` using `write current`
0D4D7 A6 04                       LDX nt_update_buf_wc
0D4D9 86 03                       STX nt_update_buf_wi
0D4DB                             +:
0D4DB                           
0D4DB A5 03                       LDA nt_update_buf_wi
0D4DD C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D4DF 90 04                       BCC +
0D4E1 A9 01                         LDA #1
0D4E3 85 05                         STA nt_buffer_overflow
0D4E5                             +:
0D4E5                             
0D4E5 A5 05                       LDA nt_buffer_overflow
0D4E7 D0 16                       BNE +
0D4E9                             
0D4E9 A6 03                       LDX nt_update_buf_wi
0D4EB A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D4ED 9D 00 03                    STA nt_buffer, X
0D4F0                             
0D4F0 E8                          INX
0D4F1 A9 21                       LDA #$21
0D4F3 9D 00 03                    STA nt_buffer, X
0D4F6                             
0D4F6 E8                          INX
0D4F7 A9 80                       LDA #$40+(2*#$20)
0D4F9 9D 00 03                    STA nt_buffer, X
0D4FC                             
0D4FC E8                          INX
0D4FD 86 04                       STX nt_update_buf_wc
0D4FF                             
0D4FF                             +:
0D4FF                               write_to_nt_buffer generic_bytes+0
0D4FF A5 05                       LDA nt_buffer_overflow
0D501 D0 21                       BNE +
0D503                             
0D503 AD 00 07                    LDA generic_bytes+0
0D506 A6 04                       LDX nt_update_buf_wc
0D508 9D 00 03                    STA nt_buffer, X
0D50B E6 04                       INC nt_update_buf_wc
0D50D                             
0D50D                             ;buffer overflow check
0D50D A5 04                       LDA nt_update_buf_wc
0D50F C9 FE                       CMP #$FE
0D511 D0 11                       BNE +
0D513 A9 01                         LDA #1
0D515 85 05                         STA nt_buffer_overflow
0D517                               end_nt_buffer_write
0D517                             ;find and write data lentgh
0D517 A5 04                       LDA nt_update_buf_wc
0D519 E5 03                       SBC nt_update_buf_wi
0D51B A6 03                       LDX nt_update_buf_wi
0D51D 9D 00 03                    STA nt_buffer, X
0D520                             ;update `write initial` using `write current`
0D520 A6 04                       LDX nt_update_buf_wc
0D522 86 03                       STX nt_update_buf_wi
0D524                             +:
0D524                               write_to_nt_buffer generic_bytes+0
0D524 A5 05                       LDA nt_buffer_overflow
0D526 D0 21                       BNE +
0D528                             
0D528 AD 00 07                    LDA generic_bytes+0
0D52B A6 04                       LDX nt_update_buf_wc
0D52D 9D 00 03                    STA nt_buffer, X
0D530 E6 04                       INC nt_update_buf_wc
0D532                             
0D532                             ;buffer overflow check
0D532 A5 04                       LDA nt_update_buf_wc
0D534 C9 FE                       CMP #$FE
0D536 D0 11                       BNE +
0D538 A9 01                         LDA #1
0D53A 85 05                         STA nt_buffer_overflow
0D53C                               end_nt_buffer_write
0D53C                             ;find and write data lentgh
0D53C A5 04                       LDA nt_update_buf_wc
0D53E E5 03                       SBC nt_update_buf_wi
0D540 A6 03                       LDX nt_update_buf_wi
0D542 9D 00 03                    STA nt_buffer, X
0D545                             ;update `write initial` using `write current`
0D545 A6 04                       LDX nt_update_buf_wc
0D547 86 03                       STX nt_update_buf_wi
0D549                             +:
0D549                               write_to_nt_buffer generic_bytes+0
0D549 A5 05                       LDA nt_buffer_overflow
0D54B D0 21                       BNE +
0D54D                             
0D54D AD 00 07                    LDA generic_bytes+0
0D550 A6 04                       LDX nt_update_buf_wc
0D552 9D 00 03                    STA nt_buffer, X
0D555 E6 04                       INC nt_update_buf_wc
0D557                             
0D557                             ;buffer overflow check
0D557 A5 04                       LDA nt_update_buf_wc
0D559 C9 FE                       CMP #$FE
0D55B D0 11                       BNE +
0D55D A9 01                         LDA #1
0D55F 85 05                         STA nt_buffer_overflow
0D561                               end_nt_buffer_write
0D561                             ;find and write data lentgh
0D561 A5 04                       LDA nt_update_buf_wc
0D563 E5 03                       SBC nt_update_buf_wi
0D565 A6 03                       LDX nt_update_buf_wi
0D567 9D 00 03                    STA nt_buffer, X
0D56A                             ;update `write initial` using `write current`
0D56A A6 04                       LDX nt_update_buf_wc
0D56C 86 03                       STX nt_update_buf_wi
0D56E                             +:
0D56E                               write_to_nt_buffer generic_bytes+0
0D56E A5 05                       LDA nt_buffer_overflow
0D570 D0 21                       BNE +
0D572                             
0D572 AD 00 07                    LDA generic_bytes+0
0D575 A6 04                       LDX nt_update_buf_wc
0D577 9D 00 03                    STA nt_buffer, X
0D57A E6 04                       INC nt_update_buf_wc
0D57C                             
0D57C                             ;buffer overflow check
0D57C A5 04                       LDA nt_update_buf_wc
0D57E C9 FE                       CMP #$FE
0D580 D0 11                       BNE +
0D582 A9 01                         LDA #1
0D584 85 05                         STA nt_buffer_overflow
0D586                               end_nt_buffer_write
0D586                             ;find and write data lentgh
0D586 A5 04                       LDA nt_update_buf_wc
0D588 E5 03                       SBC nt_update_buf_wi
0D58A A6 03                       LDX nt_update_buf_wi
0D58C 9D 00 03                    STA nt_buffer, X
0D58F                             ;update `write initial` using `write current`
0D58F A6 04                       LDX nt_update_buf_wc
0D591 86 03                       STX nt_update_buf_wi
0D593                             +:
0D593                             end_nt_buffer_write
0D593                             ;find and write data lentgh
0D593 A5 04                       LDA nt_update_buf_wc
0D595 E5 03                       SBC nt_update_buf_wi
0D597 A6 03                       LDX nt_update_buf_wi
0D599 9D 00 03                    STA nt_buffer, X
0D59C                             ;update `write initial` using `write current`
0D59C A6 04                       LDX nt_update_buf_wc
0D59E 86 03                       STX nt_update_buf_wi
0D5A0                             begin_nt_buffer_write #$21, #$40+(3*#$20)
0D5A0                             ;if they previous entry is unfinished, finish it
0D5A0 A5 03                       LDA nt_update_buf_wi
0D5A2 C5 04                       CMP nt_update_buf_wc
0D5A4 F0 0D                       BEQ +
0D5A6                               end_nt_buffer_write
0D5A6                             ;find and write data lentgh
0D5A6 A5 04                       LDA nt_update_buf_wc
0D5A8 E5 03                       SBC nt_update_buf_wi
0D5AA A6 03                       LDX nt_update_buf_wi
0D5AC 9D 00 03                    STA nt_buffer, X
0D5AF                             ;update `write initial` using `write current`
0D5AF A6 04                       LDX nt_update_buf_wc
0D5B1 86 03                       STX nt_update_buf_wi
0D5B3                             +:
0D5B3                           
0D5B3 A5 03                       LDA nt_update_buf_wi
0D5B5 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D5B7 90 04                       BCC +
0D5B9 A9 01                         LDA #1
0D5BB 85 05                         STA nt_buffer_overflow
0D5BD                             +:
0D5BD                             
0D5BD A5 05                       LDA nt_buffer_overflow
0D5BF D0 16                       BNE +
0D5C1                             
0D5C1 A6 03                       LDX nt_update_buf_wi
0D5C3 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D5C5 9D 00 03                    STA nt_buffer, X
0D5C8                             
0D5C8 E8                          INX
0D5C9 A9 21                       LDA #$21
0D5CB 9D 00 03                    STA nt_buffer, X
0D5CE                             
0D5CE E8                          INX
0D5CF A9 A0                       LDA #$40+(3*#$20)
0D5D1 9D 00 03                    STA nt_buffer, X
0D5D4                             
0D5D4 E8                          INX
0D5D5 86 04                       STX nt_update_buf_wc
0D5D7                             
0D5D7                             +:
0D5D7                               write_to_nt_buffer generic_bytes+0
0D5D7 A5 05                       LDA nt_buffer_overflow
0D5D9 D0 21                       BNE +
0D5DB                             
0D5DB AD 00 07                    LDA generic_bytes+0
0D5DE A6 04                       LDX nt_update_buf_wc
0D5E0 9D 00 03                    STA nt_buffer, X
0D5E3 E6 04                       INC nt_update_buf_wc
0D5E5                             
0D5E5                             ;buffer overflow check
0D5E5 A5 04                       LDA nt_update_buf_wc
0D5E7 C9 FE                       CMP #$FE
0D5E9 D0 11                       BNE +
0D5EB A9 01                         LDA #1
0D5ED 85 05                         STA nt_buffer_overflow
0D5EF                               end_nt_buffer_write
0D5EF                             ;find and write data lentgh
0D5EF A5 04                       LDA nt_update_buf_wc
0D5F1 E5 03                       SBC nt_update_buf_wi
0D5F3 A6 03                       LDX nt_update_buf_wi
0D5F5 9D 00 03                    STA nt_buffer, X
0D5F8                             ;update `write initial` using `write current`
0D5F8 A6 04                       LDX nt_update_buf_wc
0D5FA 86 03                       STX nt_update_buf_wi
0D5FC                             +:
0D5FC                               write_to_nt_buffer generic_bytes+0
0D5FC A5 05                       LDA nt_buffer_overflow
0D5FE D0 21                       BNE +
0D600                             
0D600 AD 00 07                    LDA generic_bytes+0
0D603 A6 04                       LDX nt_update_buf_wc
0D605 9D 00 03                    STA nt_buffer, X
0D608 E6 04                       INC nt_update_buf_wc
0D60A                             
0D60A                             ;buffer overflow check
0D60A A5 04                       LDA nt_update_buf_wc
0D60C C9 FE                       CMP #$FE
0D60E D0 11                       BNE +
0D610 A9 01                         LDA #1
0D612 85 05                         STA nt_buffer_overflow
0D614                               end_nt_buffer_write
0D614                             ;find and write data lentgh
0D614 A5 04                       LDA nt_update_buf_wc
0D616 E5 03                       SBC nt_update_buf_wi
0D618 A6 03                       LDX nt_update_buf_wi
0D61A 9D 00 03                    STA nt_buffer, X
0D61D                             ;update `write initial` using `write current`
0D61D A6 04                       LDX nt_update_buf_wc
0D61F 86 03                       STX nt_update_buf_wi
0D621                             +:
0D621                               write_to_nt_buffer generic_bytes+0
0D621 A5 05                       LDA nt_buffer_overflow
0D623 D0 21                       BNE +
0D625                             
0D625 AD 00 07                    LDA generic_bytes+0
0D628 A6 04                       LDX nt_update_buf_wc
0D62A 9D 00 03                    STA nt_buffer, X
0D62D E6 04                       INC nt_update_buf_wc
0D62F                             
0D62F                             ;buffer overflow check
0D62F A5 04                       LDA nt_update_buf_wc
0D631 C9 FE                       CMP #$FE
0D633 D0 11                       BNE +
0D635 A9 01                         LDA #1
0D637 85 05                         STA nt_buffer_overflow
0D639                               end_nt_buffer_write
0D639                             ;find and write data lentgh
0D639 A5 04                       LDA nt_update_buf_wc
0D63B E5 03                       SBC nt_update_buf_wi
0D63D A6 03                       LDX nt_update_buf_wi
0D63F 9D 00 03                    STA nt_buffer, X
0D642                             ;update `write initial` using `write current`
0D642 A6 04                       LDX nt_update_buf_wc
0D644 86 03                       STX nt_update_buf_wi
0D646                             +:
0D646                               write_to_nt_buffer generic_bytes+0
0D646 A5 05                       LDA nt_buffer_overflow
0D648 D0 21                       BNE +
0D64A                             
0D64A AD 00 07                    LDA generic_bytes+0
0D64D A6 04                       LDX nt_update_buf_wc
0D64F 9D 00 03                    STA nt_buffer, X
0D652 E6 04                       INC nt_update_buf_wc
0D654                             
0D654                             ;buffer overflow check
0D654 A5 04                       LDA nt_update_buf_wc
0D656 C9 FE                       CMP #$FE
0D658 D0 11                       BNE +
0D65A A9 01                         LDA #1
0D65C 85 05                         STA nt_buffer_overflow
0D65E                               end_nt_buffer_write
0D65E                             ;find and write data lentgh
0D65E A5 04                       LDA nt_update_buf_wc
0D660 E5 03                       SBC nt_update_buf_wi
0D662 A6 03                       LDX nt_update_buf_wi
0D664 9D 00 03                    STA nt_buffer, X
0D667                             ;update `write initial` using `write current`
0D667 A6 04                       LDX nt_update_buf_wc
0D669 86 03                       STX nt_update_buf_wi
0D66B                             +:
0D66B                             end_nt_buffer_write
0D66B                             ;find and write data lentgh
0D66B A5 04                       LDA nt_update_buf_wc
0D66D E5 03                       SBC nt_update_buf_wi
0D66F A6 03                       LDX nt_update_buf_wi
0D671 9D 00 03                    STA nt_buffer, X
0D674                             ;update `write initial` using `write current`
0D674 A6 04                       LDX nt_update_buf_wc
0D676 86 03                       STX nt_update_buf_wi
0D678                            
0D678                             ; check rightward
0D678 A0 37                       LDY #$37 ;default fill (floor)
0D67A                             ; check if at right
0D67A A9 0F                       LDA #%00001111
0D67C 2D 01 06                    AND player_room
0D67F C9 0F                       CMP #%00001111
0D681 D0 02                       BNE +
0D683 A0 36                         LDY #$36
0D685                             +:
0D685                             ; check if next room right exists
0D685 AD 01 06                    LDA player_room
0D688 18                          CLC
0D689 69 01                       ADC #%00000001
0D68B AA                          TAX
0D68C 8E FE 07                    STX generic_bytes+254
0D68F BD 00 04                    LDA dungeon_map, X
0D692 C9 00                       CMP #$00
0D694 D0 02                       BNE +
0D696 A0 36                         LDY #$36
0D698                             +:
0D698                             
0D698                             ; draw it
0D698 8C 00 07                    STY generic_bytes+0
0D69B                             begin_nt_buffer_write #$21, #$5C
0D69B                             ;if they previous entry is unfinished, finish it
0D69B A5 03                       LDA nt_update_buf_wi
0D69D C5 04                       CMP nt_update_buf_wc
0D69F F0 0D                       BEQ +
0D6A1                               end_nt_buffer_write
0D6A1                             ;find and write data lentgh
0D6A1 A5 04                       LDA nt_update_buf_wc
0D6A3 E5 03                       SBC nt_update_buf_wi
0D6A5 A6 03                       LDX nt_update_buf_wi
0D6A7 9D 00 03                    STA nt_buffer, X
0D6AA                             ;update `write initial` using `write current`
0D6AA A6 04                       LDX nt_update_buf_wc
0D6AC 86 03                       STX nt_update_buf_wi
0D6AE                             +:
0D6AE                           
0D6AE A5 03                       LDA nt_update_buf_wi
0D6B0 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D6B2 90 04                       BCC +
0D6B4 A9 01                         LDA #1
0D6B6 85 05                         STA nt_buffer_overflow
0D6B8                             +:
0D6B8                             
0D6B8 A5 05                       LDA nt_buffer_overflow
0D6BA D0 16                       BNE +
0D6BC                             
0D6BC A6 03                       LDX nt_update_buf_wi
0D6BE A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D6C0 9D 00 03                    STA nt_buffer, X
0D6C3                             
0D6C3 E8                          INX
0D6C4 A9 21                       LDA #$21
0D6C6 9D 00 03                    STA nt_buffer, X
0D6C9                             
0D6C9 E8                          INX
0D6CA A9 5C                       LDA #$5C
0D6CC 9D 00 03                    STA nt_buffer, X
0D6CF                             
0D6CF E8                          INX
0D6D0 86 04                       STX nt_update_buf_wc
0D6D2                             
0D6D2                             +:
0D6D2                               write_to_nt_buffer generic_bytes+0
0D6D2 A5 05                       LDA nt_buffer_overflow
0D6D4 D0 21                       BNE +
0D6D6                             
0D6D6 AD 00 07                    LDA generic_bytes+0
0D6D9 A6 04                       LDX nt_update_buf_wc
0D6DB 9D 00 03                    STA nt_buffer, X
0D6DE E6 04                       INC nt_update_buf_wc
0D6E0                             
0D6E0                             ;buffer overflow check
0D6E0 A5 04                       LDA nt_update_buf_wc
0D6E2 C9 FE                       CMP #$FE
0D6E4 D0 11                       BNE +
0D6E6 A9 01                         LDA #1
0D6E8 85 05                         STA nt_buffer_overflow
0D6EA                               end_nt_buffer_write
0D6EA                             ;find and write data lentgh
0D6EA A5 04                       LDA nt_update_buf_wc
0D6EC E5 03                       SBC nt_update_buf_wi
0D6EE A6 03                       LDX nt_update_buf_wi
0D6F0 9D 00 03                    STA nt_buffer, X
0D6F3                             ;update `write initial` using `write current`
0D6F3 A6 04                       LDX nt_update_buf_wc
0D6F5 86 03                       STX nt_update_buf_wi
0D6F7                             +:
0D6F7                               write_to_nt_buffer generic_bytes+0
0D6F7 A5 05                       LDA nt_buffer_overflow
0D6F9 D0 21                       BNE +
0D6FB                             
0D6FB AD 00 07                    LDA generic_bytes+0
0D6FE A6 04                       LDX nt_update_buf_wc
0D700 9D 00 03                    STA nt_buffer, X
0D703 E6 04                       INC nt_update_buf_wc
0D705                             
0D705                             ;buffer overflow check
0D705 A5 04                       LDA nt_update_buf_wc
0D707 C9 FE                       CMP #$FE
0D709 D0 11                       BNE +
0D70B A9 01                         LDA #1
0D70D 85 05                         STA nt_buffer_overflow
0D70F                               end_nt_buffer_write
0D70F                             ;find and write data lentgh
0D70F A5 04                       LDA nt_update_buf_wc
0D711 E5 03                       SBC nt_update_buf_wi
0D713 A6 03                       LDX nt_update_buf_wi
0D715 9D 00 03                    STA nt_buffer, X
0D718                             ;update `write initial` using `write current`
0D718 A6 04                       LDX nt_update_buf_wc
0D71A 86 03                       STX nt_update_buf_wi
0D71C                             +:
0D71C                               write_to_nt_buffer generic_bytes+0
0D71C A5 05                       LDA nt_buffer_overflow
0D71E D0 21                       BNE +
0D720                             
0D720 AD 00 07                    LDA generic_bytes+0
0D723 A6 04                       LDX nt_update_buf_wc
0D725 9D 00 03                    STA nt_buffer, X
0D728 E6 04                       INC nt_update_buf_wc
0D72A                             
0D72A                             ;buffer overflow check
0D72A A5 04                       LDA nt_update_buf_wc
0D72C C9 FE                       CMP #$FE
0D72E D0 11                       BNE +
0D730 A9 01                         LDA #1
0D732 85 05                         STA nt_buffer_overflow
0D734                               end_nt_buffer_write
0D734                             ;find and write data lentgh
0D734 A5 04                       LDA nt_update_buf_wc
0D736 E5 03                       SBC nt_update_buf_wi
0D738 A6 03                       LDX nt_update_buf_wi
0D73A 9D 00 03                    STA nt_buffer, X
0D73D                             ;update `write initial` using `write current`
0D73D A6 04                       LDX nt_update_buf_wc
0D73F 86 03                       STX nt_update_buf_wi
0D741                             +:
0D741                               write_to_nt_buffer generic_bytes+0
0D741 A5 05                       LDA nt_buffer_overflow
0D743 D0 21                       BNE +
0D745                             
0D745 AD 00 07                    LDA generic_bytes+0
0D748 A6 04                       LDX nt_update_buf_wc
0D74A 9D 00 03                    STA nt_buffer, X
0D74D E6 04                       INC nt_update_buf_wc
0D74F                             
0D74F                             ;buffer overflow check
0D74F A5 04                       LDA nt_update_buf_wc
0D751 C9 FE                       CMP #$FE
0D753 D0 11                       BNE +
0D755 A9 01                         LDA #1
0D757 85 05                         STA nt_buffer_overflow
0D759                               end_nt_buffer_write
0D759                             ;find and write data lentgh
0D759 A5 04                       LDA nt_update_buf_wc
0D75B E5 03                       SBC nt_update_buf_wi
0D75D A6 03                       LDX nt_update_buf_wi
0D75F 9D 00 03                    STA nt_buffer, X
0D762                             ;update `write initial` using `write current`
0D762 A6 04                       LDX nt_update_buf_wc
0D764 86 03                       STX nt_update_buf_wi
0D766                             +:
0D766                             end_nt_buffer_write
0D766                             ;find and write data lentgh
0D766 A5 04                       LDA nt_update_buf_wc
0D768 E5 03                       SBC nt_update_buf_wi
0D76A A6 03                       LDX nt_update_buf_wi
0D76C 9D 00 03                    STA nt_buffer, X
0D76F                             ;update `write initial` using `write current`
0D76F A6 04                       LDX nt_update_buf_wc
0D771 86 03                       STX nt_update_buf_wi
0D773                             begin_nt_buffer_write #$21, #$5C+#$20
0D773                             ;if they previous entry is unfinished, finish it
0D773 A5 03                       LDA nt_update_buf_wi
0D775 C5 04                       CMP nt_update_buf_wc
0D777 F0 0D                       BEQ +
0D779                               end_nt_buffer_write
0D779                             ;find and write data lentgh
0D779 A5 04                       LDA nt_update_buf_wc
0D77B E5 03                       SBC nt_update_buf_wi
0D77D A6 03                       LDX nt_update_buf_wi
0D77F 9D 00 03                    STA nt_buffer, X
0D782                             ;update `write initial` using `write current`
0D782 A6 04                       LDX nt_update_buf_wc
0D784 86 03                       STX nt_update_buf_wi
0D786                             +:
0D786                           
0D786 A5 03                       LDA nt_update_buf_wi
0D788 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D78A 90 04                       BCC +
0D78C A9 01                         LDA #1
0D78E 85 05                         STA nt_buffer_overflow
0D790                             +:
0D790                             
0D790 A5 05                       LDA nt_buffer_overflow
0D792 D0 16                       BNE +
0D794                             
0D794 A6 03                       LDX nt_update_buf_wi
0D796 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D798 9D 00 03                    STA nt_buffer, X
0D79B                             
0D79B E8                          INX
0D79C A9 21                       LDA #$21
0D79E 9D 00 03                    STA nt_buffer, X
0D7A1                             
0D7A1 E8                          INX
0D7A2 A9 7C                       LDA #$5C+#$20
0D7A4 9D 00 03                    STA nt_buffer, X
0D7A7                             
0D7A7 E8                          INX
0D7A8 86 04                       STX nt_update_buf_wc
0D7AA                             
0D7AA                             +:
0D7AA                               write_to_nt_buffer generic_bytes+0
0D7AA A5 05                       LDA nt_buffer_overflow
0D7AC D0 21                       BNE +
0D7AE                             
0D7AE AD 00 07                    LDA generic_bytes+0
0D7B1 A6 04                       LDX nt_update_buf_wc
0D7B3 9D 00 03                    STA nt_buffer, X
0D7B6 E6 04                       INC nt_update_buf_wc
0D7B8                             
0D7B8                             ;buffer overflow check
0D7B8 A5 04                       LDA nt_update_buf_wc
0D7BA C9 FE                       CMP #$FE
0D7BC D0 11                       BNE +
0D7BE A9 01                         LDA #1
0D7C0 85 05                         STA nt_buffer_overflow
0D7C2                               end_nt_buffer_write
0D7C2                             ;find and write data lentgh
0D7C2 A5 04                       LDA nt_update_buf_wc
0D7C4 E5 03                       SBC nt_update_buf_wi
0D7C6 A6 03                       LDX nt_update_buf_wi
0D7C8 9D 00 03                    STA nt_buffer, X
0D7CB                             ;update `write initial` using `write current`
0D7CB A6 04                       LDX nt_update_buf_wc
0D7CD 86 03                       STX nt_update_buf_wi
0D7CF                             +:
0D7CF                               write_to_nt_buffer generic_bytes+0
0D7CF A5 05                       LDA nt_buffer_overflow
0D7D1 D0 21                       BNE +
0D7D3                             
0D7D3 AD 00 07                    LDA generic_bytes+0
0D7D6 A6 04                       LDX nt_update_buf_wc
0D7D8 9D 00 03                    STA nt_buffer, X
0D7DB E6 04                       INC nt_update_buf_wc
0D7DD                             
0D7DD                             ;buffer overflow check
0D7DD A5 04                       LDA nt_update_buf_wc
0D7DF C9 FE                       CMP #$FE
0D7E1 D0 11                       BNE +
0D7E3 A9 01                         LDA #1
0D7E5 85 05                         STA nt_buffer_overflow
0D7E7                               end_nt_buffer_write
0D7E7                             ;find and write data lentgh
0D7E7 A5 04                       LDA nt_update_buf_wc
0D7E9 E5 03                       SBC nt_update_buf_wi
0D7EB A6 03                       LDX nt_update_buf_wi
0D7ED 9D 00 03                    STA nt_buffer, X
0D7F0                             ;update `write initial` using `write current`
0D7F0 A6 04                       LDX nt_update_buf_wc
0D7F2 86 03                       STX nt_update_buf_wi
0D7F4                             +:
0D7F4                               write_to_nt_buffer generic_bytes+0
0D7F4 A5 05                       LDA nt_buffer_overflow
0D7F6 D0 21                       BNE +
0D7F8                             
0D7F8 AD 00 07                    LDA generic_bytes+0
0D7FB A6 04                       LDX nt_update_buf_wc
0D7FD 9D 00 03                    STA nt_buffer, X
0D800 E6 04                       INC nt_update_buf_wc
0D802                             
0D802                             ;buffer overflow check
0D802 A5 04                       LDA nt_update_buf_wc
0D804 C9 FE                       CMP #$FE
0D806 D0 11                       BNE +
0D808 A9 01                         LDA #1
0D80A 85 05                         STA nt_buffer_overflow
0D80C                               end_nt_buffer_write
0D80C                             ;find and write data lentgh
0D80C A5 04                       LDA nt_update_buf_wc
0D80E E5 03                       SBC nt_update_buf_wi
0D810 A6 03                       LDX nt_update_buf_wi
0D812 9D 00 03                    STA nt_buffer, X
0D815                             ;update `write initial` using `write current`
0D815 A6 04                       LDX nt_update_buf_wc
0D817 86 03                       STX nt_update_buf_wi
0D819                             +:
0D819                               write_to_nt_buffer generic_bytes+0
0D819 A5 05                       LDA nt_buffer_overflow
0D81B D0 21                       BNE +
0D81D                             
0D81D AD 00 07                    LDA generic_bytes+0
0D820 A6 04                       LDX nt_update_buf_wc
0D822 9D 00 03                    STA nt_buffer, X
0D825 E6 04                       INC nt_update_buf_wc
0D827                             
0D827                             ;buffer overflow check
0D827 A5 04                       LDA nt_update_buf_wc
0D829 C9 FE                       CMP #$FE
0D82B D0 11                       BNE +
0D82D A9 01                         LDA #1
0D82F 85 05                         STA nt_buffer_overflow
0D831                               end_nt_buffer_write
0D831                             ;find and write data lentgh
0D831 A5 04                       LDA nt_update_buf_wc
0D833 E5 03                       SBC nt_update_buf_wi
0D835 A6 03                       LDX nt_update_buf_wi
0D837 9D 00 03                    STA nt_buffer, X
0D83A                             ;update `write initial` using `write current`
0D83A A6 04                       LDX nt_update_buf_wc
0D83C 86 03                       STX nt_update_buf_wi
0D83E                             +:
0D83E                             end_nt_buffer_write
0D83E                             ;find and write data lentgh
0D83E A5 04                       LDA nt_update_buf_wc
0D840 E5 03                       SBC nt_update_buf_wi
0D842 A6 03                       LDX nt_update_buf_wi
0D844 9D 00 03                    STA nt_buffer, X
0D847                             ;update `write initial` using `write current`
0D847 A6 04                       LDX nt_update_buf_wc
0D849 86 03                       STX nt_update_buf_wi
0D84B                             begin_nt_buffer_write #$21, #$5C+(2*#$20)
0D84B                             ;if they previous entry is unfinished, finish it
0D84B A5 03                       LDA nt_update_buf_wi
0D84D C5 04                       CMP nt_update_buf_wc
0D84F F0 0D                       BEQ +
0D851                               end_nt_buffer_write
0D851                             ;find and write data lentgh
0D851 A5 04                       LDA nt_update_buf_wc
0D853 E5 03                       SBC nt_update_buf_wi
0D855 A6 03                       LDX nt_update_buf_wi
0D857 9D 00 03                    STA nt_buffer, X
0D85A                             ;update `write initial` using `write current`
0D85A A6 04                       LDX nt_update_buf_wc
0D85C 86 03                       STX nt_update_buf_wi
0D85E                             +:
0D85E                           
0D85E A5 03                       LDA nt_update_buf_wi
0D860 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D862 90 04                       BCC +
0D864 A9 01                         LDA #1
0D866 85 05                         STA nt_buffer_overflow
0D868                             +:
0D868                             
0D868 A5 05                       LDA nt_buffer_overflow
0D86A D0 16                       BNE +
0D86C                             
0D86C A6 03                       LDX nt_update_buf_wi
0D86E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D870 9D 00 03                    STA nt_buffer, X
0D873                             
0D873 E8                          INX
0D874 A9 21                       LDA #$21
0D876 9D 00 03                    STA nt_buffer, X
0D879                             
0D879 E8                          INX
0D87A A9 9C                       LDA #$5C+(2*#$20)
0D87C 9D 00 03                    STA nt_buffer, X
0D87F                             
0D87F E8                          INX
0D880 86 04                       STX nt_update_buf_wc
0D882                             
0D882                             +:
0D882                               write_to_nt_buffer generic_bytes+0
0D882 A5 05                       LDA nt_buffer_overflow
0D884 D0 21                       BNE +
0D886                             
0D886 AD 00 07                    LDA generic_bytes+0
0D889 A6 04                       LDX nt_update_buf_wc
0D88B 9D 00 03                    STA nt_buffer, X
0D88E E6 04                       INC nt_update_buf_wc
0D890                             
0D890                             ;buffer overflow check
0D890 A5 04                       LDA nt_update_buf_wc
0D892 C9 FE                       CMP #$FE
0D894 D0 11                       BNE +
0D896 A9 01                         LDA #1
0D898 85 05                         STA nt_buffer_overflow
0D89A                               end_nt_buffer_write
0D89A                             ;find and write data lentgh
0D89A A5 04                       LDA nt_update_buf_wc
0D89C E5 03                       SBC nt_update_buf_wi
0D89E A6 03                       LDX nt_update_buf_wi
0D8A0 9D 00 03                    STA nt_buffer, X
0D8A3                             ;update `write initial` using `write current`
0D8A3 A6 04                       LDX nt_update_buf_wc
0D8A5 86 03                       STX nt_update_buf_wi
0D8A7                             +:
0D8A7                               write_to_nt_buffer generic_bytes+0
0D8A7 A5 05                       LDA nt_buffer_overflow
0D8A9 D0 21                       BNE +
0D8AB                             
0D8AB AD 00 07                    LDA generic_bytes+0
0D8AE A6 04                       LDX nt_update_buf_wc
0D8B0 9D 00 03                    STA nt_buffer, X
0D8B3 E6 04                       INC nt_update_buf_wc
0D8B5                             
0D8B5                             ;buffer overflow check
0D8B5 A5 04                       LDA nt_update_buf_wc
0D8B7 C9 FE                       CMP #$FE
0D8B9 D0 11                       BNE +
0D8BB A9 01                         LDA #1
0D8BD 85 05                         STA nt_buffer_overflow
0D8BF                               end_nt_buffer_write
0D8BF                             ;find and write data lentgh
0D8BF A5 04                       LDA nt_update_buf_wc
0D8C1 E5 03                       SBC nt_update_buf_wi
0D8C3 A6 03                       LDX nt_update_buf_wi
0D8C5 9D 00 03                    STA nt_buffer, X
0D8C8                             ;update `write initial` using `write current`
0D8C8 A6 04                       LDX nt_update_buf_wc
0D8CA 86 03                       STX nt_update_buf_wi
0D8CC                             +:
0D8CC                               write_to_nt_buffer generic_bytes+0
0D8CC A5 05                       LDA nt_buffer_overflow
0D8CE D0 21                       BNE +
0D8D0                             
0D8D0 AD 00 07                    LDA generic_bytes+0
0D8D3 A6 04                       LDX nt_update_buf_wc
0D8D5 9D 00 03                    STA nt_buffer, X
0D8D8 E6 04                       INC nt_update_buf_wc
0D8DA                             
0D8DA                             ;buffer overflow check
0D8DA A5 04                       LDA nt_update_buf_wc
0D8DC C9 FE                       CMP #$FE
0D8DE D0 11                       BNE +
0D8E0 A9 01                         LDA #1
0D8E2 85 05                         STA nt_buffer_overflow
0D8E4                               end_nt_buffer_write
0D8E4                             ;find and write data lentgh
0D8E4 A5 04                       LDA nt_update_buf_wc
0D8E6 E5 03                       SBC nt_update_buf_wi
0D8E8 A6 03                       LDX nt_update_buf_wi
0D8EA 9D 00 03                    STA nt_buffer, X
0D8ED                             ;update `write initial` using `write current`
0D8ED A6 04                       LDX nt_update_buf_wc
0D8EF 86 03                       STX nt_update_buf_wi
0D8F1                             +:
0D8F1                               write_to_nt_buffer generic_bytes+0
0D8F1 A5 05                       LDA nt_buffer_overflow
0D8F3 D0 21                       BNE +
0D8F5                             
0D8F5 AD 00 07                    LDA generic_bytes+0
0D8F8 A6 04                       LDX nt_update_buf_wc
0D8FA 9D 00 03                    STA nt_buffer, X
0D8FD E6 04                       INC nt_update_buf_wc
0D8FF                             
0D8FF                             ;buffer overflow check
0D8FF A5 04                       LDA nt_update_buf_wc
0D901 C9 FE                       CMP #$FE
0D903 D0 11                       BNE +
0D905 A9 01                         LDA #1
0D907 85 05                         STA nt_buffer_overflow
0D909                               end_nt_buffer_write
0D909                             ;find and write data lentgh
0D909 A5 04                       LDA nt_update_buf_wc
0D90B E5 03                       SBC nt_update_buf_wi
0D90D A6 03                       LDX nt_update_buf_wi
0D90F 9D 00 03                    STA nt_buffer, X
0D912                             ;update `write initial` using `write current`
0D912 A6 04                       LDX nt_update_buf_wc
0D914 86 03                       STX nt_update_buf_wi
0D916                             +:
0D916                             end_nt_buffer_write
0D916                             ;find and write data lentgh
0D916 A5 04                       LDA nt_update_buf_wc
0D918 E5 03                       SBC nt_update_buf_wi
0D91A A6 03                       LDX nt_update_buf_wi
0D91C 9D 00 03                    STA nt_buffer, X
0D91F                             ;update `write initial` using `write current`
0D91F A6 04                       LDX nt_update_buf_wc
0D921 86 03                       STX nt_update_buf_wi
0D923                             begin_nt_buffer_write #$21, #$5C+(3*#$20)
0D923                             ;if they previous entry is unfinished, finish it
0D923 A5 03                       LDA nt_update_buf_wi
0D925 C5 04                       CMP nt_update_buf_wc
0D927 F0 0D                       BEQ +
0D929                               end_nt_buffer_write
0D929                             ;find and write data lentgh
0D929 A5 04                       LDA nt_update_buf_wc
0D92B E5 03                       SBC nt_update_buf_wi
0D92D A6 03                       LDX nt_update_buf_wi
0D92F 9D 00 03                    STA nt_buffer, X
0D932                             ;update `write initial` using `write current`
0D932 A6 04                       LDX nt_update_buf_wc
0D934 86 03                       STX nt_update_buf_wi
0D936                             +:
0D936                           
0D936 A5 03                       LDA nt_update_buf_wi
0D938 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0D93A 90 04                       BCC +
0D93C A9 01                         LDA #1
0D93E 85 05                         STA nt_buffer_overflow
0D940                             +:
0D940                             
0D940 A5 05                       LDA nt_buffer_overflow
0D942 D0 16                       BNE +
0D944                             
0D944 A6 03                       LDX nt_update_buf_wi
0D946 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0D948 9D 00 03                    STA nt_buffer, X
0D94B                             
0D94B E8                          INX
0D94C A9 21                       LDA #$21
0D94E 9D 00 03                    STA nt_buffer, X
0D951                             
0D951 E8                          INX
0D952 A9 BC                       LDA #$5C+(3*#$20)
0D954 9D 00 03                    STA nt_buffer, X
0D957                             
0D957 E8                          INX
0D958 86 04                       STX nt_update_buf_wc
0D95A                             
0D95A                             +:
0D95A                               write_to_nt_buffer generic_bytes+0
0D95A A5 05                       LDA nt_buffer_overflow
0D95C D0 21                       BNE +
0D95E                             
0D95E AD 00 07                    LDA generic_bytes+0
0D961 A6 04                       LDX nt_update_buf_wc
0D963 9D 00 03                    STA nt_buffer, X
0D966 E6 04                       INC nt_update_buf_wc
0D968                             
0D968                             ;buffer overflow check
0D968 A5 04                       LDA nt_update_buf_wc
0D96A C9 FE                       CMP #$FE
0D96C D0 11                       BNE +
0D96E A9 01                         LDA #1
0D970 85 05                         STA nt_buffer_overflow
0D972                               end_nt_buffer_write
0D972                             ;find and write data lentgh
0D972 A5 04                       LDA nt_update_buf_wc
0D974 E5 03                       SBC nt_update_buf_wi
0D976 A6 03                       LDX nt_update_buf_wi
0D978 9D 00 03                    STA nt_buffer, X
0D97B                             ;update `write initial` using `write current`
0D97B A6 04                       LDX nt_update_buf_wc
0D97D 86 03                       STX nt_update_buf_wi
0D97F                             +:
0D97F                               write_to_nt_buffer generic_bytes+0
0D97F A5 05                       LDA nt_buffer_overflow
0D981 D0 21                       BNE +
0D983                             
0D983 AD 00 07                    LDA generic_bytes+0
0D986 A6 04                       LDX nt_update_buf_wc
0D988 9D 00 03                    STA nt_buffer, X
0D98B E6 04                       INC nt_update_buf_wc
0D98D                             
0D98D                             ;buffer overflow check
0D98D A5 04                       LDA nt_update_buf_wc
0D98F C9 FE                       CMP #$FE
0D991 D0 11                       BNE +
0D993 A9 01                         LDA #1
0D995 85 05                         STA nt_buffer_overflow
0D997                               end_nt_buffer_write
0D997                             ;find and write data lentgh
0D997 A5 04                       LDA nt_update_buf_wc
0D999 E5 03                       SBC nt_update_buf_wi
0D99B A6 03                       LDX nt_update_buf_wi
0D99D 9D 00 03                    STA nt_buffer, X
0D9A0                             ;update `write initial` using `write current`
0D9A0 A6 04                       LDX nt_update_buf_wc
0D9A2 86 03                       STX nt_update_buf_wi
0D9A4                             +:
0D9A4                               write_to_nt_buffer generic_bytes+0
0D9A4 A5 05                       LDA nt_buffer_overflow
0D9A6 D0 21                       BNE +
0D9A8                             
0D9A8 AD 00 07                    LDA generic_bytes+0
0D9AB A6 04                       LDX nt_update_buf_wc
0D9AD 9D 00 03                    STA nt_buffer, X
0D9B0 E6 04                       INC nt_update_buf_wc
0D9B2                             
0D9B2                             ;buffer overflow check
0D9B2 A5 04                       LDA nt_update_buf_wc
0D9B4 C9 FE                       CMP #$FE
0D9B6 D0 11                       BNE +
0D9B8 A9 01                         LDA #1
0D9BA 85 05                         STA nt_buffer_overflow
0D9BC                               end_nt_buffer_write
0D9BC                             ;find and write data lentgh
0D9BC A5 04                       LDA nt_update_buf_wc
0D9BE E5 03                       SBC nt_update_buf_wi
0D9C0 A6 03                       LDX nt_update_buf_wi
0D9C2 9D 00 03                    STA nt_buffer, X
0D9C5                             ;update `write initial` using `write current`
0D9C5 A6 04                       LDX nt_update_buf_wc
0D9C7 86 03                       STX nt_update_buf_wi
0D9C9                             +:
0D9C9                               write_to_nt_buffer generic_bytes+0
0D9C9 A5 05                       LDA nt_buffer_overflow
0D9CB D0 21                       BNE +
0D9CD                             
0D9CD AD 00 07                    LDA generic_bytes+0
0D9D0 A6 04                       LDX nt_update_buf_wc
0D9D2 9D 00 03                    STA nt_buffer, X
0D9D5 E6 04                       INC nt_update_buf_wc
0D9D7                             
0D9D7                             ;buffer overflow check
0D9D7 A5 04                       LDA nt_update_buf_wc
0D9D9 C9 FE                       CMP #$FE
0D9DB D0 11                       BNE +
0D9DD A9 01                         LDA #1
0D9DF 85 05                         STA nt_buffer_overflow
0D9E1                               end_nt_buffer_write
0D9E1                             ;find and write data lentgh
0D9E1 A5 04                       LDA nt_update_buf_wc
0D9E3 E5 03                       SBC nt_update_buf_wi
0D9E5 A6 03                       LDX nt_update_buf_wi
0D9E7 9D 00 03                    STA nt_buffer, X
0D9EA                             ;update `write initial` using `write current`
0D9EA A6 04                       LDX nt_update_buf_wc
0D9EC 86 03                       STX nt_update_buf_wi
0D9EE                             +:
0D9EE                             end_nt_buffer_write
0D9EE                             ;find and write data lentgh
0D9EE A5 04                       LDA nt_update_buf_wc
0D9F0 E5 03                       SBC nt_update_buf_wi
0D9F2 A6 03                       LDX nt_update_buf_wi
0D9F4 9D 00 03                    STA nt_buffer, X
0D9F7                             ;update `write initial` using `write current`
0D9F7 A6 04                       LDX nt_update_buf_wc
0D9F9 86 03                       STX nt_update_buf_wi
0D9FB                            
0D9FB                             ; check downward
0D9FB A0 37                       LDY #$37 ;default fill (floor)
0D9FD                             ; check if at bottom
0D9FD A9 F0                       LDA #%11110000
0D9FF 2D 01 06                    AND player_room
0DA02 C9 00                       CMP #%00000000
0DA04 D0 02                       BNE +
0DA06 A0 36                         LDY #$36
0DA08                             +:
0DA08                             ; check if next down exists
0DA08 AD 01 06                    LDA player_room
0DA0B 38                          SEC
0DA0C E9 10                       SBC #%00010000
0DA0E AA                          TAX
0DA0F 8E FC 07                    STX generic_bytes+252
0DA12 BD 00 04                    LDA dungeon_map, X
0DA15 C9 00                       CMP #$00
0DA17 D0 02                       BNE +
0DA19 A0 36                         LDY #$36
0DA1B                             +:
0DA1B                             
0DA1B                             ; draw it
0DA1B 8C 00 07                    STY generic_bytes+0
0DA1E                             begin_nt_buffer_write #$22, #$8E
0DA1E                             ;if they previous entry is unfinished, finish it
0DA1E A5 03                       LDA nt_update_buf_wi
0DA20 C5 04                       CMP nt_update_buf_wc
0DA22 F0 0D                       BEQ +
0DA24                               end_nt_buffer_write
0DA24                             ;find and write data lentgh
0DA24 A5 04                       LDA nt_update_buf_wc
0DA26 E5 03                       SBC nt_update_buf_wi
0DA28 A6 03                       LDX nt_update_buf_wi
0DA2A 9D 00 03                    STA nt_buffer, X
0DA2D                             ;update `write initial` using `write current`
0DA2D A6 04                       LDX nt_update_buf_wc
0DA2F 86 03                       STX nt_update_buf_wi
0DA31                             +:
0DA31                           
0DA31 A5 03                       LDA nt_update_buf_wi
0DA33 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DA35 90 04                       BCC +
0DA37 A9 01                         LDA #1
0DA39 85 05                         STA nt_buffer_overflow
0DA3B                             +:
0DA3B                             
0DA3B A5 05                       LDA nt_buffer_overflow
0DA3D D0 16                       BNE +
0DA3F                             
0DA3F A6 03                       LDX nt_update_buf_wi
0DA41 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DA43 9D 00 03                    STA nt_buffer, X
0DA46                             
0DA46 E8                          INX
0DA47 A9 22                       LDA #$22
0DA49 9D 00 03                    STA nt_buffer, X
0DA4C                             
0DA4C E8                          INX
0DA4D A9 8E                       LDA #$8E
0DA4F 9D 00 03                    STA nt_buffer, X
0DA52                             
0DA52 E8                          INX
0DA53 86 04                       STX nt_update_buf_wc
0DA55                             
0DA55                             +:
0DA55                               write_to_nt_buffer generic_bytes+0
0DA55 A5 05                       LDA nt_buffer_overflow
0DA57 D0 21                       BNE +
0DA59                             
0DA59 AD 00 07                    LDA generic_bytes+0
0DA5C A6 04                       LDX nt_update_buf_wc
0DA5E 9D 00 03                    STA nt_buffer, X
0DA61 E6 04                       INC nt_update_buf_wc
0DA63                             
0DA63                             ;buffer overflow check
0DA63 A5 04                       LDA nt_update_buf_wc
0DA65 C9 FE                       CMP #$FE
0DA67 D0 11                       BNE +
0DA69 A9 01                         LDA #1
0DA6B 85 05                         STA nt_buffer_overflow
0DA6D                               end_nt_buffer_write
0DA6D                             ;find and write data lentgh
0DA6D A5 04                       LDA nt_update_buf_wc
0DA6F E5 03                       SBC nt_update_buf_wi
0DA71 A6 03                       LDX nt_update_buf_wi
0DA73 9D 00 03                    STA nt_buffer, X
0DA76                             ;update `write initial` using `write current`
0DA76 A6 04                       LDX nt_update_buf_wc
0DA78 86 03                       STX nt_update_buf_wi
0DA7A                             +:
0DA7A                               write_to_nt_buffer generic_bytes+0
0DA7A A5 05                       LDA nt_buffer_overflow
0DA7C D0 21                       BNE +
0DA7E                             
0DA7E AD 00 07                    LDA generic_bytes+0
0DA81 A6 04                       LDX nt_update_buf_wc
0DA83 9D 00 03                    STA nt_buffer, X
0DA86 E6 04                       INC nt_update_buf_wc
0DA88                             
0DA88                             ;buffer overflow check
0DA88 A5 04                       LDA nt_update_buf_wc
0DA8A C9 FE                       CMP #$FE
0DA8C D0 11                       BNE +
0DA8E A9 01                         LDA #1
0DA90 85 05                         STA nt_buffer_overflow
0DA92                               end_nt_buffer_write
0DA92                             ;find and write data lentgh
0DA92 A5 04                       LDA nt_update_buf_wc
0DA94 E5 03                       SBC nt_update_buf_wi
0DA96 A6 03                       LDX nt_update_buf_wi
0DA98 9D 00 03                    STA nt_buffer, X
0DA9B                             ;update `write initial` using `write current`
0DA9B A6 04                       LDX nt_update_buf_wc
0DA9D 86 03                       STX nt_update_buf_wi
0DA9F                             +:
0DA9F                               write_to_nt_buffer generic_bytes+0
0DA9F A5 05                       LDA nt_buffer_overflow
0DAA1 D0 21                       BNE +
0DAA3                             
0DAA3 AD 00 07                    LDA generic_bytes+0
0DAA6 A6 04                       LDX nt_update_buf_wc
0DAA8 9D 00 03                    STA nt_buffer, X
0DAAB E6 04                       INC nt_update_buf_wc
0DAAD                             
0DAAD                             ;buffer overflow check
0DAAD A5 04                       LDA nt_update_buf_wc
0DAAF C9 FE                       CMP #$FE
0DAB1 D0 11                       BNE +
0DAB3 A9 01                         LDA #1
0DAB5 85 05                         STA nt_buffer_overflow
0DAB7                               end_nt_buffer_write
0DAB7                             ;find and write data lentgh
0DAB7 A5 04                       LDA nt_update_buf_wc
0DAB9 E5 03                       SBC nt_update_buf_wi
0DABB A6 03                       LDX nt_update_buf_wi
0DABD 9D 00 03                    STA nt_buffer, X
0DAC0                             ;update `write initial` using `write current`
0DAC0 A6 04                       LDX nt_update_buf_wc
0DAC2 86 03                       STX nt_update_buf_wi
0DAC4                             +:
0DAC4                               write_to_nt_buffer generic_bytes+0
0DAC4 A5 05                       LDA nt_buffer_overflow
0DAC6 D0 21                       BNE +
0DAC8                             
0DAC8 AD 00 07                    LDA generic_bytes+0
0DACB A6 04                       LDX nt_update_buf_wc
0DACD 9D 00 03                    STA nt_buffer, X
0DAD0 E6 04                       INC nt_update_buf_wc
0DAD2                             
0DAD2                             ;buffer overflow check
0DAD2 A5 04                       LDA nt_update_buf_wc
0DAD4 C9 FE                       CMP #$FE
0DAD6 D0 11                       BNE +
0DAD8 A9 01                         LDA #1
0DADA 85 05                         STA nt_buffer_overflow
0DADC                               end_nt_buffer_write
0DADC                             ;find and write data lentgh
0DADC A5 04                       LDA nt_update_buf_wc
0DADE E5 03                       SBC nt_update_buf_wi
0DAE0 A6 03                       LDX nt_update_buf_wi
0DAE2 9D 00 03                    STA nt_buffer, X
0DAE5                             ;update `write initial` using `write current`
0DAE5 A6 04                       LDX nt_update_buf_wc
0DAE7 86 03                       STX nt_update_buf_wi
0DAE9                             +:
0DAE9                             end_nt_buffer_write
0DAE9                             ;find and write data lentgh
0DAE9 A5 04                       LDA nt_update_buf_wc
0DAEB E5 03                       SBC nt_update_buf_wi
0DAED A6 03                       LDX nt_update_buf_wi
0DAEF 9D 00 03                    STA nt_buffer, X
0DAF2                             ;update `write initial` using `write current`
0DAF2 A6 04                       LDX nt_update_buf_wc
0DAF4 86 03                       STX nt_update_buf_wi
0DAF6                             begin_nt_buffer_write #$22, #$8E+#$20
0DAF6                             ;if they previous entry is unfinished, finish it
0DAF6 A5 03                       LDA nt_update_buf_wi
0DAF8 C5 04                       CMP nt_update_buf_wc
0DAFA F0 0D                       BEQ +
0DAFC                               end_nt_buffer_write
0DAFC                             ;find and write data lentgh
0DAFC A5 04                       LDA nt_update_buf_wc
0DAFE E5 03                       SBC nt_update_buf_wi
0DB00 A6 03                       LDX nt_update_buf_wi
0DB02 9D 00 03                    STA nt_buffer, X
0DB05                             ;update `write initial` using `write current`
0DB05 A6 04                       LDX nt_update_buf_wc
0DB07 86 03                       STX nt_update_buf_wi
0DB09                             +:
0DB09                           
0DB09 A5 03                       LDA nt_update_buf_wi
0DB0B C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DB0D 90 04                       BCC +
0DB0F A9 01                         LDA #1
0DB11 85 05                         STA nt_buffer_overflow
0DB13                             +:
0DB13                             
0DB13 A5 05                       LDA nt_buffer_overflow
0DB15 D0 16                       BNE +
0DB17                             
0DB17 A6 03                       LDX nt_update_buf_wi
0DB19 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DB1B 9D 00 03                    STA nt_buffer, X
0DB1E                             
0DB1E E8                          INX
0DB1F A9 22                       LDA #$22
0DB21 9D 00 03                    STA nt_buffer, X
0DB24                             
0DB24 E8                          INX
0DB25 A9 AE                       LDA #$8E+#$20
0DB27 9D 00 03                    STA nt_buffer, X
0DB2A                             
0DB2A E8                          INX
0DB2B 86 04                       STX nt_update_buf_wc
0DB2D                             
0DB2D                             +:
0DB2D                               write_to_nt_buffer generic_bytes+0
0DB2D A5 05                       LDA nt_buffer_overflow
0DB2F D0 21                       BNE +
0DB31                             
0DB31 AD 00 07                    LDA generic_bytes+0
0DB34 A6 04                       LDX nt_update_buf_wc
0DB36 9D 00 03                    STA nt_buffer, X
0DB39 E6 04                       INC nt_update_buf_wc
0DB3B                             
0DB3B                             ;buffer overflow check
0DB3B A5 04                       LDA nt_update_buf_wc
0DB3D C9 FE                       CMP #$FE
0DB3F D0 11                       BNE +
0DB41 A9 01                         LDA #1
0DB43 85 05                         STA nt_buffer_overflow
0DB45                               end_nt_buffer_write
0DB45                             ;find and write data lentgh
0DB45 A5 04                       LDA nt_update_buf_wc
0DB47 E5 03                       SBC nt_update_buf_wi
0DB49 A6 03                       LDX nt_update_buf_wi
0DB4B 9D 00 03                    STA nt_buffer, X
0DB4E                             ;update `write initial` using `write current`
0DB4E A6 04                       LDX nt_update_buf_wc
0DB50 86 03                       STX nt_update_buf_wi
0DB52                             +:
0DB52                               write_to_nt_buffer generic_bytes+0
0DB52 A5 05                       LDA nt_buffer_overflow
0DB54 D0 21                       BNE +
0DB56                             
0DB56 AD 00 07                    LDA generic_bytes+0
0DB59 A6 04                       LDX nt_update_buf_wc
0DB5B 9D 00 03                    STA nt_buffer, X
0DB5E E6 04                       INC nt_update_buf_wc
0DB60                             
0DB60                             ;buffer overflow check
0DB60 A5 04                       LDA nt_update_buf_wc
0DB62 C9 FE                       CMP #$FE
0DB64 D0 11                       BNE +
0DB66 A9 01                         LDA #1
0DB68 85 05                         STA nt_buffer_overflow
0DB6A                               end_nt_buffer_write
0DB6A                             ;find and write data lentgh
0DB6A A5 04                       LDA nt_update_buf_wc
0DB6C E5 03                       SBC nt_update_buf_wi
0DB6E A6 03                       LDX nt_update_buf_wi
0DB70 9D 00 03                    STA nt_buffer, X
0DB73                             ;update `write initial` using `write current`
0DB73 A6 04                       LDX nt_update_buf_wc
0DB75 86 03                       STX nt_update_buf_wi
0DB77                             +:
0DB77                               write_to_nt_buffer generic_bytes+0
0DB77 A5 05                       LDA nt_buffer_overflow
0DB79 D0 21                       BNE +
0DB7B                             
0DB7B AD 00 07                    LDA generic_bytes+0
0DB7E A6 04                       LDX nt_update_buf_wc
0DB80 9D 00 03                    STA nt_buffer, X
0DB83 E6 04                       INC nt_update_buf_wc
0DB85                             
0DB85                             ;buffer overflow check
0DB85 A5 04                       LDA nt_update_buf_wc
0DB87 C9 FE                       CMP #$FE
0DB89 D0 11                       BNE +
0DB8B A9 01                         LDA #1
0DB8D 85 05                         STA nt_buffer_overflow
0DB8F                               end_nt_buffer_write
0DB8F                             ;find and write data lentgh
0DB8F A5 04                       LDA nt_update_buf_wc
0DB91 E5 03                       SBC nt_update_buf_wi
0DB93 A6 03                       LDX nt_update_buf_wi
0DB95 9D 00 03                    STA nt_buffer, X
0DB98                             ;update `write initial` using `write current`
0DB98 A6 04                       LDX nt_update_buf_wc
0DB9A 86 03                       STX nt_update_buf_wi
0DB9C                             +:
0DB9C                               write_to_nt_buffer generic_bytes+0
0DB9C A5 05                       LDA nt_buffer_overflow
0DB9E D0 21                       BNE +
0DBA0                             
0DBA0 AD 00 07                    LDA generic_bytes+0
0DBA3 A6 04                       LDX nt_update_buf_wc
0DBA5 9D 00 03                    STA nt_buffer, X
0DBA8 E6 04                       INC nt_update_buf_wc
0DBAA                             
0DBAA                             ;buffer overflow check
0DBAA A5 04                       LDA nt_update_buf_wc
0DBAC C9 FE                       CMP #$FE
0DBAE D0 11                       BNE +
0DBB0 A9 01                         LDA #1
0DBB2 85 05                         STA nt_buffer_overflow
0DBB4                               end_nt_buffer_write
0DBB4                             ;find and write data lentgh
0DBB4 A5 04                       LDA nt_update_buf_wc
0DBB6 E5 03                       SBC nt_update_buf_wi
0DBB8 A6 03                       LDX nt_update_buf_wi
0DBBA 9D 00 03                    STA nt_buffer, X
0DBBD                             ;update `write initial` using `write current`
0DBBD A6 04                       LDX nt_update_buf_wc
0DBBF 86 03                       STX nt_update_buf_wi
0DBC1                             +:
0DBC1                             end_nt_buffer_write
0DBC1                             ;find and write data lentgh
0DBC1 A5 04                       LDA nt_update_buf_wc
0DBC3 E5 03                       SBC nt_update_buf_wi
0DBC5 A6 03                       LDX nt_update_buf_wi
0DBC7 9D 00 03                    STA nt_buffer, X
0DBCA                             ;update `write initial` using `write current`
0DBCA A6 04                       LDX nt_update_buf_wc
0DBCC 86 03                       STX nt_update_buf_wi
0DBCE                             begin_nt_buffer_write #$22, #$8E+(2*#$20)
0DBCE                             ;if they previous entry is unfinished, finish it
0DBCE A5 03                       LDA nt_update_buf_wi
0DBD0 C5 04                       CMP nt_update_buf_wc
0DBD2 F0 0D                       BEQ +
0DBD4                               end_nt_buffer_write
0DBD4                             ;find and write data lentgh
0DBD4 A5 04                       LDA nt_update_buf_wc
0DBD6 E5 03                       SBC nt_update_buf_wi
0DBD8 A6 03                       LDX nt_update_buf_wi
0DBDA 9D 00 03                    STA nt_buffer, X
0DBDD                             ;update `write initial` using `write current`
0DBDD A6 04                       LDX nt_update_buf_wc
0DBDF 86 03                       STX nt_update_buf_wi
0DBE1                             +:
0DBE1                           
0DBE1 A5 03                       LDA nt_update_buf_wi
0DBE3 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DBE5 90 04                       BCC +
0DBE7 A9 01                         LDA #1
0DBE9 85 05                         STA nt_buffer_overflow
0DBEB                             +:
0DBEB                             
0DBEB A5 05                       LDA nt_buffer_overflow
0DBED D0 16                       BNE +
0DBEF                             
0DBEF A6 03                       LDX nt_update_buf_wi
0DBF1 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DBF3 9D 00 03                    STA nt_buffer, X
0DBF6                             
0DBF6 E8                          INX
0DBF7 A9 22                       LDA #$22
0DBF9 9D 00 03                    STA nt_buffer, X
0DBFC                             
0DBFC E8                          INX
0DBFD A9 CE                       LDA #$8E+(2*#$20)
0DBFF 9D 00 03                    STA nt_buffer, X
0DC02                             
0DC02 E8                          INX
0DC03 86 04                       STX nt_update_buf_wc
0DC05                             
0DC05                             +:
0DC05                               write_to_nt_buffer generic_bytes+0
0DC05 A5 05                       LDA nt_buffer_overflow
0DC07 D0 21                       BNE +
0DC09                             
0DC09 AD 00 07                    LDA generic_bytes+0
0DC0C A6 04                       LDX nt_update_buf_wc
0DC0E 9D 00 03                    STA nt_buffer, X
0DC11 E6 04                       INC nt_update_buf_wc
0DC13                             
0DC13                             ;buffer overflow check
0DC13 A5 04                       LDA nt_update_buf_wc
0DC15 C9 FE                       CMP #$FE
0DC17 D0 11                       BNE +
0DC19 A9 01                         LDA #1
0DC1B 85 05                         STA nt_buffer_overflow
0DC1D                               end_nt_buffer_write
0DC1D                             ;find and write data lentgh
0DC1D A5 04                       LDA nt_update_buf_wc
0DC1F E5 03                       SBC nt_update_buf_wi
0DC21 A6 03                       LDX nt_update_buf_wi
0DC23 9D 00 03                    STA nt_buffer, X
0DC26                             ;update `write initial` using `write current`
0DC26 A6 04                       LDX nt_update_buf_wc
0DC28 86 03                       STX nt_update_buf_wi
0DC2A                             +:
0DC2A                               write_to_nt_buffer generic_bytes+0
0DC2A A5 05                       LDA nt_buffer_overflow
0DC2C D0 21                       BNE +
0DC2E                             
0DC2E AD 00 07                    LDA generic_bytes+0
0DC31 A6 04                       LDX nt_update_buf_wc
0DC33 9D 00 03                    STA nt_buffer, X
0DC36 E6 04                       INC nt_update_buf_wc
0DC38                             
0DC38                             ;buffer overflow check
0DC38 A5 04                       LDA nt_update_buf_wc
0DC3A C9 FE                       CMP #$FE
0DC3C D0 11                       BNE +
0DC3E A9 01                         LDA #1
0DC40 85 05                         STA nt_buffer_overflow
0DC42                               end_nt_buffer_write
0DC42                             ;find and write data lentgh
0DC42 A5 04                       LDA nt_update_buf_wc
0DC44 E5 03                       SBC nt_update_buf_wi
0DC46 A6 03                       LDX nt_update_buf_wi
0DC48 9D 00 03                    STA nt_buffer, X
0DC4B                             ;update `write initial` using `write current`
0DC4B A6 04                       LDX nt_update_buf_wc
0DC4D 86 03                       STX nt_update_buf_wi
0DC4F                             +:
0DC4F                               write_to_nt_buffer generic_bytes+0
0DC4F A5 05                       LDA nt_buffer_overflow
0DC51 D0 21                       BNE +
0DC53                             
0DC53 AD 00 07                    LDA generic_bytes+0
0DC56 A6 04                       LDX nt_update_buf_wc
0DC58 9D 00 03                    STA nt_buffer, X
0DC5B E6 04                       INC nt_update_buf_wc
0DC5D                             
0DC5D                             ;buffer overflow check
0DC5D A5 04                       LDA nt_update_buf_wc
0DC5F C9 FE                       CMP #$FE
0DC61 D0 11                       BNE +
0DC63 A9 01                         LDA #1
0DC65 85 05                         STA nt_buffer_overflow
0DC67                               end_nt_buffer_write
0DC67                             ;find and write data lentgh
0DC67 A5 04                       LDA nt_update_buf_wc
0DC69 E5 03                       SBC nt_update_buf_wi
0DC6B A6 03                       LDX nt_update_buf_wi
0DC6D 9D 00 03                    STA nt_buffer, X
0DC70                             ;update `write initial` using `write current`
0DC70 A6 04                       LDX nt_update_buf_wc
0DC72 86 03                       STX nt_update_buf_wi
0DC74                             +:
0DC74                               write_to_nt_buffer generic_bytes+0
0DC74 A5 05                       LDA nt_buffer_overflow
0DC76 D0 21                       BNE +
0DC78                             
0DC78 AD 00 07                    LDA generic_bytes+0
0DC7B A6 04                       LDX nt_update_buf_wc
0DC7D 9D 00 03                    STA nt_buffer, X
0DC80 E6 04                       INC nt_update_buf_wc
0DC82                             
0DC82                             ;buffer overflow check
0DC82 A5 04                       LDA nt_update_buf_wc
0DC84 C9 FE                       CMP #$FE
0DC86 D0 11                       BNE +
0DC88 A9 01                         LDA #1
0DC8A 85 05                         STA nt_buffer_overflow
0DC8C                               end_nt_buffer_write
0DC8C                             ;find and write data lentgh
0DC8C A5 04                       LDA nt_update_buf_wc
0DC8E E5 03                       SBC nt_update_buf_wi
0DC90 A6 03                       LDX nt_update_buf_wi
0DC92 9D 00 03                    STA nt_buffer, X
0DC95                             ;update `write initial` using `write current`
0DC95 A6 04                       LDX nt_update_buf_wc
0DC97 86 03                       STX nt_update_buf_wi
0DC99                             +:
0DC99                             end_nt_buffer_write
0DC99                             ;find and write data lentgh
0DC99 A5 04                       LDA nt_update_buf_wc
0DC9B E5 03                       SBC nt_update_buf_wi
0DC9D A6 03                       LDX nt_update_buf_wi
0DC9F 9D 00 03                    STA nt_buffer, X
0DCA2                             ;update `write initial` using `write current`
0DCA2 A6 04                       LDX nt_update_buf_wc
0DCA4 86 03                       STX nt_update_buf_wi
0DCA6 60                          RTS
0DCA7                             
0DCA7                           draw_chest:
0DCA7 A0 37                       LDY #$37 ;default fill (floor)
0DCA9                             
0DCA9 AE 01 06                    LDX player_room
0DCAC BD 00 04                    LDA dungeon_map,X
0DCAF 29 02                       AND #%00000010
0DCB1 C9 00                       CMP #0
0DCB3 F0 02                       BEQ +
0DCB5 A0 3C                         LDY #$3C ;first tile of chest
0DCB7                             +:
0DCB7                             
0DCB7 8C 00 07                    STY generic_bytes+0
0DCBA                             begin_nt_buffer_write #$22, #$44
0DCBA                             ;if they previous entry is unfinished, finish it
0DCBA A5 03                       LDA nt_update_buf_wi
0DCBC C5 04                       CMP nt_update_buf_wc
0DCBE F0 0D                       BEQ +
0DCC0                               end_nt_buffer_write
0DCC0                             ;find and write data lentgh
0DCC0 A5 04                       LDA nt_update_buf_wc
0DCC2 E5 03                       SBC nt_update_buf_wi
0DCC4 A6 03                       LDX nt_update_buf_wi
0DCC6 9D 00 03                    STA nt_buffer, X
0DCC9                             ;update `write initial` using `write current`
0DCC9 A6 04                       LDX nt_update_buf_wc
0DCCB 86 03                       STX nt_update_buf_wi
0DCCD                             +:
0DCCD                           
0DCCD A5 03                       LDA nt_update_buf_wi
0DCCF C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DCD1 90 04                       BCC +
0DCD3 A9 01                         LDA #1
0DCD5 85 05                         STA nt_buffer_overflow
0DCD7                             +:
0DCD7                             
0DCD7 A5 05                       LDA nt_buffer_overflow
0DCD9 D0 16                       BNE +
0DCDB                             
0DCDB A6 03                       LDX nt_update_buf_wi
0DCDD A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DCDF 9D 00 03                    STA nt_buffer, X
0DCE2                             
0DCE2 E8                          INX
0DCE3 A9 22                       LDA #$22
0DCE5 9D 00 03                    STA nt_buffer, X
0DCE8                             
0DCE8 E8                          INX
0DCE9 A9 44                       LDA #$44
0DCEB 9D 00 03                    STA nt_buffer, X
0DCEE                             
0DCEE E8                          INX
0DCEF 86 04                       STX nt_update_buf_wc
0DCF1                             
0DCF1                             +:
0DCF1                               write_to_nt_buffer generic_bytes+0
0DCF1 A5 05                       LDA nt_buffer_overflow
0DCF3 D0 21                       BNE +
0DCF5                             
0DCF5 AD 00 07                    LDA generic_bytes+0
0DCF8 A6 04                       LDX nt_update_buf_wc
0DCFA 9D 00 03                    STA nt_buffer, X
0DCFD E6 04                       INC nt_update_buf_wc
0DCFF                             
0DCFF                             ;buffer overflow check
0DCFF A5 04                       LDA nt_update_buf_wc
0DD01 C9 FE                       CMP #$FE
0DD03 D0 11                       BNE +
0DD05 A9 01                         LDA #1
0DD07 85 05                         STA nt_buffer_overflow
0DD09                               end_nt_buffer_write
0DD09                             ;find and write data lentgh
0DD09 A5 04                       LDA nt_update_buf_wc
0DD0B E5 03                       SBC nt_update_buf_wi
0DD0D A6 03                       LDX nt_update_buf_wi
0DD0F 9D 00 03                    STA nt_buffer, X
0DD12                             ;update `write initial` using `write current`
0DD12 A6 04                       LDX nt_update_buf_wc
0DD14 86 03                       STX nt_update_buf_wi
0DD16                             +:
0DD16                               ;if it's not a ground tile, move to the next tile of the sprite
0DD16 AD 00 07                      LDA generic_bytes+0
0DD19 C9 37                         CMP #$37
0DD1B F0 03                         BEQ +
0DD1D EE 00 07                        INC generic_bytes+0
0DD20                               +:
0DD20                               write_to_nt_buffer generic_bytes+0
0DD20 A5 05                       LDA nt_buffer_overflow
0DD22 D0 21                       BNE +
0DD24                             
0DD24 AD 00 07                    LDA generic_bytes+0
0DD27 A6 04                       LDX nt_update_buf_wc
0DD29 9D 00 03                    STA nt_buffer, X
0DD2C E6 04                       INC nt_update_buf_wc
0DD2E                             
0DD2E                             ;buffer overflow check
0DD2E A5 04                       LDA nt_update_buf_wc
0DD30 C9 FE                       CMP #$FE
0DD32 D0 11                       BNE +
0DD34 A9 01                         LDA #1
0DD36 85 05                         STA nt_buffer_overflow
0DD38                               end_nt_buffer_write
0DD38                             ;find and write data lentgh
0DD38 A5 04                       LDA nt_update_buf_wc
0DD3A E5 03                       SBC nt_update_buf_wi
0DD3C A6 03                       LDX nt_update_buf_wi
0DD3E 9D 00 03                    STA nt_buffer, X
0DD41                             ;update `write initial` using `write current`
0DD41 A6 04                       LDX nt_update_buf_wc
0DD43 86 03                       STX nt_update_buf_wi
0DD45                             +:
0DD45                             end_nt_buffer_write
0DD45                             ;find and write data lentgh
0DD45 A5 04                       LDA nt_update_buf_wc
0DD47 E5 03                       SBC nt_update_buf_wi
0DD49 A6 03                       LDX nt_update_buf_wi
0DD4B 9D 00 03                    STA nt_buffer, X
0DD4E                             ;update `write initial` using `write current`
0DD4E A6 04                       LDX nt_update_buf_wc
0DD50 86 03                       STX nt_update_buf_wi
0DD52                             
0DD52                             begin_nt_buffer_write #$22, #$44+#$20
0DD52                             ;if they previous entry is unfinished, finish it
0DD52 A5 03                       LDA nt_update_buf_wi
0DD54 C5 04                       CMP nt_update_buf_wc
0DD56 F0 0D                       BEQ +
0DD58                               end_nt_buffer_write
0DD58                             ;find and write data lentgh
0DD58 A5 04                       LDA nt_update_buf_wc
0DD5A E5 03                       SBC nt_update_buf_wi
0DD5C A6 03                       LDX nt_update_buf_wi
0DD5E 9D 00 03                    STA nt_buffer, X
0DD61                             ;update `write initial` using `write current`
0DD61 A6 04                       LDX nt_update_buf_wc
0DD63 86 03                       STX nt_update_buf_wi
0DD65                             +:
0DD65                           
0DD65 A5 03                       LDA nt_update_buf_wi
0DD67 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DD69 90 04                       BCC +
0DD6B A9 01                         LDA #1
0DD6D 85 05                         STA nt_buffer_overflow
0DD6F                             +:
0DD6F                             
0DD6F A5 05                       LDA nt_buffer_overflow
0DD71 D0 16                       BNE +
0DD73                             
0DD73 A6 03                       LDX nt_update_buf_wi
0DD75 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DD77 9D 00 03                    STA nt_buffer, X
0DD7A                             
0DD7A E8                          INX
0DD7B A9 22                       LDA #$22
0DD7D 9D 00 03                    STA nt_buffer, X
0DD80                             
0DD80 E8                          INX
0DD81 A9 64                       LDA #$44+#$20
0DD83 9D 00 03                    STA nt_buffer, X
0DD86                             
0DD86 E8                          INX
0DD87 86 04                       STX nt_update_buf_wc
0DD89                             
0DD89                             +:
0DD89 AD 00 07                      LDA generic_bytes+0
0DD8C C9 37                         CMP #$37
0DD8E F0 03                         BEQ +
0DD90 EE 00 07                        INC generic_bytes+0
0DD93                               +:
0DD93                               
0DD93                               write_to_nt_buffer generic_bytes+0
0DD93 A5 05                       LDA nt_buffer_overflow
0DD95 D0 21                       BNE +
0DD97                             
0DD97 AD 00 07                    LDA generic_bytes+0
0DD9A A6 04                       LDX nt_update_buf_wc
0DD9C 9D 00 03                    STA nt_buffer, X
0DD9F E6 04                       INC nt_update_buf_wc
0DDA1                             
0DDA1                             ;buffer overflow check
0DDA1 A5 04                       LDA nt_update_buf_wc
0DDA3 C9 FE                       CMP #$FE
0DDA5 D0 11                       BNE +
0DDA7 A9 01                         LDA #1
0DDA9 85 05                         STA nt_buffer_overflow
0DDAB                               end_nt_buffer_write
0DDAB                             ;find and write data lentgh
0DDAB A5 04                       LDA nt_update_buf_wc
0DDAD E5 03                       SBC nt_update_buf_wi
0DDAF A6 03                       LDX nt_update_buf_wi
0DDB1 9D 00 03                    STA nt_buffer, X
0DDB4                             ;update `write initial` using `write current`
0DDB4 A6 04                       LDX nt_update_buf_wc
0DDB6 86 03                       STX nt_update_buf_wi
0DDB8                             +:
0DDB8 AD 00 07                      LDA generic_bytes+0
0DDBB C9 37                         CMP #$37
0DDBD F0 03                         BEQ +
0DDBF EE 00 07                        INC generic_bytes+0
0DDC2                               +:
0DDC2                               write_to_nt_buffer generic_bytes+0
0DDC2 A5 05                       LDA nt_buffer_overflow
0DDC4 D0 21                       BNE +
0DDC6                             
0DDC6 AD 00 07                    LDA generic_bytes+0
0DDC9 A6 04                       LDX nt_update_buf_wc
0DDCB 9D 00 03                    STA nt_buffer, X
0DDCE E6 04                       INC nt_update_buf_wc
0DDD0                             
0DDD0                             ;buffer overflow check
0DDD0 A5 04                       LDA nt_update_buf_wc
0DDD2 C9 FE                       CMP #$FE
0DDD4 D0 11                       BNE +
0DDD6 A9 01                         LDA #1
0DDD8 85 05                         STA nt_buffer_overflow
0DDDA                               end_nt_buffer_write
0DDDA                             ;find and write data lentgh
0DDDA A5 04                       LDA nt_update_buf_wc
0DDDC E5 03                       SBC nt_update_buf_wi
0DDDE A6 03                       LDX nt_update_buf_wi
0DDE0 9D 00 03                    STA nt_buffer, X
0DDE3                             ;update `write initial` using `write current`
0DDE3 A6 04                       LDX nt_update_buf_wc
0DDE5 86 03                       STX nt_update_buf_wi
0DDE7                             +:
0DDE7                             end_nt_buffer_write
0DDE7                             ;find and write data lentgh
0DDE7 A5 04                       LDA nt_update_buf_wc
0DDE9 E5 03                       SBC nt_update_buf_wi
0DDEB A6 03                       LDX nt_update_buf_wi
0DDED 9D 00 03                    STA nt_buffer, X
0DDF0                             ;update `write initial` using `write current`
0DDF0 A6 04                       LDX nt_update_buf_wc
0DDF2 86 03                       STX nt_update_buf_wi
0DDF4                             
0DDF4 60                          RTS
0DDF5                           draw_spirit:
0DDF5 A0 37                       LDY #$37 ;default fill (floor)
0DDF7                             
0DDF7 AE 01 06                    LDX player_room
0DDFA BD 00 04                    LDA dungeon_map,X
0DDFD 29 04                       AND #%00000100
0DDFF C9 00                       CMP #0
0DE01 F0 02                       BEQ +
0DE03 A0 38                         LDY #$38 ;first tile of spirit
0DE05                             +:
0DE05                             
0DE05 8C 00 07                    STY generic_bytes+0
0DE08                             begin_nt_buffer_write #$20, #$9A
0DE08                             ;if they previous entry is unfinished, finish it
0DE08 A5 03                       LDA nt_update_buf_wi
0DE0A C5 04                       CMP nt_update_buf_wc
0DE0C F0 0D                       BEQ +
0DE0E                               end_nt_buffer_write
0DE0E                             ;find and write data lentgh
0DE0E A5 04                       LDA nt_update_buf_wc
0DE10 E5 03                       SBC nt_update_buf_wi
0DE12 A6 03                       LDX nt_update_buf_wi
0DE14 9D 00 03                    STA nt_buffer, X
0DE17                             ;update `write initial` using `write current`
0DE17 A6 04                       LDX nt_update_buf_wc
0DE19 86 03                       STX nt_update_buf_wi
0DE1B                             +:
0DE1B                           
0DE1B A5 03                       LDA nt_update_buf_wi
0DE1D C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DE1F 90 04                       BCC +
0DE21 A9 01                         LDA #1
0DE23 85 05                         STA nt_buffer_overflow
0DE25                             +:
0DE25                             
0DE25 A5 05                       LDA nt_buffer_overflow
0DE27 D0 16                       BNE +
0DE29                             
0DE29 A6 03                       LDX nt_update_buf_wi
0DE2B A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DE2D 9D 00 03                    STA nt_buffer, X
0DE30                             
0DE30 E8                          INX
0DE31 A9 20                       LDA #$20
0DE33 9D 00 03                    STA nt_buffer, X
0DE36                             
0DE36 E8                          INX
0DE37 A9 9A                       LDA #$9A
0DE39 9D 00 03                    STA nt_buffer, X
0DE3C                             
0DE3C E8                          INX
0DE3D 86 04                       STX nt_update_buf_wc
0DE3F                             
0DE3F                             +:
0DE3F                               write_to_nt_buffer generic_bytes+0
0DE3F A5 05                       LDA nt_buffer_overflow
0DE41 D0 21                       BNE +
0DE43                             
0DE43 AD 00 07                    LDA generic_bytes+0
0DE46 A6 04                       LDX nt_update_buf_wc
0DE48 9D 00 03                    STA nt_buffer, X
0DE4B E6 04                       INC nt_update_buf_wc
0DE4D                             
0DE4D                             ;buffer overflow check
0DE4D A5 04                       LDA nt_update_buf_wc
0DE4F C9 FE                       CMP #$FE
0DE51 D0 11                       BNE +
0DE53 A9 01                         LDA #1
0DE55 85 05                         STA nt_buffer_overflow
0DE57                               end_nt_buffer_write
0DE57                             ;find and write data lentgh
0DE57 A5 04                       LDA nt_update_buf_wc
0DE59 E5 03                       SBC nt_update_buf_wi
0DE5B A6 03                       LDX nt_update_buf_wi
0DE5D 9D 00 03                    STA nt_buffer, X
0DE60                             ;update `write initial` using `write current`
0DE60 A6 04                       LDX nt_update_buf_wc
0DE62 86 03                       STX nt_update_buf_wi
0DE64                             +:
0DE64                               ;if it's not a ground tile, move to the next tile of the sprite
0DE64 AD 00 07                      LDA generic_bytes+0
0DE67 C9 37                         CMP #$37
0DE69 F0 03                         BEQ +
0DE6B EE 00 07                        INC generic_bytes+0
0DE6E                               +:
0DE6E                               write_to_nt_buffer generic_bytes+0
0DE6E A5 05                       LDA nt_buffer_overflow
0DE70 D0 21                       BNE +
0DE72                             
0DE72 AD 00 07                    LDA generic_bytes+0
0DE75 A6 04                       LDX nt_update_buf_wc
0DE77 9D 00 03                    STA nt_buffer, X
0DE7A E6 04                       INC nt_update_buf_wc
0DE7C                             
0DE7C                             ;buffer overflow check
0DE7C A5 04                       LDA nt_update_buf_wc
0DE7E C9 FE                       CMP #$FE
0DE80 D0 11                       BNE +
0DE82 A9 01                         LDA #1
0DE84 85 05                         STA nt_buffer_overflow
0DE86                               end_nt_buffer_write
0DE86                             ;find and write data lentgh
0DE86 A5 04                       LDA nt_update_buf_wc
0DE88 E5 03                       SBC nt_update_buf_wi
0DE8A A6 03                       LDX nt_update_buf_wi
0DE8C 9D 00 03                    STA nt_buffer, X
0DE8F                             ;update `write initial` using `write current`
0DE8F A6 04                       LDX nt_update_buf_wc
0DE91 86 03                       STX nt_update_buf_wi
0DE93                             +:
0DE93                             end_nt_buffer_write
0DE93                             ;find and write data lentgh
0DE93 A5 04                       LDA nt_update_buf_wc
0DE95 E5 03                       SBC nt_update_buf_wi
0DE97 A6 03                       LDX nt_update_buf_wi
0DE99 9D 00 03                    STA nt_buffer, X
0DE9C                             ;update `write initial` using `write current`
0DE9C A6 04                       LDX nt_update_buf_wc
0DE9E 86 03                       STX nt_update_buf_wi
0DEA0                             
0DEA0                             begin_nt_buffer_write #$20, #$9A+#$20
0DEA0                             ;if they previous entry is unfinished, finish it
0DEA0 A5 03                       LDA nt_update_buf_wi
0DEA2 C5 04                       CMP nt_update_buf_wc
0DEA4 F0 0D                       BEQ +
0DEA6                               end_nt_buffer_write
0DEA6                             ;find and write data lentgh
0DEA6 A5 04                       LDA nt_update_buf_wc
0DEA8 E5 03                       SBC nt_update_buf_wi
0DEAA A6 03                       LDX nt_update_buf_wi
0DEAC 9D 00 03                    STA nt_buffer, X
0DEAF                             ;update `write initial` using `write current`
0DEAF A6 04                       LDX nt_update_buf_wc
0DEB1 86 03                       STX nt_update_buf_wi
0DEB3                             +:
0DEB3                           
0DEB3 A5 03                       LDA nt_update_buf_wi
0DEB5 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DEB7 90 04                       BCC +
0DEB9 A9 01                         LDA #1
0DEBB 85 05                         STA nt_buffer_overflow
0DEBD                             +:
0DEBD                             
0DEBD A5 05                       LDA nt_buffer_overflow
0DEBF D0 16                       BNE +
0DEC1                             
0DEC1 A6 03                       LDX nt_update_buf_wi
0DEC3 A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DEC5 9D 00 03                    STA nt_buffer, X
0DEC8                             
0DEC8 E8                          INX
0DEC9 A9 20                       LDA #$20
0DECB 9D 00 03                    STA nt_buffer, X
0DECE                             
0DECE E8                          INX
0DECF A9 BA                       LDA #$9A+#$20
0DED1 9D 00 03                    STA nt_buffer, X
0DED4                             
0DED4 E8                          INX
0DED5 86 04                       STX nt_update_buf_wc
0DED7                             
0DED7                             +:
0DED7 AD 00 07                      LDA generic_bytes+0
0DEDA C9 37                         CMP #$37
0DEDC F0 03                         BEQ +
0DEDE EE 00 07                        INC generic_bytes+0
0DEE1                               +:
0DEE1                               
0DEE1                               write_to_nt_buffer generic_bytes+0
0DEE1 A5 05                       LDA nt_buffer_overflow
0DEE3 D0 21                       BNE +
0DEE5                             
0DEE5 AD 00 07                    LDA generic_bytes+0
0DEE8 A6 04                       LDX nt_update_buf_wc
0DEEA 9D 00 03                    STA nt_buffer, X
0DEED E6 04                       INC nt_update_buf_wc
0DEEF                             
0DEEF                             ;buffer overflow check
0DEEF A5 04                       LDA nt_update_buf_wc
0DEF1 C9 FE                       CMP #$FE
0DEF3 D0 11                       BNE +
0DEF5 A9 01                         LDA #1
0DEF7 85 05                         STA nt_buffer_overflow
0DEF9                               end_nt_buffer_write
0DEF9                             ;find and write data lentgh
0DEF9 A5 04                       LDA nt_update_buf_wc
0DEFB E5 03                       SBC nt_update_buf_wi
0DEFD A6 03                       LDX nt_update_buf_wi
0DEFF 9D 00 03                    STA nt_buffer, X
0DF02                             ;update `write initial` using `write current`
0DF02 A6 04                       LDX nt_update_buf_wc
0DF04 86 03                       STX nt_update_buf_wi
0DF06                             +:
0DF06 AD 00 07                      LDA generic_bytes+0
0DF09 C9 37                         CMP #$37
0DF0B F0 03                         BEQ +
0DF0D EE 00 07                        INC generic_bytes+0
0DF10                               +:
0DF10                               write_to_nt_buffer generic_bytes+0
0DF10 A5 05                       LDA nt_buffer_overflow
0DF12 D0 21                       BNE +
0DF14                             
0DF14 AD 00 07                    LDA generic_bytes+0
0DF17 A6 04                       LDX nt_update_buf_wc
0DF19 9D 00 03                    STA nt_buffer, X
0DF1C E6 04                       INC nt_update_buf_wc
0DF1E                             
0DF1E                             ;buffer overflow check
0DF1E A5 04                       LDA nt_update_buf_wc
0DF20 C9 FE                       CMP #$FE
0DF22 D0 11                       BNE +
0DF24 A9 01                         LDA #1
0DF26 85 05                         STA nt_buffer_overflow
0DF28                               end_nt_buffer_write
0DF28                             ;find and write data lentgh
0DF28 A5 04                       LDA nt_update_buf_wc
0DF2A E5 03                       SBC nt_update_buf_wi
0DF2C A6 03                       LDX nt_update_buf_wi
0DF2E 9D 00 03                    STA nt_buffer, X
0DF31                             ;update `write initial` using `write current`
0DF31 A6 04                       LDX nt_update_buf_wc
0DF33 86 03                       STX nt_update_buf_wi
0DF35                             +:
0DF35                             end_nt_buffer_write
0DF35                             ;find and write data lentgh
0DF35 A5 04                       LDA nt_update_buf_wc
0DF37 E5 03                       SBC nt_update_buf_wi
0DF39 A6 03                       LDX nt_update_buf_wi
0DF3B 9D 00 03                    STA nt_buffer, X
0DF3E                             ;update `write initial` using `write current`
0DF3E A6 04                       LDX nt_update_buf_wc
0DF40 86 03                       STX nt_update_buf_wi
0DF42                             
0DF42                             ; apply color
0DF42 A9 55                       LDA #%01010101 ; ground color
0DF44 8D 01 07                    STA generic_bytes+1
0DF47                             
0DF47 AD 00 07                    LDA generic_bytes+0
0DF4A C9 37                       CMP #$37
0DF4C F0 0D                       BEQ +
0DF4E 20 97 C1                      JSR rng
0DF51 A5 07                         LDA rng_seed
0DF53 29 0C                         AND #%00001100
0DF55 0D 01 07                      ORA generic_bytes+1
0DF58 8D 01 07                      STA generic_bytes+1
0DF5B                             +:
0DF5B                             
0DF5B                             begin_nt_buffer_write #$23, #$CE
0DF5B                             ;if they previous entry is unfinished, finish it
0DF5B A5 03                       LDA nt_update_buf_wi
0DF5D C5 04                       CMP nt_update_buf_wc
0DF5F F0 0D                       BEQ +
0DF61                               end_nt_buffer_write
0DF61                             ;find and write data lentgh
0DF61 A5 04                       LDA nt_update_buf_wc
0DF63 E5 03                       SBC nt_update_buf_wi
0DF65 A6 03                       LDX nt_update_buf_wi
0DF67 9D 00 03                    STA nt_buffer, X
0DF6A                             ;update `write initial` using `write current`
0DF6A A6 04                       LDX nt_update_buf_wc
0DF6C 86 03                       STX nt_update_buf_wi
0DF6E                             +:
0DF6E                           
0DF6E A5 03                       LDA nt_update_buf_wi
0DF70 C9 FB                       CMP #$fb ;minumum space needed for a new entry
0DF72 90 04                       BCC +
0DF74 A9 01                         LDA #1
0DF76 85 05                         STA nt_buffer_overflow
0DF78                             +:
0DF78                             
0DF78 A5 05                       LDA nt_buffer_overflow
0DF7A D0 16                       BNE +
0DF7C                             
0DF7C A6 03                       LDX nt_update_buf_wi
0DF7E A9 00                       LDA #$00 ;value will be updated when end_nt_buffer_write is called
0DF80 9D 00 03                    STA nt_buffer, X
0DF83                             
0DF83 E8                          INX
0DF84 A9 23                       LDA #$23
0DF86 9D 00 03                    STA nt_buffer, X
0DF89                             
0DF89 E8                          INX
0DF8A A9 CE                       LDA #$CE
0DF8C 9D 00 03                    STA nt_buffer, X
0DF8F                             
0DF8F E8                          INX
0DF90 86 04                       STX nt_update_buf_wc
0DF92                             
0DF92                             +:
0DF92                               write_to_nt_buffer generic_bytes+0
0DF92 A5 05                       LDA nt_buffer_overflow
0DF94 D0 21                       BNE +
0DF96                             
0DF96 AD 00 07                    LDA generic_bytes+0
0DF99 A6 04                       LDX nt_update_buf_wc
0DF9B 9D 00 03                    STA nt_buffer, X
0DF9E E6 04                       INC nt_update_buf_wc
0DFA0                             
0DFA0                             ;buffer overflow check
0DFA0 A5 04                       LDA nt_update_buf_wc
0DFA2 C9 FE                       CMP #$FE
0DFA4 D0 11                       BNE +
0DFA6 A9 01                         LDA #1
0DFA8 85 05                         STA nt_buffer_overflow
0DFAA                               end_nt_buffer_write
0DFAA                             ;find and write data lentgh
0DFAA A5 04                       LDA nt_update_buf_wc
0DFAC E5 03                       SBC nt_update_buf_wi
0DFAE A6 03                       LDX nt_update_buf_wi
0DFB0 9D 00 03                    STA nt_buffer, X
0DFB3                             ;update `write initial` using `write current`
0DFB3 A6 04                       LDX nt_update_buf_wc
0DFB5 86 03                       STX nt_update_buf_wi
0DFB7                             +:
0DFB7                             end_nt_buffer_write
0DFB7                             ;find and write data lentgh
0DFB7 A5 04                       LDA nt_update_buf_wc
0DFB9 E5 03                       SBC nt_update_buf_wi
0DFBB A6 03                       LDX nt_update_buf_wi
0DFBD 9D 00 03                    STA nt_buffer, X
0DFC0                             ;update `write initial` using `write current`
0DFC0 A6 04                       LDX nt_update_buf_wc
0DFC2 86 03                       STX nt_update_buf_wi
0DFC4                             
0DFC4 60                          RTS
0DFC5                           draw_fountain:
0DFC5 60                          RTS
0DFC6                           
0DFC6                           play_code:
0DFC6 20 1A C8                    JSR update_stat_readout
0DFC9 20 59 CF                    JSR draw_room
0DFCC                             
0DFCC                             ; test -- DO NOT LEAVE IN FINAL
0DFCC                             check_ondown #%00001000
0DFCC A5 0A                       LDA button_ondown
0DFCE 29 08                       AND #%00001000
0DFD0 F0 16                       BEQ +
0DFD2 A9 F0                         LDA #%11110000
0DFD4 2D 01 06                      AND player_room
0DFD7 C9 F0                         CMP #%11110000
0DFD9 F0 0D                         BEQ +
0DFDB AD 01 06                        LDA player_room
0DFDE 69 10                           ADC #%00010000
0DFE0 8D 01 06                        STA player_room
0DFE3                                 
0DFE3 A9 01                           LDA #1
0DFE5 8D 7F 06                        STA room_update_req
0DFE8                             +:
0DFE8                             check_ondown #%00000100
0DFE8 A5 0A                       LDA button_ondown
0DFEA 29 04                       AND #%00000100
0DFEC F0 16                       BEQ +
0DFEE A9 F0                         LDA #%11110000
0DFF0 2D 01 06                      AND player_room
0DFF3 C9 00                         CMP #%00000000
0DFF5 F0 0D                         BEQ +
0DFF7 AD 01 06                        LDA player_room
0DFFA E9 10                           SBC #%00010000
0DFFC 8D 01 06                        STA player_room
0DFFF                                 
0DFFF A9 01                           LDA #1
0E001 8D 7F 06                        STA room_update_req
0E004                             +:
0E004                             check_ondown #%00000010
0E004 A5 0A                       LDA button_ondown
0E006 29 02                       AND #%00000010
0E008 F0 16                       BEQ +
0E00A A9 0F                         LDA #%00001111
0E00C 2D 01 06                      AND player_room
0E00F C9 00                         CMP #%00000000
0E011 F0 0D                         BEQ +
0E013 AD 01 06                        LDA player_room
0E016 E9 01                           SBC #%00000001
0E018 8D 01 06                        STA player_room
0E01B                                 
0E01B A9 01                           LDA #1
0E01D 8D 7F 06                        STA room_update_req
0E020                             +:
0E020                             check_ondown #%00000001
0E020 A5 0A                       LDA button_ondown
0E022 29 01                       AND #%00000001
0E024 F0 16                       BEQ +
0E026 A9 0F                         LDA #%00001111
0E028 2D 01 06                      AND player_room
0E02B C9 0F                         CMP #%00001111
0E02D F0 0D                         BEQ +
0E02F AD 01 06                        LDA player_room
0E032 69 01                           ADC #%00000001
0E034 8D 01 06                        STA player_room
0E037                                 
0E037 A9 01                           LDA #1
0E039 8D 7F 06                        STA room_update_req
0E03C                             +:
0E03C                             ; end test
0E03C 60                          RTS
0E03D                           
0E03D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E03D                           ; data
0E03D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E03D                           
0E03D                             .org $E000
*** Value out of range.
0E03D                           colorpal1:
0E03D 0F 30 27 13 0F 05 2D 16..   .incbin "dat/pal.dat"
0E13D                           titlescreen_name:
0E13D 24 24 24 24 24 24 24 24..   .incbin "dat/title.nam"
0E53D                           char_create_name:
0E53D 24 24 24 24 24 24 24 24..   .incbin "dat/char_create.nam"
0E93D                           room_name:
0E93D 36 36 36 36 36 36 36 36..   .incbin "dat/room.nam"
0ED3D                             
0ED3D                           cc_stat_options:
0ED3D 0A 14 1E 32 00 02 05 0A..   .incbin "dat/player_stat.dat"
0ED51                           enemy_starting_stats:
0ED51 00 00 00 02 02 01 00 02..   .incbin "dat/enemy_stat.dat"
0ED6A                           
0ED6A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0ED6A                           ; interupt vectors
0ED6A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0ED6A                           
0ED6A 00 00 00 00 00 00 00 00..   .org $fffa
0FFFA                           
0FFFA C6 C0                       .dw NMI
0FFFC 00 C0                       .dw Reset
0FFFE 96 C1                       .dw IRQ
10000                           
10000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10000                           ; chr-rom
10000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10000                           
10000 00 3C 66 6E 76 66 66 3C..   .incbin "dat/sprites.chr"
