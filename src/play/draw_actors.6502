draw_actors:
  LDX player_room
  LDA dungeon_map, X
  AND #%11110000 ; we only care about the enemies
  LSR
  LSR
  LSR
  LSR
  STA enemies_in_room
  LDA player_room
  CMP boss_room
  BNE +
    LDA enemies_in_room
    ORA #%00010000
    STA enemies_in_room
  +:
  
  LDA #0
  STA actor_data_pointer
  STA actor_sprite_pointer
  LDA #$10 ; actor sprites start at $10 in chrrom
  STA actor_sprite_rom_pointer
  
  LDA #0 
  STA _enemy_loop_counter
  
  JMP +skip_enemy_in_room_check ; player is always in the room
  
  -:
    ; skip to the next one if the enemy isn't in the room
    LDA enemies_in_room
    AND #%00000001
    CMP #0
    BEQ +
      LSR enemies_in_room
    +skip_enemy_in_room_check:
      JSR draw_spec_actor
      JMP ++
    +:
      LSR enemies_in_room
      
      JSR hide_actor_sprites
    ++:
      ;move pointers to next
      LDA #ACT_SPRITE_DATA_LENGTH
      CLC
      ADC actor_sprite_pointer
      STA actor_sprite_pointer
      
      LDA #ACTOR_DATA_LENGTH
      CLC
      ADC actor_data_pointer
      STA actor_data_pointer
      
      LDA #$10
      CLC
      ADC actor_sprite_rom_pointer
      STA actor_sprite_rom_pointer
  LDA _enemy_loop_counter
  CLC
  ADC #1
  STA _enemy_loop_counter
  CMP NUMBER_OF_ACTORS
  
  BNE -
  
  RTS
  
  
hide_actor_sprites:
  LDX actor_sprite_pointer
  
  LDA #$00
  STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_HILT+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_BLADE+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_X,X
  LDA #$ff
  STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_HILT+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_BLADE+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_Y,X
  STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_Y,X
  
  RTS

draw_spec_actor:
  JSR draw_body
  JSR draw_fireball
  JSR check_if_draw_readout
  
  RTS
  
draw_body:
  ; put body in body spot
  
  LDX actor_data_pointer
  LDA actors+ACT_X,X
  SEC
  SBC #4 ;actor data holds location of middle of leg sprite
  LDX actor_sprite_pointer
  STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_X,X
  STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_X,X
  
  LDX actor_data_pointer
  LDA actors+ACT_Y,X
  SEC
  SBC #4 ;actor data holds location of middle of leg sprite
  LDX actor_sprite_pointer
  STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_Y,X
  SEC
  SBC #8
  STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_Y,X
  
  ; make body be right body
  LDX actor_data_pointer
  LDA actors+ACT_FACE,X
  BNE +
  ; GOING DOWN
    LDA actor_sprite_rom_pointer
    ;"add 0"
    LDX actor_sprite_pointer
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_I,X
    
    CLC
    ADC #ACT_NUM_FRAMES
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_I,X
    
    ; get step side
    
    LDX actor_data_pointer
    LDA actors+ACT_ANIM_TIMER,X
    
    AND #%00001000
    ASL
    ASL
    ASL
    
    STA generic_bytes
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    AND #%00111111
    ORA generic_bytes
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    AND #%00111111
    ORA generic_bytes
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    
    JMP ++
  +:
  SEC
  SBC #1
  BNE +
  ; GOING UP
    LDA actor_sprite_rom_pointer
    CLC
    ADC #1
    LDX actor_sprite_pointer
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_I,X
    
    CLC
    ADC #ACT_NUM_FRAMES
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_I,X
    
    ; get step side
    
    LDX actor_data_pointer
    LDA actors+ACT_ANIM_TIMER,X
    
    AND #%00001000
    ASL
    ASL
    ASL
    
    STA generic_bytes
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    AND #%00111111
    ORA generic_bytes
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    AND #%00111111
    ORA generic_bytes
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    JMP ++
  +:
  SEC
  SBC #1
  BNE +
  ; GOING RIGHT
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    AND #%00111111
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    AND #%00111111
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    
    JMP shared_lr_stepside_rendering
  +:
  SEC
  SBC #1
  BNE ++
  ; GOING LEFT
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    AND #%00111111
    ORA #%01000000
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_A,X
    
    LDX actor_sprite_pointer
    LDA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    AND #%00111111
    ORA #%01000000
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_A,X
    
    shared_lr_stepside_rendering:
    LDX actor_data_pointer
    LDA actors+ACT_ANIM_TIMER,X
    AND #%00001000
    ASL
    ASL
    ASL
    ASL
    ASL
    ADC #2
    STA generic_bytes
    
    LDA actor_sprite_rom_pointer
    CLC
    ADC generic_bytes
    LDX actor_sprite_pointer
    STA $0200+ACT_SPRITE_HEAD+SPRITE_DATA_I,X
    
    CLC
    ADC #ACT_NUM_FRAMES
    STA $0200+ACT_SPRITE_BODY+SPRITE_DATA_I,X
    
  ++:
  RTS
  
draw_fireball:
  ;set fireball x
  LDX actor_data_pointer
  LDA actors+ACT_FIRE_X, X
  LDX actor_sprite_pointer
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_X, X
  
  ;set fireball y
  LDX actor_data_pointer
  LDA actors+ACT_FIRE_Y, X
  LDX actor_sprite_pointer
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_Y, X
  
  ;set fireball sprite
  LDA #$1E ;fireball sideways sprite
  STA generic_bytes
  
  LDX actor_data_pointer
  LDA actors+ACT_FIRE_FACE
  AND #%00000010 ; %1x faces are sideways, 0x faces are up-down
  BNE +
    INC generic_bytes 
  +:
  LDX actor_sprite_pointer
  LDA generic_bytes
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_I, X
  
  ; set reflections
  LDX actor_data_pointer
  LDA actors+ACT_FIRE_FACE,X
  AND #%00000001 ; the last bit determines if the fire faces up|left
  ASL ; move the bit to the Flip Horizontal position
  ASL
  ASL
  ASL
  ASL
  ASL 
  STA generic_bytes+1
  
  LDX actor_data_pointer
  LDA actors+ACT_FIRE_ANIM_TIMER,X
  AND #%00010000
  ASL ; move the bit to the Flip Vertical position
  ASL
  ASL
  STA generic_bytes+2
  
  LDA generic_bytes
  CMP #$1E ; is fireball side-to-side?
  BEQ +
    ;swap which things controls which axis of reflection
    LDA generic_bytes+1
    ASL
    STA generic_bytes+1
    
    LDA generic_bytes+2
    LSR
    STA generic_bytes+2
  +:
  
  ;reflection mask
  LDA generic_bytes+1
  ORA generic_bytes+2
  STA generic_bytes+3
  
  LDX actor_sprite_pointer
  LDA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_A,X
  AND #%00111111
  ORA generic_bytes+3
  STA $0200+ACT_SPRITE_FIRE+SPRITE_DATA_A,X
  
  RTS
  
check_if_draw_readout:
  LDX actor_data_pointer
  LDA actors+ACT_READOUT_TIMER,X
  BEQ +
    ; yes digit display
    JSR set_readout_digs
    JSR set_readout_color
    JSR set_readout_y
    JSR set_readout_x
    
    
    JMP ++
  +:
    ; no digit display
    LDX actor_sprite_pointer
    LDA #$FF
    STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_Y,X
    STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_Y,X
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_Y,X
  ++:
  
  RTS
  
num_digs .equ generic_bytes+20
px .equ generic_bytes+30
set_readout_digs:
  ;figure out how many digits we need
  LDX actor_data_pointer
  LDA actors+ACT_READOUT_VALUE,X
  STA arguments
  BNE + ; "miss"
    LDA #2
    STA num_digs
    JMP ++
  +:
  
  CMP #9
  BCS +
    LDA #1
    STA num_digs
    JMP ++
  +:
  
  CMP #99
  BCS +
    LDA #2
    STA num_digs
    JMP ++
  +:
  
  ;BNE +
    LDA #3
    STA num_digs
    ;JMP ++
  ++:
  
  JSR byte_to_dec
  
  LDX actor_data_pointer
  LDA actors+ACT_READOUT_VALUE,X
  BNE +
    LDX actor_sprite_pointer
    
    LDA #$0A
    STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_I,X
    
    LDA #$0B
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_I,X
    
    JMP ++
  +:
  
    LDX actor_sprite_pointer
    
    LDA returns+2
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_I,X
    
    LDA returns+1
    STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_I,X
    
    LDA returns+0
    STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_I,X
    
  ++:
  
  RTS
set_readout_color:
  LDX actor_data_pointer
  LDA actors+ACT_READOUT_VALUE,X
  BNE +
    ; color blue for miss
    LDA #%00000010
    JMP ++
  +:
    ; color red for damage
    LDA #%00000011
  ++:
  
  LDX actor_sprite_pointer
  STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_A,X
  STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_A,X
  STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_A,X
  
  RTS
set_readout_y:
  LDX actor_data_pointer
  LDA actors+ACT_Y,X
  SEC
  SBC #21
  
  LDY actor_sprite_pointer
  CLC
  LDX num_digs
  BNE +
    LDA #$80
  +:
  STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_Y,Y
  CLC
  DEX
  BNE +
    LDA #$90
  +:
  STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_Y,Y
  CLC
  DEX
  BNE +
    LDA #$a0
  +:
  STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_Y,Y

  RTS
set_readout_x:
  LDX actor_data_pointer
  LDA actors+ACT_X,X
  STA px

  LDA num_digs
  CMP #3
  BNE + ;3 digits
    LDA #3
    STA num_digs+1
  
    LDX actor_sprite_pointer
    LDA px
    SEC
    SBC #12
    
    STA $0200+ACT_SPRITE_DIG0+SPRITE_DATA_X,X
    
    CLC
    ADC #8
    STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_X,X
    
    CLC
    ADC #8
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_X,X
  
    JMP end_readout_x
  +:
  CMP #2
  BNE + ;2 digits
    LDA #2
    STA num_digs+1
    
    LDX actor_sprite_pointer
    LDA px
    SEC
    SBC #8
    
    STA $0200+ACT_SPRITE_DIG1+SPRITE_DATA_X,X
    
    CLC
    ADC #8
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_X,X
    
    JMP end_readout_x
  +:
  CMP #1
  BNE end_readout_x ;1 digit
    LDA #1
    STA num_digs+1
    
    LDX actor_sprite_pointer
    LDA px
    SEC
    SBC #4
    
    STA $0200+ACT_SPRITE_DIG2+SPRITE_DATA_X,X
  end_readout_x:
  
  
  RTS
