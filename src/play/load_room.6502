SCREEN_TOP .equ #$20
WALL_TOP_L1 .equ #$0E

SCREEN_MID .equ #$21
WALL_LEFT_L1 .equ #$40
WALL_RIGHT_L1 .equ #$5C

SCREEN_BOT .equ #$22
WALL_BOT_L1 .equ #$8E

WALL_LINE_SPACING .equ #$20


draw_room:
  LDA room_update_req
  CMP #0
  BEQ +
    JSR fill_walls
  +:
  
  LDA #0
  STA room_update_req
  RTS
  
fill_walls:
  ; check upward
  LDY #$37 ;default fill (floor)
  ; check if at top
  LDA #%11110000
  AND player_room
  CMP #%11110000
  BNE +
    LDY #$36
  +:
  ; check if next room up exists
  LDA player_room
  CLC
  ADC #%00010000
  TAX
  STX generic_bytes+253
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+WALL_LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+(2*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+(3*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
 
  ; check leftward
  LDY #$37 ;default fill (floor)
  ; check if at left
  LDA #%00001111
  AND player_room
  CMP #%00000000
  BNE +
    LDY #$36
  +:
  ; check if next room left exists
  LDA player_room
  SEC
  SBC #%00000001
  TAX
  STX generic_bytes+255
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+WALL_LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+(2*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+(3*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
 
  ; check rightward
  LDY #$37 ;default fill (floor)
  ; check if at right
  LDA #%00001111
  AND player_room
  CMP #%00001111
  BNE +
    LDY #$36
  +:
  ; check if next room right exists
  LDA player_room
  CLC
  ADC #%00000001
  TAX
  STX generic_bytes+254
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+WALL_LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+(2*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+(3*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
 
  ; check downward
  LDY #$37 ;default fill (floor)
  ; check if at bottom
  LDA #%11110000
  AND player_room
  CMP #%00000000
  BNE +
    LDY #$36
  +:
  ; check if next down exists
  LDA player_room
  SEC
  SBC #%00010000
  TAX
  STX generic_bytes+252
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1+WALL_LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1+(2*WALL_LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  RTS
