SCREEN_TOP .equ #$20
WALL_TOP_L1 .equ #$0E
SPIRIT_L1 .equ #$9A

SCREEN_MID .equ #$21
WALL_LEFT_L1 .equ #$40
WALL_RIGHT_L1 .equ #$5C
FOUNTAIN_L1 .equ #$4E

SCREEN_BOT .equ #$22
WALL_BOT_L1 .equ #$8E
CHEST_L1 .equ #$44

ATTR_TABLE .equ #$23
SPIRIT_ATTR .equ #$CE
FOUNTAIN_ATTR .equ #$D3



LINE_SPACING .equ #$20
ATTR_SPACING .equ #$08


draw_room:
  LDA room_update_req
  CMP #0
  BEQ ++
    CMP #1
    BNE +
      JSR fill_walls
      JSR fill_enemy_stats
      
      INC room_update_req
      RTS
    +:
    
    CMP #2
    BNE +
      JSR draw_chest
      JSR draw_spirit
      JSR draw_fountain
    +:
    
    LDA #0
    STA room_update_req
  ++:
  
  RTS
  
fill_enemy_stats:
  LDX player_room
  LDA dungeon_map, X
  AND #%11110000 ; we only care about the enemies
  CLC
  ROR
  ROR
  ROR
  ROR
  STA enemies_in_room
  LDA player_room
  CMP boss_room
  BNE +
    LDA enemies_in_room
    ORA #%00010000
    STA enemies_in_room
  +:
  
  LDA #ACTOR_DATA_LENGTH ; don't load player stats
  STA actor_data_pointer
  
  -:
    ; skip to the next one if the enemy isn't in the room
    LDA enemies_in_room
    AND #%00000001
    CMP #0
    BEQ +
      LDA #128
      STA generic_bytes+16 ; x
      STA generic_bytes+17 ; y
      JSR spawn_actor
    +:
      ;move pointer to next
      LDA #ACTOR_DATA_LENGTH
      CLC
      ADC actor_data_pointer
      STA actor_data_pointer

      ROR enemies_in_room
  LDA enemies_in_room
  CMP #0
  BNE -
  
  RTS
  
fill_walls:
  ; check upward
  LDY #$37 ;default fill (floor)
  ; check if at top
  LDA #%11110000
  AND player_room
  CMP #%11110000
  BNE +
    LDY #$36
  +:
  ; check if next room up exists
  LDA player_room
  CLC
  ADC #%00010000
  TAX
  STX generic_bytes+253
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+(2*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_TOP, WALL_TOP_L1+(3*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
 
  ; check leftward
  LDY #$37 ;default fill (floor)
  ; check if at left
  LDA #%00001111
  AND player_room
  CMP #%00000000
  BNE +
    LDY #$36
  +:
  ; check if next room left exists
  LDA player_room
  SEC
  SBC #%00000001
  TAX
  STX generic_bytes+255
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+(2*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_LEFT_L1+(3*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
 
  ; check rightward
  LDY #$37 ;default fill (floor)
  ; check if at right
  LDA #%00001111
  AND player_room
  CMP #%00001111
  BNE +
    LDY #$36
  +:
  ; check if next room right exists
  LDA player_room
  CLC
  ADC #%00000001
  TAX
  STX generic_bytes+254
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+(2*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_MID, WALL_RIGHT_L1+(3*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
 
  ; check downward
  LDY #$37 ;default fill (floor)
  ; check if at bottom
  LDA #%11110000
  AND player_room
  CMP #%00000000
  BNE +
    LDY #$36
  +:
  ; check if next down exists
  LDA player_room
  SEC
  SBC #%00010000
  TAX
  STX generic_bytes+252
  LDA dungeon_map, X
  CMP #$00
  BNE +
    LDY #$36
  +:
  
  ; draw it
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1+LINE_SPACING
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  begin_nt_buffer_write SCREEN_BOT, WALL_BOT_L1+(2*LINE_SPACING)
    write_to_nt_buffer generic_bytes+0
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
    JSR _write_to_nt_buffer
  end_nt_buffer_write
  RTS
  
draw_chest:
  LDY #$37 ;default fill (floor)
  
  LDX player_room
  LDA dungeon_map,X
  AND #%00000010
  CMP #0
  BEQ +
    LDY #$3C ;first tile of chest
  +:
  
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_BOT, CHEST_L1
    write_to_nt_buffer generic_bytes+0
    ;if it's not a ground tile, move to the next tile of the sprite
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  begin_nt_buffer_write SCREEN_BOT, CHEST_L1+LINE_SPACING
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    
    write_to_nt_buffer generic_bytes+0
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  RTS
draw_spirit:
  LDY #$37 ;default fill (floor)
  
  LDX player_room
  LDA dungeon_map,X
  AND #%00000100
  CMP #0
  BEQ +
    LDY #$38 ;first tile of spirit
  +:
  
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_TOP, SPIRIT_L1
    write_to_nt_buffer generic_bytes+0
    ;if it's not a ground tile, move to the next tile of the sprite
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  begin_nt_buffer_write SCREEN_TOP, SPIRIT_L1+LINE_SPACING
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    
    write_to_nt_buffer generic_bytes+0
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  ; apply color
  LDA #%01010101 ; ground color
  STA generic_bytes+1
  
  LDA generic_bytes+0
  CMP #$37
  BEQ +
    ;seed the rng to make the spirit consistent
    LDA player_floor
    STA rng_seed
    LDA player_room
    STA rng_seed+1
  
    JSR rng
    LDA rng_seed
    AND #%00001100
    STA generic_bytes+2
    
    LDA generic_bytes+1
    AND #%11110011
    
    ORA generic_bytes+2
    STA generic_bytes+1
  +:
  
  begin_nt_buffer_write ATTR_TABLE, SPIRIT_ATTR
    write_to_nt_buffer generic_bytes+1
  end_nt_buffer_write
  
  RTS
draw_fountain:
  LDY #$37 ;default fill (floor)
  
  LDX player_room
  LDA dungeon_map,X
  AND #%00001000
  CMP #0
  BEQ +
    LDY #$60 ;first tile of fountain
  +:
  
  STY generic_bytes+0
  begin_nt_buffer_write SCREEN_MID, FOUNTAIN_L1
    write_to_nt_buffer generic_bytes+0
    ;if it's not a ground tile, move to the next tile of the sprite
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  begin_nt_buffer_write SCREEN_MID, FOUNTAIN_L1+LINE_SPACING
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  begin_nt_buffer_write SCREEN_MID, FOUNTAIN_L1+(2*LINE_SPACING)
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  begin_nt_buffer_write SCREEN_MID, FOUNTAIN_L1+(3*LINE_SPACING)
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
    
    LDA generic_bytes+0
    CMP #$37
    BEQ +
      INC generic_bytes+0
    +:
    write_to_nt_buffer generic_bytes+0
  end_nt_buffer_write
  
  ; apply color
  LDA #%01010101 ; ground color
  STA generic_bytes+1
  
  LDA generic_bytes+0
  CMP #$37
  BEQ +relay
    ;seed the rng to make the color consistent
    LDA player_floor
    STA rng_seed
    LDA player_room
    STA rng_seed+1
  
    JSR rng
    LDA rng_seed
    AND #%11000000
    STA generic_bytes+2
    
    ;the fountain lays in the corners of 4 attr-table regions
    LDA generic_bytes+1
    AND #%00111111
    ORA generic_bytes+2
    STA generic_bytes+10
    LSR generic_bytes+2
    LSR generic_bytes+2
    
    LDA generic_bytes+1
    AND #%11001111
    ORA generic_bytes+2
    STA generic_bytes+11
    LSR generic_bytes+2
    LSR generic_bytes+2
    
    LDA generic_bytes+1
    AND #%11110011
    ORA generic_bytes+2
    STA generic_bytes+12
    LSR generic_bytes+2
    LSR generic_bytes+2
    
    LDA generic_bytes+1
    AND #%11111100
    ORA generic_bytes+2
    STA generic_bytes+13
    LSR generic_bytes+2
    LSR generic_bytes+2
    
    STA generic_bytes+1
    
    ;jump was too far
    JMP +pass_relay
    +relay:
      JMP +
    pass_relay:
    
    begin_nt_buffer_write ATTR_TABLE, FOUNTAIN_ATTR
      write_to_nt_buffer generic_bytes+10
      write_to_nt_buffer generic_bytes+11
    end_nt_buffer_write
    begin_nt_buffer_write ATTR_TABLE, FOUNTAIN_ATTR+ATTR_SPACING
      write_to_nt_buffer generic_bytes+12
      write_to_nt_buffer generic_bytes+13
    end_nt_buffer_write
    
    JMP ++
  +:
  
  begin_nt_buffer_write ATTR_TABLE, FOUNTAIN_ATTR
    write_to_nt_buffer generic_bytes+1
    write_to_nt_buffer generic_bytes+1
  end_nt_buffer_write
  begin_nt_buffer_write ATTR_TABLE, FOUNTAIN_ATTR+ATTR_SPACING
    write_to_nt_buffer generic_bytes+1
    write_to_nt_buffer generic_bytes+1
  end_nt_buffer_write  
  
  ++:
  RTS
